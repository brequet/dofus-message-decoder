/*
* This file was generated by the dofus-protocol-builder tool.
* Generated on: 2024-07-19T13:36:12+02:00
* Dofus version: 2.72.0-release
* Dofus build date: 14-06-2024 08:05
 */

package protocol

import (
	"encoding/binary"
	"encoding/json"
	"fmt"
	"log/slog"
	"math"
	"time"
)

type MessageDecoder struct {
	logger *slog.Logger

	shouldRecoverFromPanic bool
}

func NewMessageDecoder(logger *slog.Logger, shouldRecoverFromPanic bool) *MessageDecoder {
	return &MessageDecoder{logger: logger, shouldRecoverFromPanic: shouldRecoverFromPanic}
}

type DecodedMessageWrapper struct {
	Message   NetworkMessage
	MessageId int
}

func (m *MessageDecoder) DecodeMessage(dataWrapper *DataWrapper) (DecodedMessageWrapper, error) {
	m.logger.Debug("DecodeMessage",
		"dataWrapper length", dataWrapper.Len(),
		"dataWrapper content", dataWrapper.Hex())

	if dataWrapper.Remaining() < 2 {
		dataWrapper.Reset()
		return DecodedMessageWrapper{}, fmt.Errorf("cannot read header + lenlen")
	}
	header := int(dataWrapper.ReadUnsignedShort())

	id := header >> 2
	lenlenData := int(header & 3)

	m.logger.Debug("header data", "id", id, "lenlenData", lenlenData)
	if dataWrapper.Remaining() < lenlenData {
		dataWrapper.Reset()
		return DecodedMessageWrapper{}, fmt.Errorf("Cannot read 'len', expected %d, got %d", lenlenData, dataWrapper.Remaining())
	}

	m.logger.Debug("datawrapper", "length", dataWrapper.Len())
	lenData := 0
	if lenlenData > 0 {
		lenBytes := dataWrapper.Read(lenlenData)
		lenData = int(binary.BigEndian.Uint64(append(make([]byte, 8-len(lenBytes)), lenBytes...)))
	}

	m.logger.Debug("data", "lenData", lenData, "remaining before reading data", dataWrapper.Remaining())

	if dataWrapper.Remaining() < lenData {
		dataWrapper.SetPosition(0)
		return DecodedMessageWrapper{}, fmt.Errorf("not enough data, expected %d, got %d", lenData, dataWrapper.Remaining())
	}

	message := getNetworkMessageById(id)
	if message == nil {
		dataWrapper.Reset()
		return DecodedMessageWrapper{}, fmt.Errorf("message not found for id %d", id)
	}

	m.logger.Debug("Message to deserialize", "msg", fmt.Sprintf("%+v", message))
	deserializeErrorPrt := TryToDeserializeMessage(message, NewDataWrapper(dataWrapper.Read(lenData)), m.shouldRecoverFromPanic)
	if deserializeErrorPrt != nil {
		dataWrapper.Reset()
		return DecodedMessageWrapper{Message: message, MessageId: id}, *deserializeErrorPrt
	} else {
		dataWrapper.RemoveConsumed()
		return DecodedMessageWrapper{Message: message, MessageId: id}, nil
	}
}

func TryToDeserializeMessage(message NetworkMessage, dataWrapper *DataWrapper, recoverFromPanic bool) (errPtr *error) {
	if recoverFromPanic {
		defer func() {
			if r := recover(); r != nil {
				err := fmt.Errorf("panic occurred: %v", r)
				errPtr = &err
			}
		}()
	}

	if message.IsDeserializeFunctionComplete() {
		message.Deserialize(dataWrapper)
	}

	return errPtr
}

type DataWrapper struct {
	data     []byte
	position int
}

func NewDataWrapper(data []byte) *DataWrapper {
	if data == nil {
		data = []byte{}
	}
	return &DataWrapper{data: data, position: 0}
}

func (d *DataWrapper) Append(data []byte) {
	d.data = append(d.data, data...)
}

func (d *DataWrapper) Reset() {
	d.data = make([]byte, 0)
	d.position = 0
}

func (d *DataWrapper) SetPosition(pos int) {
	d.data = d.data[pos:]
	d.position = 0
}

func (d *DataWrapper) RemoveConsumed() {
	d.data = d.data[d.position:]
	d.position = 0
}

func (d *DataWrapper) Len() int {
	return len(d.data)
}

func (d *DataWrapper) Remaining() int {
	return len(d.data) - d.position
}

func (d *DataWrapper) Hex() string {
	return fmt.Sprintf("%x", d.data)
}

func (d *DataWrapper) Read(l int) []byte {
	if len(d.data) < d.position+l {
		panic(fmt.Sprintf("IndexError: pos %d, l %d, len %d", d.position, l, len(d.data)))
	}
	pos := d.position
	d.position += l
	return d.data[pos:d.position]
}

func (d *DataWrapper) ReadBoolean() bool {
	ans := d.Read(1)
	if ans[0] != 0 && ans[0] != 1 {
		panic("Invalid boolean value")
	}
	return ans[0] == 1
}

func (d *DataWrapper) ReadByte() int8 {
	return int8(d.Read(1)[0])
}

func (d *DataWrapper) ReadByteArray() []byte {
	lon := d.ReadVarInt()
	return d.Read(lon)
}

func (d *DataWrapper) ReadDouble() float64 {
	return math.Float64frombits(binary.BigEndian.Uint64(d.Read(8)))
}

func (d *DataWrapper) ReadFloat() float32 {
	return math.Float32frombits(binary.BigEndian.Uint32(d.Read(4)))
}

func (d *DataWrapper) ReadInt() int32 {
	return int32(binary.BigEndian.Uint32(d.Read(4)))
}

func (d *DataWrapper) ReadShort() int16 {
	return int16(binary.BigEndian.Uint16(d.Read(2)))
}

func (d *DataWrapper) ReadUTF() string {
	lon := int(d.ReadUnsignedShort())
	return string(d.Read(lon))
}

func (d *DataWrapper) ReadUnsignedByte() uint8 {
	return d.Read(1)[0]
}

func (d *DataWrapper) ReadUnsignedInt() uint32 {
	return binary.BigEndian.Uint32(d.Read(4))
}

func (d *DataWrapper) ReadUnsignedShort() uint16 {
	return binary.BigEndian.Uint16(d.Read(2))
}

func (d *DataWrapper) ReadVarInt() int {
	var ans int
	for i := 0; i < 32; i += 7 {
		b := d.ReadUnsignedByte()
		ans += int(b&0b01111111) << i
		if b&0b10000000 == 0 {
			return ans
		}
	}
	panic("Too much data")
}

func (d *DataWrapper) ReadVarUhInt() int {
	return d.ReadVarInt()
}

func (d *DataWrapper) ReadVarLong() int64 {
	var ans int64
	for i := 0; i < 64; i += 7 {
		b := d.ReadUnsignedByte()
		ans += int64(b&0b01111111) << i
		if b&0b10000000 == 0 {
			return ans
		}
	}
	panic("Too much data")
}

func (d *DataWrapper) ReadVarUhLong() int64 {
	return d.ReadVarLong()
}

func (d *DataWrapper) ReadVarShort() int {
	var ans int
	for i := 0; i < 16; i += 7 {
		b := uint8(d.ReadByte())
		ans += int(b&0b01111111) << i
		if b&0b10000000 == 0 {
			return ans
		}
	}
	panic("Too much data")
}

func (d *DataWrapper) ReadVarUhShort() int {
	return d.ReadVarShort()
}

type MessageBase struct {
	MessageType_ string
	id_          int
}

type DofusData struct {
	GameVersion    string
	GenerationDate time.Time
	GameBuildDate  time.Time
}

type Vector[T any] struct {
	elements []*T
}

func NewVector[T any]() *Vector[T] {
	return &Vector[T]{[]*T{}}
}

func (v *Vector[T]) Push(element *T) {
	v.elements = append(v.elements, element)
}

func (v *Vector[T]) Size() int {
	return len(v.elements)
}

func (v *Vector[T]) Get(index int) *T {
	if index < 0 || index >= len(v.elements) {
		panic("index out of range")
	}
	return v.elements[index]
}

func (v *Vector[T]) GetAll() []*T {
	return v.elements
}

func (v *Vector[T]) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.elements)
}

func (v *Vector[T]) UnmarshalJSON(data []byte) error {
	var elements []*T
	if err := json.Unmarshal(data, &elements); err != nil {
		return err
	}

	v.elements = make([]*T, 0)
	for _, elem := range elements {
		if elem != nil {
			v.elements = append(v.elements, elem)
		}
	}
	return nil
}

type NetworkMessage interface {
	Deserialize(input *DataWrapper)
	IsDeserializeFunctionComplete() bool
}

func getDynamicType(input *DataWrapper) NetworkMessage {
	id := int(input.ReadUnsignedShort())
	return getTypeById(id)
}

func GetDofusData() DofusData {
	layout := "2006-01-02T15:04:05-07:00"
	genDate, _ := time.Parse(layout, "2024-07-19T13:36:12+02:00")

	layout = "2006-01-02 15:04"
	buildDate, _ := time.Parse(layout, "14-06-2024 08:05")
	return DofusData{GameVersion: "2.72.0-release", GenerationDate: genDate, GameBuildDate: buildDate}
}

type AbstractCharacterInformation struct {
	MessageBase
	Id int64
}

func NewAbstractCharacterInformation() *AbstractCharacterInformation {
	return &AbstractCharacterInformation{MessageBase: MessageBase{MessageType_: "AbstractCharacterInformation", id_: 5789}}
}
func (m *AbstractCharacterInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
}

func (m *AbstractCharacterInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractContactInformations struct {
	MessageBase
	AccountId  int32
	AccountTag *AccountTagInformation
}

func NewAbstractContactInformations() *AbstractContactInformations {
	return &AbstractContactInformations{MessageBase: MessageBase{MessageType_: "AbstractContactInformations", id_: 8841}}
}
func (m *AbstractContactInformations) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
	m.AccountTag = NewAccountTagInformation()
	m.AccountTag.Deserialize(input)
}

func (m *AbstractContactInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractFightDispellableEffectI interface {
	Deserialize(input *DataWrapper)
}

type AbstractFightDispellableEffect struct {
	MessageBase
	Uid            int
	TargetId       float64
	TurnDuration   int16
	Dispelable     int8
	SpellId        int
	EffectId       int
	ParentBoostUid int
}

func NewAbstractFightDispellableEffect() *AbstractFightDispellableEffect {
	return &AbstractFightDispellableEffect{MessageBase: MessageBase{MessageType_: "AbstractFightDispellableEffect", id_: 4079}}
}
func (m *AbstractFightDispellableEffect) Deserialize(input *DataWrapper) {
	m.Uid = input.ReadVarUhInt()
	m.TargetId = input.ReadDouble()
	m.TurnDuration = input.ReadShort()
	m.Dispelable = input.ReadByte()
	m.SpellId = input.ReadVarUhShort()
	m.EffectId = input.ReadVarUhInt()
	m.ParentBoostUid = input.ReadVarUhInt()
}

func (m *AbstractFightDispellableEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractFightTeamInformations struct {
	MessageBase
	TeamId     int8
	LeaderId   float64
	TeamSide   int8
	TeamTypeId int8
	NbWaves    int8
}

func NewAbstractFightTeamInformations() *AbstractFightTeamInformations {
	return &AbstractFightTeamInformations{MessageBase: MessageBase{MessageType_: "AbstractFightTeamInformations", id_: 8432}}
}
func (m *AbstractFightTeamInformations) Deserialize(input *DataWrapper) {
	m.TeamId = input.ReadByte()
	m.LeaderId = input.ReadDouble()
	m.TeamSide = input.ReadByte()
	m.TeamTypeId = input.ReadByte()
	m.NbWaves = input.ReadByte()
}

func (m *AbstractFightTeamInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractGameActionFightTargetedAbilityMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId          float64
	DestinationCellId int16
	Critical          int8
	SilentCast        bool
	VerboseCast       bool
}

func NewAbstractGameActionFightTargetedAbilityMessage() *AbstractGameActionFightTargetedAbilityMessage {
	return &AbstractGameActionFightTargetedAbilityMessage{MessageBase: MessageBase{MessageType_: "AbstractGameActionFightTargetedAbilityMessage", id_: 5172}}
}
func (m *AbstractGameActionFightTargetedAbilityMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.SilentCast = (byteBox0>>0)&1 != 0
	m.VerboseCast = (byteBox0>>1)&1 != 0
	m.TargetId = input.ReadDouble()
	m.DestinationCellId = input.ReadShort()
	m.Critical = input.ReadByte()
}

func (m *AbstractGameActionFightTargetedAbilityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractGameActionMessage struct {
	MessageBase
	ActionId int
	SourceId float64
}

func NewAbstractGameActionMessage() *AbstractGameActionMessage {
	return &AbstractGameActionMessage{MessageBase: MessageBase{MessageType_: "AbstractGameActionMessage", id_: 9631}}
}
func (m *AbstractGameActionMessage) Deserialize(input *DataWrapper) {
	m.ActionId = input.ReadVarUhShort()
	m.SourceId = input.ReadDouble()
}

func (m *AbstractGameActionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractGameActionWithAckMessage struct {
	MessageBase
	AbstractGameActionMessage
	WaitAckId int16
}

func NewAbstractGameActionWithAckMessage() *AbstractGameActionWithAckMessage {
	return &AbstractGameActionWithAckMessage{MessageBase: MessageBase{MessageType_: "AbstractGameActionWithAckMessage", id_: 1587}}
}
func (m *AbstractGameActionWithAckMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.WaitAckId = input.ReadShort()
}

func (m *AbstractGameActionWithAckMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractPartyEventMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewAbstractPartyEventMessage() *AbstractPartyEventMessage {
	return &AbstractPartyEventMessage{MessageBase: MessageBase{MessageType_: "AbstractPartyEventMessage", id_: 5451}}
}
func (m *AbstractPartyEventMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *AbstractPartyEventMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractPartyMemberInFightMessage struct {
	MessageBase
	AbstractPartyMessage
	Reason               int8
	MemberId             int64
	MemberAccountId      int32
	MemberName           string
	FightId              int
	TimeBeforeFightStart int
}

func NewAbstractPartyMemberInFightMessage() *AbstractPartyMemberInFightMessage {
	return &AbstractPartyMemberInFightMessage{MessageBase: MessageBase{MessageType_: "AbstractPartyMemberInFightMessage", id_: 6938}}
}
func (m *AbstractPartyMemberInFightMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Reason = input.ReadByte()
	m.MemberId = input.ReadVarUhLong()
	m.MemberAccountId = input.ReadInt()
	m.MemberName = input.ReadUTF()
	m.FightId = input.ReadVarUhShort()
	m.TimeBeforeFightStart = input.ReadVarShort()
}

func (m *AbstractPartyMemberInFightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractPartyMessage struct {
	MessageBase
	PartyId int
}

func NewAbstractPartyMessage() *AbstractPartyMessage {
	return &AbstractPartyMessage{MessageBase: MessageBase{MessageType_: "AbstractPartyMessage", id_: 2039}}
}
func (m *AbstractPartyMessage) Deserialize(input *DataWrapper) {
	m.PartyId = input.ReadVarUhInt()
}

func (m *AbstractPartyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractPlayerSearchInformationI interface {
	Deserialize(input *DataWrapper)
}

type AbstractPlayerSearchInformation struct {
	MessageBase
}

func NewAbstractPlayerSearchInformation() *AbstractPlayerSearchInformation {
	return &AbstractPlayerSearchInformation{MessageBase: MessageBase{MessageType_: "AbstractPlayerSearchInformation", id_: 1300}}
}
func (m *AbstractPlayerSearchInformation) Deserialize(input *DataWrapper) {
}

func (m *AbstractPlayerSearchInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AbstractSocialGroupInfosI interface {
	Deserialize(input *DataWrapper)
}

type AbstractSocialGroupInfos struct {
	MessageBase
}

func NewAbstractSocialGroupInfos() *AbstractSocialGroupInfos {
	return &AbstractSocialGroupInfos{MessageBase: MessageBase{MessageType_: "AbstractSocialGroupInfos", id_: 6837}}
}
func (m *AbstractSocialGroupInfos) Deserialize(input *DataWrapper) {
}

func (m *AbstractSocialGroupInfos) IsDeserializeFunctionComplete() bool {
	return true
}

type AccessoryPreviewErrorMessage struct {
	MessageBase
	Error int8
}

func NewAccessoryPreviewErrorMessage() *AccessoryPreviewErrorMessage {
	return &AccessoryPreviewErrorMessage{MessageBase: MessageBase{MessageType_: "AccessoryPreviewErrorMessage", id_: 9621}}
}
func (m *AccessoryPreviewErrorMessage) Deserialize(input *DataWrapper) {
	m.Error = input.ReadByte()
}

func (m *AccessoryPreviewErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccessoryPreviewMessage struct {
	MessageBase
	Look *EntityLook
}

func NewAccessoryPreviewMessage() *AccessoryPreviewMessage {
	return &AccessoryPreviewMessage{MessageBase: MessageBase{MessageType_: "AccessoryPreviewMessage", id_: 1503}}
}
func (m *AccessoryPreviewMessage) Deserialize(input *DataWrapper) {
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *AccessoryPreviewMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccessoryPreviewRequestMessage struct {
	MessageBase
	GenericId *Vector[int]
}

func NewAccessoryPreviewRequestMessage() *AccessoryPreviewRequestMessage {
	return &AccessoryPreviewRequestMessage{MessageBase: MessageBase{MessageType_: "AccessoryPreviewRequestMessage", id_: 375}}
}
func (m *AccessoryPreviewRequestMessage) Deserialize(input *DataWrapper) {
	m.GenericId = NewVector[int]()
	genericIdLen := int(input.ReadShort())
	for i := 0; i < genericIdLen; i++ {
		val := input.ReadVarInt()
		m.GenericId.Push(&val)
	}
}

func (m *AccessoryPreviewRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountCapabilitiesMessage struct {
	MessageBase
	AccountId             int32
	TutorialAvailable     bool
	Status                int8
	CanCreateNewCharacter bool
}

func NewAccountCapabilitiesMessage() *AccountCapabilitiesMessage {
	return &AccountCapabilitiesMessage{MessageBase: MessageBase{MessageType_: "AccountCapabilitiesMessage", id_: 8908}}
}
func (m *AccountCapabilitiesMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.TutorialAvailable = (byteBox0>>0)&1 != 0
	m.CanCreateNewCharacter = (byteBox0>>1)&1 != 0
	m.AccountId = input.ReadInt()
	m.Status = input.ReadByte()
}

func (m *AccountCapabilitiesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountHouseInformations struct {
	MessageBase
	HouseInformations
	HouseInfos HouseInstanceInformationsI
	WorldX     int16
	WorldY     int16
	MapId      float64
	SubAreaId  int
}

func NewAccountHouseInformations() *AccountHouseInformations {
	return &AccountHouseInformations{MessageBase: MessageBase{MessageType_: "AccountHouseInformations", id_: 8406}}
}
func (m *AccountHouseInformations) Deserialize(input *DataWrapper) {
	m.HouseInformations.Deserialize(input)
	m.HouseInfos = getDynamicType(input)
	m.HouseInfos.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *AccountHouseInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountHouseMessage struct {
	MessageBase
	Houses *Vector[AccountHouseInformations]
}

func NewAccountHouseMessage() *AccountHouseMessage {
	return &AccountHouseMessage{MessageBase: MessageBase{MessageType_: "AccountHouseMessage", id_: 7345}}
}
func (m *AccountHouseMessage) Deserialize(input *DataWrapper) {
	m.Houses = NewVector[AccountHouseInformations]()
	housesLen := int(input.ReadShort())
	for i := 0; i < housesLen; i++ {
		AccountHouseInformations := NewAccountHouseInformations()
		AccountHouseInformations.Deserialize(input)
		m.Houses.Push(AccountHouseInformations)
	}
}

func (m *AccountHouseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountInformationsUpdateMessage struct {
	MessageBase
	SubscriptionEndDate float64
}

func NewAccountInformationsUpdateMessage() *AccountInformationsUpdateMessage {
	return &AccountInformationsUpdateMessage{MessageBase: MessageBase{MessageType_: "AccountInformationsUpdateMessage", id_: 4545}}
}
func (m *AccountInformationsUpdateMessage) Deserialize(input *DataWrapper) {
	m.SubscriptionEndDate = input.ReadDouble()
}

func (m *AccountInformationsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountLinkRequiredMessage struct {
	MessageBase
}

func NewAccountLinkRequiredMessage() *AccountLinkRequiredMessage {
	return &AccountLinkRequiredMessage{MessageBase: MessageBase{MessageType_: "AccountLinkRequiredMessage", id_: 590}}
}
func (m *AccountLinkRequiredMessage) Deserialize(input *DataWrapper) {
}

func (m *AccountLinkRequiredMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountLoggingKickedMessage struct {
	MessageBase
	Days    int
	Hours   int8
	Minutes int8
}

func NewAccountLoggingKickedMessage() *AccountLoggingKickedMessage {
	return &AccountLoggingKickedMessage{MessageBase: MessageBase{MessageType_: "AccountLoggingKickedMessage", id_: 2295}}
}
func (m *AccountLoggingKickedMessage) Deserialize(input *DataWrapper) {
	m.Days = input.ReadVarUhShort()
	m.Hours = input.ReadByte()
	m.Minutes = input.ReadByte()
}

func (m *AccountLoggingKickedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountSubscriptionElapsedDurationMessage struct {
	MessageBase
	SubscriptionElapsedDuration float64
}

func NewAccountSubscriptionElapsedDurationMessage() *AccountSubscriptionElapsedDurationMessage {
	return &AccountSubscriptionElapsedDurationMessage{MessageBase: MessageBase{MessageType_: "AccountSubscriptionElapsedDurationMessage", id_: 5336}}
}
func (m *AccountSubscriptionElapsedDurationMessage) Deserialize(input *DataWrapper) {
	m.SubscriptionElapsedDuration = input.ReadDouble()
}

func (m *AccountSubscriptionElapsedDurationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AccountTagInformation struct {
	MessageBase
	Nickname  string
	TagNumber string
}

func NewAccountTagInformation() *AccountTagInformation {
	return &AccountTagInformation{MessageBase: MessageBase{MessageType_: "AccountTagInformation", id_: 3196}}
}
func (m *AccountTagInformation) Deserialize(input *DataWrapper) {
	m.Nickname = input.ReadUTF()
	m.TagNumber = input.ReadUTF()
}

func (m *AccountTagInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type Achievement struct {
	MessageBase
	Id                int
	FinishedObjective *Vector[AchievementObjective]
	StartedObjectives *Vector[AchievementStartedObjective]
}

func NewAchievement() *Achievement {
	return &Achievement{MessageBase: MessageBase{MessageType_: "Achievement", id_: 2764}}
}
func (m *Achievement) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhShort()
	m.FinishedObjective = NewVector[AchievementObjective]()
	finishedObjectiveLen := int(input.ReadShort())
	for i := 0; i < finishedObjectiveLen; i++ {
		AchievementObjective := NewAchievementObjective()
		AchievementObjective.Deserialize(input)
		m.FinishedObjective.Push(AchievementObjective)
	}
	m.StartedObjectives = NewVector[AchievementStartedObjective]()
	startedObjectivesLen := int(input.ReadShort())
	for i := 0; i < startedObjectivesLen; i++ {
		AchievementStartedObjective := NewAchievementStartedObjective()
		AchievementStartedObjective.Deserialize(input)
		m.StartedObjectives.Push(AchievementStartedObjective)
	}
}

func (m *Achievement) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementAchievedI interface {
	Deserialize(input *DataWrapper)
}

type AchievementAchieved struct {
	MessageBase
	Id                  int
	AchievedBy          int64
	AchievedPioneerRank int
}

func NewAchievementAchieved() *AchievementAchieved {
	return &AchievementAchieved{MessageBase: MessageBase{MessageType_: "AchievementAchieved", id_: 6607}}
}
func (m *AchievementAchieved) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhShort()
	m.AchievedBy = input.ReadVarUhLong()
	m.AchievedPioneerRank = input.ReadVarUhInt()
}

func (m *AchievementAchieved) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementAchievedRewardable struct {
	MessageBase
	AchievementAchieved
	FinishedLevel int
}

func NewAchievementAchievedRewardable() *AchievementAchievedRewardable {
	return &AchievementAchievedRewardable{MessageBase: MessageBase{MessageType_: "AchievementAchievedRewardable", id_: 9874}}
}
func (m *AchievementAchievedRewardable) Deserialize(input *DataWrapper) {
	m.AchievementAchieved.Deserialize(input)
	m.FinishedLevel = input.ReadVarUhShort()
}

func (m *AchievementAchievedRewardable) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementAlmostFinishedDetailedListMessage struct {
	MessageBase
	AlmostFinishedAchievements *Vector[Achievement]
}

func NewAchievementAlmostFinishedDetailedListMessage() *AchievementAlmostFinishedDetailedListMessage {
	return &AchievementAlmostFinishedDetailedListMessage{MessageBase: MessageBase{MessageType_: "AchievementAlmostFinishedDetailedListMessage", id_: 1205}}
}
func (m *AchievementAlmostFinishedDetailedListMessage) Deserialize(input *DataWrapper) {
	m.AlmostFinishedAchievements = NewVector[Achievement]()
	almostFinishedAchievementsLen := int(input.ReadShort())
	for i := 0; i < almostFinishedAchievementsLen; i++ {
		Achievement := NewAchievement()
		Achievement.Deserialize(input)
		m.AlmostFinishedAchievements.Push(Achievement)
	}
}

func (m *AchievementAlmostFinishedDetailedListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementAlmostFinishedDetailedListRequestMessage struct {
	MessageBase
}

func NewAchievementAlmostFinishedDetailedListRequestMessage() *AchievementAlmostFinishedDetailedListRequestMessage {
	return &AchievementAlmostFinishedDetailedListRequestMessage{MessageBase: MessageBase{MessageType_: "AchievementAlmostFinishedDetailedListRequestMessage", id_: 9909}}
}
func (m *AchievementAlmostFinishedDetailedListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AchievementAlmostFinishedDetailedListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementDetailedListMessage struct {
	MessageBase
	StartedAchievements  *Vector[Achievement]
	FinishedAchievements *Vector[Achievement]
}

func NewAchievementDetailedListMessage() *AchievementDetailedListMessage {
	return &AchievementDetailedListMessage{MessageBase: MessageBase{MessageType_: "AchievementDetailedListMessage", id_: 2020}}
}
func (m *AchievementDetailedListMessage) Deserialize(input *DataWrapper) {
	m.StartedAchievements = NewVector[Achievement]()
	startedAchievementsLen := int(input.ReadShort())
	for i := 0; i < startedAchievementsLen; i++ {
		Achievement := NewAchievement()
		Achievement.Deserialize(input)
		m.StartedAchievements.Push(Achievement)
	}
	m.FinishedAchievements = NewVector[Achievement]()
	finishedAchievementsLen := int(input.ReadShort())
	for i := 0; i < finishedAchievementsLen; i++ {
		Achievement := NewAchievement()
		Achievement.Deserialize(input)
		m.FinishedAchievements.Push(Achievement)
	}
}

func (m *AchievementDetailedListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementDetailedListRequestMessage struct {
	MessageBase
	CategoryId int
}

func NewAchievementDetailedListRequestMessage() *AchievementDetailedListRequestMessage {
	return &AchievementDetailedListRequestMessage{MessageBase: MessageBase{MessageType_: "AchievementDetailedListRequestMessage", id_: 7960}}
}
func (m *AchievementDetailedListRequestMessage) Deserialize(input *DataWrapper) {
	m.CategoryId = input.ReadVarUhShort()
}

func (m *AchievementDetailedListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementDetailsMessage struct {
	MessageBase
	Achievement *Achievement
}

func NewAchievementDetailsMessage() *AchievementDetailsMessage {
	return &AchievementDetailsMessage{MessageBase: MessageBase{MessageType_: "AchievementDetailsMessage", id_: 2058}}
}
func (m *AchievementDetailsMessage) Deserialize(input *DataWrapper) {
	m.Achievement = NewAchievement()
	m.Achievement.Deserialize(input)
}

func (m *AchievementDetailsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementDetailsRequestMessage struct {
	MessageBase
	AchievementId int
}

func NewAchievementDetailsRequestMessage() *AchievementDetailsRequestMessage {
	return &AchievementDetailsRequestMessage{MessageBase: MessageBase{MessageType_: "AchievementDetailsRequestMessage", id_: 7495}}
}
func (m *AchievementDetailsRequestMessage) Deserialize(input *DataWrapper) {
	m.AchievementId = input.ReadVarUhShort()
}

func (m *AchievementDetailsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementFinishedInformationMessage struct {
	MessageBase
	AchievementFinishedMessage
	Name     string
	PlayerId int64
}

func NewAchievementFinishedInformationMessage() *AchievementFinishedInformationMessage {
	return &AchievementFinishedInformationMessage{MessageBase: MessageBase{MessageType_: "AchievementFinishedInformationMessage", id_: 1898}}
}
func (m *AchievementFinishedInformationMessage) Deserialize(input *DataWrapper) {
	m.AchievementFinishedMessage.Deserialize(input)
	m.Name = input.ReadUTF()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *AchievementFinishedInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementFinishedMessage struct {
	MessageBase
	Achievement *AchievementAchievedRewardable
}

func NewAchievementFinishedMessage() *AchievementFinishedMessage {
	return &AchievementFinishedMessage{MessageBase: MessageBase{MessageType_: "AchievementFinishedMessage", id_: 1474}}
}
func (m *AchievementFinishedMessage) Deserialize(input *DataWrapper) {
	m.Achievement = NewAchievementAchievedRewardable()
	m.Achievement.Deserialize(input)
}

func (m *AchievementFinishedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementListMessage struct {
	MessageBase
	FinishedAchievements *Vector[AchievementAchievedI]
}

func NewAchievementListMessage() *AchievementListMessage {
	return &AchievementListMessage{MessageBase: MessageBase{MessageType_: "AchievementListMessage", id_: 9652}}
}
func (m *AchievementListMessage) Deserialize(input *DataWrapper) {
	m.FinishedAchievements = NewVector[AchievementAchievedI]()
	finishedAchievementsLen := int(input.ReadShort())
	for i := 0; i < finishedAchievementsLen; i++ {
		foundAchievementAchieved := getDynamicType(input)
		if castedAchievementAchieved, ok := foundAchievementAchieved.(AchievementAchievedI); ok {
			castedAchievementAchieved.Deserialize(input)
			m.FinishedAchievements.Push(&castedAchievementAchieved)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement AchievementAchievedI, got: " + fmt.Sprintf("%T", foundAchievementAchieved))
		}
	}
}

func (m *AchievementListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementObjective struct {
	MessageBase
	Id       int
	MaxValue int64
}

func NewAchievementObjective() *AchievementObjective {
	return &AchievementObjective{MessageBase: MessageBase{MessageType_: "AchievementObjective", id_: 2341}}
}
func (m *AchievementObjective) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.MaxValue = input.ReadVarUhLong()
}

func (m *AchievementObjective) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementPioneerRank struct {
	MessageBase
	AchievementId int
	PioneerRank   int
}

func NewAchievementPioneerRank() *AchievementPioneerRank {
	return &AchievementPioneerRank{MessageBase: MessageBase{MessageType_: "AchievementPioneerRank", id_: 6487}}
}
func (m *AchievementPioneerRank) Deserialize(input *DataWrapper) {
	m.AchievementId = input.ReadVarUhInt()
	m.PioneerRank = input.ReadVarUhInt()
}

func (m *AchievementPioneerRank) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementRewardErrorMessage struct {
	MessageBase
	AchievementId int16
}

func NewAchievementRewardErrorMessage() *AchievementRewardErrorMessage {
	return &AchievementRewardErrorMessage{MessageBase: MessageBase{MessageType_: "AchievementRewardErrorMessage", id_: 3079}}
}
func (m *AchievementRewardErrorMessage) Deserialize(input *DataWrapper) {
	m.AchievementId = input.ReadShort()
}

func (m *AchievementRewardErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementRewardRequestMessage struct {
	MessageBase
	AchievementId int16
}

func NewAchievementRewardRequestMessage() *AchievementRewardRequestMessage {
	return &AchievementRewardRequestMessage{MessageBase: MessageBase{MessageType_: "AchievementRewardRequestMessage", id_: 1789}}
}
func (m *AchievementRewardRequestMessage) Deserialize(input *DataWrapper) {
	m.AchievementId = input.ReadShort()
}

func (m *AchievementRewardRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementRewardSuccessMessage struct {
	MessageBase
	AchievementId int16
}

func NewAchievementRewardSuccessMessage() *AchievementRewardSuccessMessage {
	return &AchievementRewardSuccessMessage{MessageBase: MessageBase{MessageType_: "AchievementRewardSuccessMessage", id_: 1060}}
}
func (m *AchievementRewardSuccessMessage) Deserialize(input *DataWrapper) {
	m.AchievementId = input.ReadShort()
}

func (m *AchievementRewardSuccessMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementStartedObjective struct {
	MessageBase
	AchievementObjective
	Value int64
}

func NewAchievementStartedObjective() *AchievementStartedObjective {
	return &AchievementStartedObjective{MessageBase: MessageBase{MessageType_: "AchievementStartedObjective", id_: 5360}}
}
func (m *AchievementStartedObjective) Deserialize(input *DataWrapper) {
	m.AchievementObjective.Deserialize(input)
	m.Value = input.ReadVarUhLong()
}

func (m *AchievementStartedObjective) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementsPioneerRanksMessage struct {
	MessageBase
	AchievementsPioneerRanks *Vector[AchievementPioneerRank]
}

func NewAchievementsPioneerRanksMessage() *AchievementsPioneerRanksMessage {
	return &AchievementsPioneerRanksMessage{MessageBase: MessageBase{MessageType_: "AchievementsPioneerRanksMessage", id_: 3443}}
}
func (m *AchievementsPioneerRanksMessage) Deserialize(input *DataWrapper) {
	m.AchievementsPioneerRanks = NewVector[AchievementPioneerRank]()
	achievementsPioneerRanksLen := int(input.ReadShort())
	for i := 0; i < achievementsPioneerRanksLen; i++ {
		AchievementPioneerRank := NewAchievementPioneerRank()
		AchievementPioneerRank.Deserialize(input)
		m.AchievementsPioneerRanks.Push(AchievementPioneerRank)
	}
}

func (m *AchievementsPioneerRanksMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AchievementsPioneerRanksRequestMessage struct {
	MessageBase
}

func NewAchievementsPioneerRanksRequestMessage() *AchievementsPioneerRanksRequestMessage {
	return &AchievementsPioneerRanksRequestMessage{MessageBase: MessageBase{MessageType_: "AchievementsPioneerRanksRequestMessage", id_: 518}}
}
func (m *AchievementsPioneerRanksRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AchievementsPioneerRanksRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceAddedMessage struct {
	MessageBase
	AcquaintanceAdded AcquaintanceInformationI
}

func NewAcquaintanceAddedMessage() *AcquaintanceAddedMessage {
	return &AcquaintanceAddedMessage{MessageBase: MessageBase{MessageType_: "AcquaintanceAddedMessage", id_: 2270}}
}
func (m *AcquaintanceAddedMessage) Deserialize(input *DataWrapper) {
	m.AcquaintanceAdded = getDynamicType(input)
	m.AcquaintanceAdded.Deserialize(input)
}

func (m *AcquaintanceAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceInformationI interface {
	Deserialize(input *DataWrapper)
}

type AcquaintanceInformation struct {
	MessageBase
	AbstractContactInformations
	PlayerState int8
}

func NewAcquaintanceInformation() *AcquaintanceInformation {
	return &AcquaintanceInformation{MessageBase: MessageBase{MessageType_: "AcquaintanceInformation", id_: 1584}}
}
func (m *AcquaintanceInformation) Deserialize(input *DataWrapper) {
	m.AbstractContactInformations.Deserialize(input)
	m.PlayerState = input.ReadByte()
}

func (m *AcquaintanceInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceOnlineInformation struct {
	MessageBase
	AcquaintanceInformation
	PlayerId     int64
	PlayerName   string
	MoodSmileyId int
	Status       PlayerStatusI
}

func NewAcquaintanceOnlineInformation() *AcquaintanceOnlineInformation {
	return &AcquaintanceOnlineInformation{MessageBase: MessageBase{MessageType_: "AcquaintanceOnlineInformation", id_: 251}}
}
func (m *AcquaintanceOnlineInformation) Deserialize(input *DataWrapper) {
	m.AcquaintanceInformation.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.MoodSmileyId = input.ReadVarUhShort()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
}

func (m *AcquaintanceOnlineInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceSearchErrorMessage struct {
	MessageBase
	Reason int8
}

func NewAcquaintanceSearchErrorMessage() *AcquaintanceSearchErrorMessage {
	return &AcquaintanceSearchErrorMessage{MessageBase: MessageBase{MessageType_: "AcquaintanceSearchErrorMessage", id_: 2291}}
}
func (m *AcquaintanceSearchErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *AcquaintanceSearchErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceSearchMessage struct {
	MessageBase
	Tag *AccountTagInformation
}

func NewAcquaintanceSearchMessage() *AcquaintanceSearchMessage {
	return &AcquaintanceSearchMessage{MessageBase: MessageBase{MessageType_: "AcquaintanceSearchMessage", id_: 1642}}
}
func (m *AcquaintanceSearchMessage) Deserialize(input *DataWrapper) {
	m.Tag = NewAccountTagInformation()
	m.Tag.Deserialize(input)
}

func (m *AcquaintanceSearchMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintanceServerListMessage struct {
	MessageBase
	Servers *Vector[int]
}

func NewAcquaintanceServerListMessage() *AcquaintanceServerListMessage {
	return &AcquaintanceServerListMessage{MessageBase: MessageBase{MessageType_: "AcquaintanceServerListMessage", id_: 8632}}
}
func (m *AcquaintanceServerListMessage) Deserialize(input *DataWrapper) {
	m.Servers = NewVector[int]()
	serversLen := int(input.ReadShort())
	for i := 0; i < serversLen; i++ {
		val := input.ReadVarShort()
		m.Servers.Push(&val)
	}
}

func (m *AcquaintanceServerListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintancesGetListMessage struct {
	MessageBase
}

func NewAcquaintancesGetListMessage() *AcquaintancesGetListMessage {
	return &AcquaintancesGetListMessage{MessageBase: MessageBase{MessageType_: "AcquaintancesGetListMessage", id_: 4481}}
}
func (m *AcquaintancesGetListMessage) Deserialize(input *DataWrapper) {
}

func (m *AcquaintancesGetListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AcquaintancesListMessage struct {
	MessageBase
	AcquaintanceList *Vector[AcquaintanceInformationI]
}

func NewAcquaintancesListMessage() *AcquaintancesListMessage {
	return &AcquaintancesListMessage{MessageBase: MessageBase{MessageType_: "AcquaintancesListMessage", id_: 5647}}
}
func (m *AcquaintancesListMessage) Deserialize(input *DataWrapper) {
	m.AcquaintanceList = NewVector[AcquaintanceInformationI]()
	acquaintanceListLen := int(input.ReadShort())
	for i := 0; i < acquaintanceListLen; i++ {
		foundAcquaintanceInformation := getDynamicType(input)
		if castedAcquaintanceInformation, ok := foundAcquaintanceInformation.(AcquaintanceInformationI); ok {
			castedAcquaintanceInformation.Deserialize(input)
			m.AcquaintanceList.Push(&castedAcquaintanceInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement AcquaintanceInformationI, got: " + fmt.Sprintf("%T", foundAcquaintanceInformation))
		}
	}
}

func (m *AcquaintancesListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ActivityHideRequestMessage struct {
	MessageBase
	ActivityId int
}

func NewActivityHideRequestMessage() *ActivityHideRequestMessage {
	return &ActivityHideRequestMessage{MessageBase: MessageBase{MessageType_: "ActivityHideRequestMessage", id_: 5903}}
}
func (m *ActivityHideRequestMessage) Deserialize(input *DataWrapper) {
	m.ActivityId = input.ReadVarUhShort()
}

func (m *ActivityHideRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ActivityLockRequestMessage struct {
	MessageBase
	ActivityId int
	Lock       bool
}

func NewActivityLockRequestMessage() *ActivityLockRequestMessage {
	return &ActivityLockRequestMessage{MessageBase: MessageBase{MessageType_: "ActivityLockRequestMessage", id_: 5738}}
}
func (m *ActivityLockRequestMessage) Deserialize(input *DataWrapper) {
	m.ActivityId = input.ReadVarUhShort()
	m.Lock = input.ReadBoolean()
}

func (m *ActivityLockRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ActivitySuggestionsMessage struct {
	MessageBase
	LockedActivitiesIds   *Vector[int]
	UnlockedActivitiesIds *Vector[int]
}

func NewActivitySuggestionsMessage() *ActivitySuggestionsMessage {
	return &ActivitySuggestionsMessage{MessageBase: MessageBase{MessageType_: "ActivitySuggestionsMessage", id_: 5717}}
}
func (m *ActivitySuggestionsMessage) Deserialize(input *DataWrapper) {
	m.LockedActivitiesIds = NewVector[int]()
	lockedActivitiesIdsLen := int(input.ReadShort())
	for i := 0; i < lockedActivitiesIdsLen; i++ {
		val := input.ReadVarShort()
		m.LockedActivitiesIds.Push(&val)
	}
	m.UnlockedActivitiesIds = NewVector[int]()
	unlockedActivitiesIdsLen := int(input.ReadShort())
	for i := 0; i < unlockedActivitiesIdsLen; i++ {
		val := input.ReadVarShort()
		m.UnlockedActivitiesIds.Push(&val)
	}
}

func (m *ActivitySuggestionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ActivitySuggestionsRequestMessage struct {
	MessageBase
	MinLevel           int
	MaxLevel           int
	AreaId             int
	ActivityCategoryId int
	NbCards            uint16
}

func NewActivitySuggestionsRequestMessage() *ActivitySuggestionsRequestMessage {
	return &ActivitySuggestionsRequestMessage{MessageBase: MessageBase{MessageType_: "ActivitySuggestionsRequestMessage", id_: 5447}}
}
func (m *ActivitySuggestionsRequestMessage) Deserialize(input *DataWrapper) {
	m.MinLevel = input.ReadVarUhShort()
	m.MaxLevel = input.ReadVarUhShort()
	m.AreaId = input.ReadVarUhShort()
	m.ActivityCategoryId = input.ReadVarUhShort()
	m.NbCards = input.ReadUnsignedShort()
}

func (m *ActivitySuggestionsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ActorAlignmentInformations struct {
	MessageBase
	AlignmentSide  int8
	AlignmentValue int8
	AlignmentGrade int8
	CharacterPower float64
}

func NewActorAlignmentInformations() *ActorAlignmentInformations {
	return &ActorAlignmentInformations{MessageBase: MessageBase{MessageType_: "ActorAlignmentInformations", id_: 2626}}
}
func (m *ActorAlignmentInformations) Deserialize(input *DataWrapper) {
	m.AlignmentSide = input.ReadByte()
	m.AlignmentValue = input.ReadByte()
	m.AlignmentGrade = input.ReadByte()
	m.CharacterPower = input.ReadDouble()
}

func (m *ActorAlignmentInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type ActorExtendedAlignmentInformations struct {
	MessageBase
	ActorAlignmentInformations
	Honor               int
	HonorGradeFloor     int
	HonorNextGradeFloor int
	Aggressable         int8
}

func NewActorExtendedAlignmentInformations() *ActorExtendedAlignmentInformations {
	return &ActorExtendedAlignmentInformations{MessageBase: MessageBase{MessageType_: "ActorExtendedAlignmentInformations", id_: 4048}}
}
func (m *ActorExtendedAlignmentInformations) Deserialize(input *DataWrapper) {
	m.ActorAlignmentInformations.Deserialize(input)
	m.Honor = input.ReadVarUhShort()
	m.HonorGradeFloor = input.ReadVarUhShort()
	m.HonorNextGradeFloor = input.ReadVarUhShort()
	m.Aggressable = input.ReadByte()
}

func (m *ActorExtendedAlignmentInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type ActorOrientation struct {
	MessageBase
	Id        float64
	Direction int8
}

func NewActorOrientation() *ActorOrientation {
	return &ActorOrientation{MessageBase: MessageBase{MessageType_: "ActorOrientation", id_: 2066}}
}
func (m *ActorOrientation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.Direction = input.ReadByte()
}

func (m *ActorOrientation) IsDeserializeFunctionComplete() bool {
	return true
}

type ActorRestrictionsInformations struct {
	MessageBase
	CantBeAggressed        bool
	CantBeChallenged       bool
	CantTrade              bool
	CantBeAttackedByMutant bool
	CantRun                bool
	ForceSlowWalk          bool
	CantMinimize           bool
	CantMove               bool
	CantAggress            bool
	CantChallenge          bool
	CantExchange           bool
	CantAttack             bool
	CantChat               bool
	CantUseObject          bool
	CantUseTaxCollector    bool
	CantUseInteractive     bool
	CantSpeakToNPC         bool
	CantChangeZone         bool
	CantAttackMonster      bool
}

func NewActorRestrictionsInformations() *ActorRestrictionsInformations {
	return &ActorRestrictionsInformations{MessageBase: MessageBase{MessageType_: "ActorRestrictionsInformations", id_: 9953}}
}
func (m *ActorRestrictionsInformations) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.CantBeAggressed = (byteBox0>>0)&1 != 0
	m.CantBeChallenged = (byteBox0>>1)&1 != 0
	m.CantTrade = (byteBox0>>2)&1 != 0
	m.CantBeAttackedByMutant = (byteBox0>>3)&1 != 0
	m.CantRun = (byteBox0>>4)&1 != 0
	m.ForceSlowWalk = (byteBox0>>5)&1 != 0
	m.CantMinimize = (byteBox0>>6)&1 != 0
	m.CantMove = (byteBox0>>7)&1 != 0
	byteBox1 := input.ReadByte()
	m.CantAggress = (byteBox1>>0)&1 != 0
	m.CantChallenge = (byteBox1>>1)&1 != 0
	m.CantExchange = (byteBox1>>2)&1 != 0
	m.CantAttack = (byteBox1>>3)&1 != 0
	m.CantChat = (byteBox1>>4)&1 != 0
	m.CantUseObject = (byteBox1>>5)&1 != 0
	m.CantUseTaxCollector = (byteBox1>>6)&1 != 0
	m.CantUseInteractive = (byteBox1>>7)&1 != 0
	byteBox2 := input.ReadByte()
	m.CantSpeakToNPC = (byteBox2>>0)&1 != 0
	m.CantChangeZone = (byteBox2>>1)&1 != 0
	m.CantAttackMonster = (byteBox2>>2)&1 != 0
}

func (m *ActorRestrictionsInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AddListenerOnSynchronizedStorageMessage struct {
	MessageBase
	Player string
}

func NewAddListenerOnSynchronizedStorageMessage() *AddListenerOnSynchronizedStorageMessage {
	return &AddListenerOnSynchronizedStorageMessage{MessageBase: MessageBase{MessageType_: "AddListenerOnSynchronizedStorageMessage", id_: 1826}}
}
func (m *AddListenerOnSynchronizedStorageMessage) Deserialize(input *DataWrapper) {
	m.Player = input.ReadUTF()
}

func (m *AddListenerOnSynchronizedStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AddTaxCollectorOrderedSpellMessage struct {
	MessageBase
	TaxCollectorId float64
	Spell          *TaxCollectorOrderedSpell
}

func NewAddTaxCollectorOrderedSpellMessage() *AddTaxCollectorOrderedSpellMessage {
	return &AddTaxCollectorOrderedSpellMessage{MessageBase: MessageBase{MessageType_: "AddTaxCollectorOrderedSpellMessage", id_: 8298}}
}
func (m *AddTaxCollectorOrderedSpellMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
	m.Spell = NewTaxCollectorOrderedSpell()
	m.Spell.Deserialize(input)
}

func (m *AddTaxCollectorOrderedSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AddTaxCollectorPresetSpellMessage struct {
	MessageBase
	PresetId *Uuid
	Spell    *TaxCollectorOrderedSpell
}

func NewAddTaxCollectorPresetSpellMessage() *AddTaxCollectorPresetSpellMessage {
	return &AddTaxCollectorPresetSpellMessage{MessageBase: MessageBase{MessageType_: "AddTaxCollectorPresetSpellMessage", id_: 6564}}
}
func (m *AddTaxCollectorPresetSpellMessage) Deserialize(input *DataWrapper) {
	m.PresetId = NewUuid()
	m.PresetId.Deserialize(input)
	m.Spell = NewTaxCollectorOrderedSpell()
	m.Spell.Deserialize(input)
}

func (m *AddTaxCollectorPresetSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AdditionalTaxCollectorInformation struct {
	MessageBase
	CollectorCallerId   int64
	CollectorCallerName string
	Date                int32
}

func NewAdditionalTaxCollectorInformation() *AdditionalTaxCollectorInformation {
	return &AdditionalTaxCollectorInformation{MessageBase: MessageBase{MessageType_: "AdditionalTaxCollectorInformation", id_: 1456}}
}
func (m *AdditionalTaxCollectorInformation) Deserialize(input *DataWrapper) {
	m.CollectorCallerId = input.ReadVarUhLong()
	m.CollectorCallerName = input.ReadUTF()
	m.Date = input.ReadInt()
}

func (m *AdditionalTaxCollectorInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AdminCommandMessage struct {
	MessageBase
	MessageUuid *Uuid
	Content     string
}

func NewAdminCommandMessage() *AdminCommandMessage {
	return &AdminCommandMessage{MessageBase: MessageBase{MessageType_: "AdminCommandMessage", id_: 9773}}
}
func (m *AdminCommandMessage) Deserialize(input *DataWrapper) {
	m.MessageUuid = NewUuid()
	m.MessageUuid.Deserialize(input)
	m.Content = input.ReadUTF()
}

func (m *AdminCommandMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AdminQuietCommandMessage struct {
	MessageBase
	AdminCommandMessage
}

func NewAdminQuietCommandMessage() *AdminQuietCommandMessage {
	return &AdminQuietCommandMessage{MessageBase: MessageBase{MessageType_: "AdminQuietCommandMessage", id_: 8282}}
}
func (m *AdminQuietCommandMessage) Deserialize(input *DataWrapper) {
	m.AdminCommandMessage.Deserialize(input)
}

func (m *AdminQuietCommandMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AgressableStatusMessage struct {
	MessageBase
	PlayerId   int64
	Enable     int8
	RoleAvAId  int32
	PictoScore int32
}

func NewAgressableStatusMessage() *AgressableStatusMessage {
	return &AgressableStatusMessage{MessageBase: MessageBase{MessageType_: "AgressableStatusMessage", id_: 6140}}
}
func (m *AgressableStatusMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.Enable = input.ReadByte()
	m.RoleAvAId = input.ReadInt()
	m.PictoScore = input.ReadInt()
}

func (m *AgressableStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentRankUpdateMessage struct {
	MessageBase
	AlignmentRank int8
	Verbose       bool
}

func NewAlignmentRankUpdateMessage() *AlignmentRankUpdateMessage {
	return &AlignmentRankUpdateMessage{MessageBase: MessageBase{MessageType_: "AlignmentRankUpdateMessage", id_: 5019}}
}
func (m *AlignmentRankUpdateMessage) Deserialize(input *DataWrapper) {
	m.AlignmentRank = input.ReadByte()
	m.Verbose = input.ReadBoolean()
}

func (m *AlignmentRankUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortDonatePreviewMessage struct {
	MessageBase
	Xp float64
}

func NewAlignmentWarEffortDonatePreviewMessage() *AlignmentWarEffortDonatePreviewMessage {
	return &AlignmentWarEffortDonatePreviewMessage{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortDonatePreviewMessage", id_: 7642}}
}
func (m *AlignmentWarEffortDonatePreviewMessage) Deserialize(input *DataWrapper) {
	m.Xp = input.ReadDouble()
}

func (m *AlignmentWarEffortDonatePreviewMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortDonateRequestMessage struct {
	MessageBase
	Donation int64
}

func NewAlignmentWarEffortDonateRequestMessage() *AlignmentWarEffortDonateRequestMessage {
	return &AlignmentWarEffortDonateRequestMessage{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortDonateRequestMessage", id_: 5431}}
}
func (m *AlignmentWarEffortDonateRequestMessage) Deserialize(input *DataWrapper) {
	m.Donation = input.ReadVarUhLong()
}

func (m *AlignmentWarEffortDonateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortDonationResultMessage struct {
	MessageBase
	Result int8
}

func NewAlignmentWarEffortDonationResultMessage() *AlignmentWarEffortDonationResultMessage {
	return &AlignmentWarEffortDonationResultMessage{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortDonationResultMessage", id_: 1517}}
}
func (m *AlignmentWarEffortDonationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *AlignmentWarEffortDonationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortInformation struct {
	MessageBase
	AlignmentSide      int8
	AlignmentWarEffort int64
}

func NewAlignmentWarEffortInformation() *AlignmentWarEffortInformation {
	return &AlignmentWarEffortInformation{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortInformation", id_: 6941}}
}
func (m *AlignmentWarEffortInformation) Deserialize(input *DataWrapper) {
	m.AlignmentSide = input.ReadByte()
	m.AlignmentWarEffort = input.ReadVarUhLong()
}

func (m *AlignmentWarEffortInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortProgressionMessage struct {
	MessageBase
	EffortProgressions *Vector[AlignmentWarEffortInformation]
}

func NewAlignmentWarEffortProgressionMessage() *AlignmentWarEffortProgressionMessage {
	return &AlignmentWarEffortProgressionMessage{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortProgressionMessage", id_: 2045}}
}
func (m *AlignmentWarEffortProgressionMessage) Deserialize(input *DataWrapper) {
	m.EffortProgressions = NewVector[AlignmentWarEffortInformation]()
	effortProgressionsLen := int(input.ReadShort())
	for i := 0; i < effortProgressionsLen; i++ {
		AlignmentWarEffortInformation := NewAlignmentWarEffortInformation()
		AlignmentWarEffortInformation.Deserialize(input)
		m.EffortProgressions.Push(AlignmentWarEffortInformation)
	}
}

func (m *AlignmentWarEffortProgressionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlignmentWarEffortProgressionRequestMessage struct {
	MessageBase
}

func NewAlignmentWarEffortProgressionRequestMessage() *AlignmentWarEffortProgressionRequestMessage {
	return &AlignmentWarEffortProgressionRequestMessage{MessageBase: MessageBase{MessageType_: "AlignmentWarEffortProgressionRequestMessage", id_: 4321}}
}
func (m *AlignmentWarEffortProgressionRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AlignmentWarEffortProgressionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceAllRanksUpdateRequestMessage struct {
	MessageBase
	Ranks *Vector[RankInformation]
}

func NewAllianceAllRanksUpdateRequestMessage() *AllianceAllRanksUpdateRequestMessage {
	return &AllianceAllRanksUpdateRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceAllRanksUpdateRequestMessage", id_: 1620}}
}
func (m *AllianceAllRanksUpdateRequestMessage) Deserialize(input *DataWrapper) {
	m.Ranks = NewVector[RankInformation]()
	ranksLen := int(input.ReadShort())
	for i := 0; i < ranksLen; i++ {
		RankInformation := NewRankInformation()
		RankInformation.Deserialize(input)
		m.Ranks.Push(RankInformation)
	}
}

func (m *AllianceAllRanksUpdateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationAnswerMessage struct {
	MessageBase
	Accepted bool
	PlayerId int64
}

func NewAllianceApplicationAnswerMessage() *AllianceApplicationAnswerMessage {
	return &AllianceApplicationAnswerMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationAnswerMessage", id_: 9692}}
}
func (m *AllianceApplicationAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accepted = input.ReadBoolean()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *AllianceApplicationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationDeletedMessage struct {
	MessageBase
	Deleted bool
}

func NewAllianceApplicationDeletedMessage() *AllianceApplicationDeletedMessage {
	return &AllianceApplicationDeletedMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationDeletedMessage", id_: 8801}}
}
func (m *AllianceApplicationDeletedMessage) Deserialize(input *DataWrapper) {
	m.Deleted = input.ReadBoolean()
}

func (m *AllianceApplicationDeletedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationIsAnsweredMessage struct {
	MessageBase
	Accepted            bool
	AllianceInformation *AllianceInformation
}

func NewAllianceApplicationIsAnsweredMessage() *AllianceApplicationIsAnsweredMessage {
	return &AllianceApplicationIsAnsweredMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationIsAnsweredMessage", id_: 4844}}
}
func (m *AllianceApplicationIsAnsweredMessage) Deserialize(input *DataWrapper) {
	m.Accepted = input.ReadBoolean()
	m.AllianceInformation = NewAllianceInformation()
	m.AllianceInformation.Deserialize(input)
}

func (m *AllianceApplicationIsAnsweredMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationListenMessage struct {
	MessageBase
	Listen bool
}

func NewAllianceApplicationListenMessage() *AllianceApplicationListenMessage {
	return &AllianceApplicationListenMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationListenMessage", id_: 8909}}
}
func (m *AllianceApplicationListenMessage) Deserialize(input *DataWrapper) {
	m.Listen = input.ReadBoolean()
}

func (m *AllianceApplicationListenMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationPresenceMessage struct {
	MessageBase
	IsApplication bool
}

func NewAllianceApplicationPresenceMessage() *AllianceApplicationPresenceMessage {
	return &AllianceApplicationPresenceMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationPresenceMessage", id_: 8886}}
}
func (m *AllianceApplicationPresenceMessage) Deserialize(input *DataWrapper) {
	m.IsApplication = input.ReadBoolean()
}

func (m *AllianceApplicationPresenceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceApplicationReceivedMessage struct {
	MessageBase
	PlayerName string
	PlayerId   int64
}

func NewAllianceApplicationReceivedMessage() *AllianceApplicationReceivedMessage {
	return &AllianceApplicationReceivedMessage{MessageBase: MessageBase{MessageType_: "AllianceApplicationReceivedMessage", id_: 1686}}
}
func (m *AllianceApplicationReceivedMessage) Deserialize(input *DataWrapper) {
	m.PlayerName = input.ReadUTF()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *AllianceApplicationReceivedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceBulletinMessage struct {
	MessageBase
	BulletinMessage
}

func NewAllianceBulletinMessage() *AllianceBulletinMessage {
	return &AllianceBulletinMessage{MessageBase: MessageBase{MessageType_: "AllianceBulletinMessage", id_: 8751}}
}
func (m *AllianceBulletinMessage) Deserialize(input *DataWrapper) {
	m.BulletinMessage.Deserialize(input)
}

func (m *AllianceBulletinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceBulletinSetErrorMessage struct {
	MessageBase
	SocialNoticeSetErrorMessage
}

func NewAllianceBulletinSetErrorMessage() *AllianceBulletinSetErrorMessage {
	return &AllianceBulletinSetErrorMessage{MessageBase: MessageBase{MessageType_: "AllianceBulletinSetErrorMessage", id_: 8685}}
}
func (m *AllianceBulletinSetErrorMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetErrorMessage.Deserialize(input)
}

func (m *AllianceBulletinSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceBulletinSetRequestMessage struct {
	MessageBase
	SocialNoticeSetRequestMessage
	Content string
}

func NewAllianceBulletinSetRequestMessage() *AllianceBulletinSetRequestMessage {
	return &AllianceBulletinSetRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceBulletinSetRequestMessage", id_: 5995}}
}
func (m *AllianceBulletinSetRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetRequestMessage.Deserialize(input)
	m.Content = input.ReadUTF()
}

func (m *AllianceBulletinSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceChangeMemberRankMessage struct {
	MessageBase
	MemberId int64
	RankId   int
}

func NewAllianceChangeMemberRankMessage() *AllianceChangeMemberRankMessage {
	return &AllianceChangeMemberRankMessage{MessageBase: MessageBase{MessageType_: "AllianceChangeMemberRankMessage", id_: 1892}}
}
func (m *AllianceChangeMemberRankMessage) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadVarUhLong()
	m.RankId = input.ReadVarUhInt()
}

func (m *AllianceChangeMemberRankMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceCreationResultMessage struct {
	MessageBase
	Result int8
}

func NewAllianceCreationResultMessage() *AllianceCreationResultMessage {
	return &AllianceCreationResultMessage{MessageBase: MessageBase{MessageType_: "AllianceCreationResultMessage", id_: 7302}}
}
func (m *AllianceCreationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *AllianceCreationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceCreationStartedMessage struct {
	MessageBase
}

func NewAllianceCreationStartedMessage() *AllianceCreationStartedMessage {
	return &AllianceCreationStartedMessage{MessageBase: MessageBase{MessageType_: "AllianceCreationStartedMessage", id_: 6534}}
}
func (m *AllianceCreationStartedMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceCreationStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceCreationValidMessage struct {
	MessageBase
	AllianceName   string
	AllianceTag    string
	AllianceEmblem *SocialEmblem
}

func NewAllianceCreationValidMessage() *AllianceCreationValidMessage {
	return &AllianceCreationValidMessage{MessageBase: MessageBase{MessageType_: "AllianceCreationValidMessage", id_: 5413}}
}
func (m *AllianceCreationValidMessage) Deserialize(input *DataWrapper) {
	m.AllianceName = input.ReadUTF()
	m.AllianceTag = input.ReadUTF()
	m.AllianceEmblem = NewSocialEmblem()
	m.AllianceEmblem.Deserialize(input)
}

func (m *AllianceCreationValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceDeleteApplicationRequestMessage struct {
	MessageBase
}

func NewAllianceDeleteApplicationRequestMessage() *AllianceDeleteApplicationRequestMessage {
	return &AllianceDeleteApplicationRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceDeleteApplicationRequestMessage", id_: 6027}}
}
func (m *AllianceDeleteApplicationRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceDeleteApplicationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFactSheetInformationI interface {
	Deserialize(input *DataWrapper)
}

type AllianceFactSheetInformation struct {
	MessageBase
	AllianceInformation
	CreationDate    int32
	NbMembers       int
	NbSubarea       int
	NbTaxCollectors int
	Recruitment     *AllianceRecruitmentInformation
}

func NewAllianceFactSheetInformation() *AllianceFactSheetInformation {
	return &AllianceFactSheetInformation{MessageBase: MessageBase{MessageType_: "AllianceFactSheetInformation", id_: 6340}}
}
func (m *AllianceFactSheetInformation) Deserialize(input *DataWrapper) {
	m.AllianceInformation.Deserialize(input)
	m.CreationDate = input.ReadInt()
	m.NbMembers = input.ReadVarUhShort()
	m.NbSubarea = input.ReadVarUhShort()
	m.NbTaxCollectors = input.ReadVarUhShort()
	m.Recruitment = NewAllianceRecruitmentInformation()
	m.Recruitment.Deserialize(input)
}

func (m *AllianceFactSheetInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFactsErrorMessage struct {
	MessageBase
	AllianceId int
}

func NewAllianceFactsErrorMessage() *AllianceFactsErrorMessage {
	return &AllianceFactsErrorMessage{MessageBase: MessageBase{MessageType_: "AllianceFactsErrorMessage", id_: 4210}}
}
func (m *AllianceFactsErrorMessage) Deserialize(input *DataWrapper) {
	m.AllianceId = input.ReadVarUhInt()
}

func (m *AllianceFactsErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFactsMessage struct {
	MessageBase
	Infos                AllianceFactSheetInformationI
	Members              *Vector[CharacterMinimalSocialPublicInformations]
	ControlledSubareaIds *Vector[int]
	LeaderCharacterId    int64
	LeaderCharacterName  string
}

func NewAllianceFactsMessage() *AllianceFactsMessage {
	return &AllianceFactsMessage{MessageBase: MessageBase{MessageType_: "AllianceFactsMessage", id_: 9269}}
}
func (m *AllianceFactsMessage) Deserialize(input *DataWrapper) {
	m.Infos = getDynamicType(input)
	m.Infos.Deserialize(input)
	m.Members = NewVector[CharacterMinimalSocialPublicInformations]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		CharacterMinimalSocialPublicInformations := NewCharacterMinimalSocialPublicInformations()
		CharacterMinimalSocialPublicInformations.Deserialize(input)
		m.Members.Push(CharacterMinimalSocialPublicInformations)
	}
	m.ControlledSubareaIds = NewVector[int]()
	controlledSubareaIdsLen := int(input.ReadShort())
	for i := 0; i < controlledSubareaIdsLen; i++ {
		val := input.ReadVarShort()
		m.ControlledSubareaIds.Push(&val)
	}
	m.LeaderCharacterId = input.ReadVarUhLong()
	m.LeaderCharacterName = input.ReadUTF()
}

func (m *AllianceFactsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFactsRequestMessage struct {
	MessageBase
	AllianceId int
}

func NewAllianceFactsRequestMessage() *AllianceFactsRequestMessage {
	return &AllianceFactsRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceFactsRequestMessage", id_: 593}}
}
func (m *AllianceFactsRequestMessage) Deserialize(input *DataWrapper) {
	m.AllianceId = input.ReadVarUhInt()
}

func (m *AllianceFactsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightFighterAddedMessage struct {
	MessageBase
	AllianceFightInfo *SocialFightInfo
	Fighter           *CharacterMinimalPlusLookInformations
	Team              int8
}

func NewAllianceFightFighterAddedMessage() *AllianceFightFighterAddedMessage {
	return &AllianceFightFighterAddedMessage{MessageBase: MessageBase{MessageType_: "AllianceFightFighterAddedMessage", id_: 5310}}
}
func (m *AllianceFightFighterAddedMessage) Deserialize(input *DataWrapper) {
	m.AllianceFightInfo = NewSocialFightInfo()
	m.AllianceFightInfo.Deserialize(input)
	m.Fighter = NewCharacterMinimalPlusLookInformations()
	m.Fighter.Deserialize(input)
	m.Team = input.ReadByte()
}

func (m *AllianceFightFighterAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightFighterRemovedMessage struct {
	MessageBase
	AllianceFightInfo *SocialFightInfo
	FighterId         int64
}

func NewAllianceFightFighterRemovedMessage() *AllianceFightFighterRemovedMessage {
	return &AllianceFightFighterRemovedMessage{MessageBase: MessageBase{MessageType_: "AllianceFightFighterRemovedMessage", id_: 944}}
}
func (m *AllianceFightFighterRemovedMessage) Deserialize(input *DataWrapper) {
	m.AllianceFightInfo = NewSocialFightInfo()
	m.AllianceFightInfo.Deserialize(input)
	m.FighterId = input.ReadVarUhLong()
}

func (m *AllianceFightFighterRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightFinishedMessage struct {
	MessageBase
	AllianceFightInfo *SocialFightInfo
}

func NewAllianceFightFinishedMessage() *AllianceFightFinishedMessage {
	return &AllianceFightFinishedMessage{MessageBase: MessageBase{MessageType_: "AllianceFightFinishedMessage", id_: 1947}}
}
func (m *AllianceFightFinishedMessage) Deserialize(input *DataWrapper) {
	m.AllianceFightInfo = NewSocialFightInfo()
	m.AllianceFightInfo.Deserialize(input)
}

func (m *AllianceFightFinishedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightInfoMessage struct {
	MessageBase
	AllianceFights *Vector[SocialFight]
}

func NewAllianceFightInfoMessage() *AllianceFightInfoMessage {
	return &AllianceFightInfoMessage{MessageBase: MessageBase{MessageType_: "AllianceFightInfoMessage", id_: 5386}}
}
func (m *AllianceFightInfoMessage) Deserialize(input *DataWrapper) {
	m.AllianceFights = NewVector[SocialFight]()
	allianceFightsLen := int(input.ReadShort())
	for i := 0; i < allianceFightsLen; i++ {
		SocialFight := NewSocialFight()
		SocialFight.Deserialize(input)
		m.AllianceFights.Push(SocialFight)
	}
}

func (m *AllianceFightInfoMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightPhaseUpdateMessage struct {
	MessageBase
	AllianceFightInfo *SocialFightInfo
	NewPhase          *FightPhase
}

func NewAllianceFightPhaseUpdateMessage() *AllianceFightPhaseUpdateMessage {
	return &AllianceFightPhaseUpdateMessage{MessageBase: MessageBase{MessageType_: "AllianceFightPhaseUpdateMessage", id_: 1193}}
}
func (m *AllianceFightPhaseUpdateMessage) Deserialize(input *DataWrapper) {
	m.AllianceFightInfo = NewSocialFightInfo()
	m.AllianceFightInfo.Deserialize(input)
	m.NewPhase = NewFightPhase()
	m.NewPhase.Deserialize(input)
}

func (m *AllianceFightPhaseUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceFightStartedMessage struct {
	MessageBase
	AllianceFightInfo *SocialFightInfo
	Phase             *FightPhase
}

func NewAllianceFightStartedMessage() *AllianceFightStartedMessage {
	return &AllianceFightStartedMessage{MessageBase: MessageBase{MessageType_: "AllianceFightStartedMessage", id_: 9676}}
}
func (m *AllianceFightStartedMessage) Deserialize(input *DataWrapper) {
	m.AllianceFightInfo = NewSocialFightInfo()
	m.AllianceFightInfo.Deserialize(input)
	m.Phase = NewFightPhase()
	m.Phase.Deserialize(input)
}

func (m *AllianceFightStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceGetPlayerApplicationMessage struct {
	MessageBase
}

func NewAllianceGetPlayerApplicationMessage() *AllianceGetPlayerApplicationMessage {
	return &AllianceGetPlayerApplicationMessage{MessageBase: MessageBase{MessageType_: "AllianceGetPlayerApplicationMessage", id_: 3631}}
}
func (m *AllianceGetPlayerApplicationMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceGetPlayerApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceGetRecruitmentInformationMessage struct {
	MessageBase
}

func NewAllianceGetRecruitmentInformationMessage() *AllianceGetRecruitmentInformationMessage {
	return &AllianceGetRecruitmentInformationMessage{MessageBase: MessageBase{MessageType_: "AllianceGetRecruitmentInformationMessage", id_: 1212}}
}
func (m *AllianceGetRecruitmentInformationMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceGetRecruitmentInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInformation struct {
	MessageBase
	BasicNamedAllianceInformations
	AllianceEmblem *SocialEmblem
}

func NewAllianceInformation() *AllianceInformation {
	return &AllianceInformation{MessageBase: MessageBase{MessageType_: "AllianceInformation", id_: 1197}}
}
func (m *AllianceInformation) Deserialize(input *DataWrapper) {
	m.BasicNamedAllianceInformations.Deserialize(input)
	m.AllianceEmblem = NewSocialEmblem()
	m.AllianceEmblem.Deserialize(input)
}

func (m *AllianceInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInsiderInfoMessage struct {
	MessageBase
	AllianceInfos AllianceFactSheetInformationI
	Members       *Vector[AllianceMemberInfo]
	Prisms        *Vector[PrismGeolocalizedInformationI]
	TaxCollectors *Vector[TaxCollectorInformations]
}

func NewAllianceInsiderInfoMessage() *AllianceInsiderInfoMessage {
	return &AllianceInsiderInfoMessage{MessageBase: MessageBase{MessageType_: "AllianceInsiderInfoMessage", id_: 4562}}
}
func (m *AllianceInsiderInfoMessage) Deserialize(input *DataWrapper) {
	m.AllianceInfos = NewAllianceFactSheetInformation()
	m.AllianceInfos.Deserialize(input)
	m.Members = NewVector[AllianceMemberInfo]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		AllianceMemberInfo := NewAllianceMemberInfo()
		AllianceMemberInfo.Deserialize(input)
		m.Members.Push(AllianceMemberInfo)
	}
	m.Prisms = NewVector[PrismGeolocalizedInformationI]()
	prismsLen := int(input.ReadShort())
	for i := 0; i < prismsLen; i++ {
		foundPrismGeolocalizedInformation := getDynamicType(input)
		if castedPrismGeolocalizedInformation, ok := foundPrismGeolocalizedInformation.(PrismGeolocalizedInformationI); ok {
			castedPrismGeolocalizedInformation.Deserialize(input)
			m.Prisms.Push(&castedPrismGeolocalizedInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PrismGeolocalizedInformationI, got: " + fmt.Sprintf("%T", foundPrismGeolocalizedInformation))
		}
	}
	m.TaxCollectors = NewVector[TaxCollectorInformations]()
	taxCollectorsLen := int(input.ReadShort())
	for i := 0; i < taxCollectorsLen; i++ {
		TaxCollectorInformations := NewTaxCollectorInformations()
		TaxCollectorInformations.Deserialize(input)
		m.TaxCollectors.Push(TaxCollectorInformations)
	}
}

func (m *AllianceInsiderInfoMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInsiderInfoRequestMessage struct {
	MessageBase
}

func NewAllianceInsiderInfoRequestMessage() *AllianceInsiderInfoRequestMessage {
	return &AllianceInsiderInfoRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceInsiderInfoRequestMessage", id_: 2763}}
}
func (m *AllianceInsiderInfoRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceInsiderInfoRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInsiderPrismInformation struct {
	MessageBase
	PrismInformation
	ModuleObject      *ObjectItem
	ModuleType        int32
	CristalObject     *ObjectItem
	CristalType       int32
	CristalNumberLeft int32
}

func NewAllianceInsiderPrismInformation() *AllianceInsiderPrismInformation {
	return &AllianceInsiderPrismInformation{MessageBase: MessageBase{MessageType_: "AllianceInsiderPrismInformation", id_: 7229}}
}
func (m *AllianceInsiderPrismInformation) Deserialize(input *DataWrapper) {
	m.PrismInformation.Deserialize(input)
	m.ModuleObject = NewObjectItem()
	m.ModuleObject.Deserialize(input)
	m.ModuleType = input.ReadInt()
	m.CristalObject = NewObjectItem()
	m.CristalObject.Deserialize(input)
	m.CristalType = input.ReadInt()
	m.CristalNumberLeft = input.ReadInt()
}

func (m *AllianceInsiderPrismInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInvitationAnswerMessage struct {
	MessageBase
	Accept bool
}

func NewAllianceInvitationAnswerMessage() *AllianceInvitationAnswerMessage {
	return &AllianceInvitationAnswerMessage{MessageBase: MessageBase{MessageType_: "AllianceInvitationAnswerMessage", id_: 3558}}
}
func (m *AllianceInvitationAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
}

func (m *AllianceInvitationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInvitationMessage struct {
	MessageBase
	TargetId int64
}

func NewAllianceInvitationMessage() *AllianceInvitationMessage {
	return &AllianceInvitationMessage{MessageBase: MessageBase{MessageType_: "AllianceInvitationMessage", id_: 5856}}
}
func (m *AllianceInvitationMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadVarUhLong()
}

func (m *AllianceInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInvitationStateRecrutedMessage struct {
	MessageBase
	InvitationState int8
}

func NewAllianceInvitationStateRecrutedMessage() *AllianceInvitationStateRecrutedMessage {
	return &AllianceInvitationStateRecrutedMessage{MessageBase: MessageBase{MessageType_: "AllianceInvitationStateRecrutedMessage", id_: 7264}}
}
func (m *AllianceInvitationStateRecrutedMessage) Deserialize(input *DataWrapper) {
	m.InvitationState = input.ReadByte()
}

func (m *AllianceInvitationStateRecrutedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInvitationStateRecruterMessage struct {
	MessageBase
	RecrutedName    string
	InvitationState int8
}

func NewAllianceInvitationStateRecruterMessage() *AllianceInvitationStateRecruterMessage {
	return &AllianceInvitationStateRecruterMessage{MessageBase: MessageBase{MessageType_: "AllianceInvitationStateRecruterMessage", id_: 6551}}
}
func (m *AllianceInvitationStateRecruterMessage) Deserialize(input *DataWrapper) {
	m.RecrutedName = input.ReadUTF()
	m.InvitationState = input.ReadByte()
}

func (m *AllianceInvitationStateRecruterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceInvitedMessage struct {
	MessageBase
	RecruterName string
	AllianceInfo *AllianceInformation
}

func NewAllianceInvitedMessage() *AllianceInvitedMessage {
	return &AllianceInvitedMessage{MessageBase: MessageBase{MessageType_: "AllianceInvitedMessage", id_: 9032}}
}
func (m *AllianceInvitedMessage) Deserialize(input *DataWrapper) {
	m.RecruterName = input.ReadUTF()
	m.AllianceInfo = NewAllianceInformation()
	m.AllianceInfo.Deserialize(input)
}

func (m *AllianceInvitedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceIsThereAnyApplicationMessage struct {
	MessageBase
}

func NewAllianceIsThereAnyApplicationMessage() *AllianceIsThereAnyApplicationMessage {
	return &AllianceIsThereAnyApplicationMessage{MessageBase: MessageBase{MessageType_: "AllianceIsThereAnyApplicationMessage", id_: 8505}}
}
func (m *AllianceIsThereAnyApplicationMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceIsThereAnyApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceJoinAutomaticallyRequestMessage struct {
	MessageBase
	AllianceId int32
}

func NewAllianceJoinAutomaticallyRequestMessage() *AllianceJoinAutomaticallyRequestMessage {
	return &AllianceJoinAutomaticallyRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceJoinAutomaticallyRequestMessage", id_: 468}}
}
func (m *AllianceJoinAutomaticallyRequestMessage) Deserialize(input *DataWrapper) {
	m.AllianceId = input.ReadInt()
}

func (m *AllianceJoinAutomaticallyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceJoinedMessage struct {
	MessageBase
	AllianceInfo *AllianceInformation
	RankId       int
}

func NewAllianceJoinedMessage() *AllianceJoinedMessage {
	return &AllianceJoinedMessage{MessageBase: MessageBase{MessageType_: "AllianceJoinedMessage", id_: 5220}}
}
func (m *AllianceJoinedMessage) Deserialize(input *DataWrapper) {
	m.AllianceInfo = NewAllianceInformation()
	m.AllianceInfo.Deserialize(input)
	m.RankId = input.ReadVarUhInt()
}

func (m *AllianceJoinedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceKickRequestMessage struct {
	MessageBase
	KickedId int64
}

func NewAllianceKickRequestMessage() *AllianceKickRequestMessage {
	return &AllianceKickRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceKickRequestMessage", id_: 4578}}
}
func (m *AllianceKickRequestMessage) Deserialize(input *DataWrapper) {
	m.KickedId = input.ReadVarLong()
}

func (m *AllianceKickRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceLeftMessage struct {
	MessageBase
}

func NewAllianceLeftMessage() *AllianceLeftMessage {
	return &AllianceLeftMessage{MessageBase: MessageBase{MessageType_: "AllianceLeftMessage", id_: 6490}}
}
func (m *AllianceLeftMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceLeftMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceListApplicationAnswerMessage struct {
	MessageBase
	PaginationAnswerAbstractMessage
	Applies *Vector[SocialApplicationInformation]
}

func NewAllianceListApplicationAnswerMessage() *AllianceListApplicationAnswerMessage {
	return &AllianceListApplicationAnswerMessage{MessageBase: MessageBase{MessageType_: "AllianceListApplicationAnswerMessage", id_: 3610}}
}
func (m *AllianceListApplicationAnswerMessage) Deserialize(input *DataWrapper) {
	m.PaginationAnswerAbstractMessage.Deserialize(input)
	m.Applies = NewVector[SocialApplicationInformation]()
	appliesLen := int(input.ReadShort())
	for i := 0; i < appliesLen; i++ {
		SocialApplicationInformation := NewSocialApplicationInformation()
		SocialApplicationInformation.Deserialize(input)
		m.Applies.Push(SocialApplicationInformation)
	}
}

func (m *AllianceListApplicationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceListApplicationModifiedMessage struct {
	MessageBase
	Apply    *SocialApplicationInformation
	State    int8
	PlayerId int64
}

func NewAllianceListApplicationModifiedMessage() *AllianceListApplicationModifiedMessage {
	return &AllianceListApplicationModifiedMessage{MessageBase: MessageBase{MessageType_: "AllianceListApplicationModifiedMessage", id_: 3470}}
}
func (m *AllianceListApplicationModifiedMessage) Deserialize(input *DataWrapper) {
	m.Apply = NewSocialApplicationInformation()
	m.Apply.Deserialize(input)
	m.State = input.ReadByte()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *AllianceListApplicationModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceListApplicationRequestMessage struct {
	MessageBase
	PaginationRequestAbstractMessage
}

func NewAllianceListApplicationRequestMessage() *AllianceListApplicationRequestMessage {
	return &AllianceListApplicationRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceListApplicationRequestMessage", id_: 7241}}
}
func (m *AllianceListApplicationRequestMessage) Deserialize(input *DataWrapper) {
	m.PaginationRequestAbstractMessage.Deserialize(input)
}

func (m *AllianceListApplicationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceListMessage struct {
	MessageBase
	Alliances *Vector[AllianceFactSheetInformation]
}

func NewAllianceListMessage() *AllianceListMessage {
	return &AllianceListMessage{MessageBase: MessageBase{MessageType_: "AllianceListMessage", id_: 9553}}
}
func (m *AllianceListMessage) Deserialize(input *DataWrapper) {
	m.Alliances = NewVector[AllianceFactSheetInformation]()
	alliancesLen := int(input.ReadShort())
	for i := 0; i < alliancesLen; i++ {
		AllianceFactSheetInformation := NewAllianceFactSheetInformation()
		AllianceFactSheetInformation.Deserialize(input)
		m.Alliances.Push(AllianceFactSheetInformation)
	}
}

func (m *AllianceListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberInfo struct {
	MessageBase
	SocialMember
	AvaRoleId int32
}

func NewAllianceMemberInfo() *AllianceMemberInfo {
	return &AllianceMemberInfo{MessageBase: MessageBase{MessageType_: "AllianceMemberInfo", id_: 7753}}
}
func (m *AllianceMemberInfo) Deserialize(input *DataWrapper) {
	m.SocialMember.Deserialize(input)
	m.AvaRoleId = input.ReadInt()
}

func (m *AllianceMemberInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberInformationUpdateMessage struct {
	MessageBase
	Member *AllianceMemberInfo
}

func NewAllianceMemberInformationUpdateMessage() *AllianceMemberInformationUpdateMessage {
	return &AllianceMemberInformationUpdateMessage{MessageBase: MessageBase{MessageType_: "AllianceMemberInformationUpdateMessage", id_: 3877}}
}
func (m *AllianceMemberInformationUpdateMessage) Deserialize(input *DataWrapper) {
	m.Member = NewAllianceMemberInfo()
	m.Member.Deserialize(input)
}

func (m *AllianceMemberInformationUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberLeavingMessage struct {
	MessageBase
	Kicked   bool
	MemberId int64
}

func NewAllianceMemberLeavingMessage() *AllianceMemberLeavingMessage {
	return &AllianceMemberLeavingMessage{MessageBase: MessageBase{MessageType_: "AllianceMemberLeavingMessage", id_: 626}}
}
func (m *AllianceMemberLeavingMessage) Deserialize(input *DataWrapper) {
	m.Kicked = input.ReadBoolean()
	m.MemberId = input.ReadVarUhLong()
}

func (m *AllianceMemberLeavingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberOnlineStatusMessage struct {
	MessageBase
	MemberId int64
	Online   bool
}

func NewAllianceMemberOnlineStatusMessage() *AllianceMemberOnlineStatusMessage {
	return &AllianceMemberOnlineStatusMessage{MessageBase: MessageBase{MessageType_: "AllianceMemberOnlineStatusMessage", id_: 5529}}
}
func (m *AllianceMemberOnlineStatusMessage) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadVarUhLong()
	m.Online = input.ReadBoolean()
}

func (m *AllianceMemberOnlineStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberStartWarningOnConnectionMessage struct {
	MessageBase
}

func NewAllianceMemberStartWarningOnConnectionMessage() *AllianceMemberStartWarningOnConnectionMessage {
	return &AllianceMemberStartWarningOnConnectionMessage{MessageBase: MessageBase{MessageType_: "AllianceMemberStartWarningOnConnectionMessage", id_: 3707}}
}
func (m *AllianceMemberStartWarningOnConnectionMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceMemberStartWarningOnConnectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMemberStopWarningOnConnectionMessage struct {
	MessageBase
}

func NewAllianceMemberStopWarningOnConnectionMessage() *AllianceMemberStopWarningOnConnectionMessage {
	return &AllianceMemberStopWarningOnConnectionMessage{MessageBase: MessageBase{MessageType_: "AllianceMemberStopWarningOnConnectionMessage", id_: 1134}}
}
func (m *AllianceMemberStopWarningOnConnectionMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceMemberStopWarningOnConnectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMembershipMessage struct {
	MessageBase
	AllianceJoinedMessage
}

func NewAllianceMembershipMessage() *AllianceMembershipMessage {
	return &AllianceMembershipMessage{MessageBase: MessageBase{MessageType_: "AllianceMembershipMessage", id_: 3547}}
}
func (m *AllianceMembershipMessage) Deserialize(input *DataWrapper) {
	m.AllianceJoinedMessage.Deserialize(input)
}

func (m *AllianceMembershipMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceModificationEmblemValidMessage struct {
	MessageBase
	AllianceEmblem *SocialEmblem
}

func NewAllianceModificationEmblemValidMessage() *AllianceModificationEmblemValidMessage {
	return &AllianceModificationEmblemValidMessage{MessageBase: MessageBase{MessageType_: "AllianceModificationEmblemValidMessage", id_: 5179}}
}
func (m *AllianceModificationEmblemValidMessage) Deserialize(input *DataWrapper) {
	m.AllianceEmblem = NewSocialEmblem()
	m.AllianceEmblem.Deserialize(input)
}

func (m *AllianceModificationEmblemValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceModificationNameAndTagValidMessage struct {
	MessageBase
	AllianceName string
	AllianceTag  string
}

func NewAllianceModificationNameAndTagValidMessage() *AllianceModificationNameAndTagValidMessage {
	return &AllianceModificationNameAndTagValidMessage{MessageBase: MessageBase{MessageType_: "AllianceModificationNameAndTagValidMessage", id_: 6811}}
}
func (m *AllianceModificationNameAndTagValidMessage) Deserialize(input *DataWrapper) {
	m.AllianceName = input.ReadUTF()
	m.AllianceTag = input.ReadUTF()
}

func (m *AllianceModificationNameAndTagValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceModificationResultMessage struct {
	MessageBase
	Result int8
}

func NewAllianceModificationResultMessage() *AllianceModificationResultMessage {
	return &AllianceModificationResultMessage{MessageBase: MessageBase{MessageType_: "AllianceModificationResultMessage", id_: 3693}}
}
func (m *AllianceModificationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *AllianceModificationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceModificationStartedMessage struct {
	MessageBase
	CanChangeName   bool
	CanChangeTag    bool
	CanChangeEmblem bool
}

func NewAllianceModificationStartedMessage() *AllianceModificationStartedMessage {
	return &AllianceModificationStartedMessage{MessageBase: MessageBase{MessageType_: "AllianceModificationStartedMessage", id_: 2149}}
}
func (m *AllianceModificationStartedMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.CanChangeName = (byteBox0>>0)&1 != 0
	m.CanChangeTag = (byteBox0>>1)&1 != 0
	m.CanChangeEmblem = (byteBox0>>2)&1 != 0
}

func (m *AllianceModificationStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceModificationValidMessage struct {
	MessageBase
	AllianceName   string
	AllianceTag    string
	AllianceEmblem *SocialEmblem
}

func NewAllianceModificationValidMessage() *AllianceModificationValidMessage {
	return &AllianceModificationValidMessage{MessageBase: MessageBase{MessageType_: "AllianceModificationValidMessage", id_: 4239}}
}
func (m *AllianceModificationValidMessage) Deserialize(input *DataWrapper) {
	m.AllianceName = input.ReadUTF()
	m.AllianceTag = input.ReadUTF()
	m.AllianceEmblem = NewSocialEmblem()
	m.AllianceEmblem.Deserialize(input)
}

func (m *AllianceModificationValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMotdMessage struct {
	MessageBase
	SocialNoticeMessage
}

func NewAllianceMotdMessage() *AllianceMotdMessage {
	return &AllianceMotdMessage{MessageBase: MessageBase{MessageType_: "AllianceMotdMessage", id_: 4661}}
}
func (m *AllianceMotdMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeMessage.Deserialize(input)
}

func (m *AllianceMotdMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMotdSetErrorMessage struct {
	MessageBase
	SocialNoticeSetErrorMessage
}

func NewAllianceMotdSetErrorMessage() *AllianceMotdSetErrorMessage {
	return &AllianceMotdSetErrorMessage{MessageBase: MessageBase{MessageType_: "AllianceMotdSetErrorMessage", id_: 6006}}
}
func (m *AllianceMotdSetErrorMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetErrorMessage.Deserialize(input)
}

func (m *AllianceMotdSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceMotdSetRequestMessage struct {
	MessageBase
	SocialNoticeSetRequestMessage
	Content string
}

func NewAllianceMotdSetRequestMessage() *AllianceMotdSetRequestMessage {
	return &AllianceMotdSetRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceMotdSetRequestMessage", id_: 1488}}
}
func (m *AllianceMotdSetRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetRequestMessage.Deserialize(input)
	m.Content = input.ReadUTF()
}

func (m *AllianceMotdSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePartialListMessage struct {
	MessageBase
	AllianceListMessage
}

func NewAlliancePartialListMessage() *AlliancePartialListMessage {
	return &AlliancePartialListMessage{MessageBase: MessageBase{MessageType_: "AlliancePartialListMessage", id_: 4178}}
}
func (m *AlliancePartialListMessage) Deserialize(input *DataWrapper) {
	m.AllianceListMessage.Deserialize(input)
}

func (m *AlliancePartialListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePlayerApplicationAbstractMessage struct {
	MessageBase
}

func NewAlliancePlayerApplicationAbstractMessage() *AlliancePlayerApplicationAbstractMessage {
	return &AlliancePlayerApplicationAbstractMessage{MessageBase: MessageBase{MessageType_: "AlliancePlayerApplicationAbstractMessage", id_: 4969}}
}
func (m *AlliancePlayerApplicationAbstractMessage) Deserialize(input *DataWrapper) {
}

func (m *AlliancePlayerApplicationAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePlayerApplicationInformationMessage struct {
	MessageBase
	AlliancePlayerApplicationAbstractMessage
	AllianceInformation *AllianceInformation
	Apply               *SocialApplicationInformation
}

func NewAlliancePlayerApplicationInformationMessage() *AlliancePlayerApplicationInformationMessage {
	return &AlliancePlayerApplicationInformationMessage{MessageBase: MessageBase{MessageType_: "AlliancePlayerApplicationInformationMessage", id_: 9706}}
}
func (m *AlliancePlayerApplicationInformationMessage) Deserialize(input *DataWrapper) {
	m.AlliancePlayerApplicationAbstractMessage.Deserialize(input)
	m.AllianceInformation = NewAllianceInformation()
	m.AllianceInformation.Deserialize(input)
	m.Apply = NewSocialApplicationInformation()
	m.Apply.Deserialize(input)
}

func (m *AlliancePlayerApplicationInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePlayerNoApplicationInformationMessage struct {
	MessageBase
	AlliancePlayerApplicationAbstractMessage
}

func NewAlliancePlayerNoApplicationInformationMessage() *AlliancePlayerNoApplicationInformationMessage {
	return &AlliancePlayerNoApplicationInformationMessage{MessageBase: MessageBase{MessageType_: "AlliancePlayerNoApplicationInformationMessage", id_: 7142}}
}
func (m *AlliancePlayerNoApplicationInformationMessage) Deserialize(input *DataWrapper) {
	m.AlliancePlayerApplicationAbstractMessage.Deserialize(input)
}

func (m *AlliancePlayerNoApplicationInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePrismDialogQuestionMessage struct {
	MessageBase
}

func NewAlliancePrismDialogQuestionMessage() *AlliancePrismDialogQuestionMessage {
	return &AlliancePrismDialogQuestionMessage{MessageBase: MessageBase{MessageType_: "AlliancePrismDialogQuestionMessage", id_: 3125}}
}
func (m *AlliancePrismDialogQuestionMessage) Deserialize(input *DataWrapper) {
}

func (m *AlliancePrismDialogQuestionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlliancePrismInformation struct {
	MessageBase
	PrismInformation
	Alliance *AllianceInformation
}

func NewAlliancePrismInformation() *AlliancePrismInformation {
	return &AlliancePrismInformation{MessageBase: MessageBase{MessageType_: "AlliancePrismInformation", id_: 4594}}
}
func (m *AlliancePrismInformation) Deserialize(input *DataWrapper) {
	m.PrismInformation.Deserialize(input)
	m.Alliance = NewAllianceInformation()
	m.Alliance.Deserialize(input)
}

func (m *AlliancePrismInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRankCreateRequestMessage struct {
	MessageBase
	ParentRankId int
	GfxId        int
	Name         string
}

func NewAllianceRankCreateRequestMessage() *AllianceRankCreateRequestMessage {
	return &AllianceRankCreateRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceRankCreateRequestMessage", id_: 9486}}
}
func (m *AllianceRankCreateRequestMessage) Deserialize(input *DataWrapper) {
	m.ParentRankId = input.ReadVarUhInt()
	m.GfxId = input.ReadVarUhInt()
	m.Name = input.ReadUTF()
}

func (m *AllianceRankCreateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRankRemoveRequestMessage struct {
	MessageBase
	RankId    int
	NewRankId int
}

func NewAllianceRankRemoveRequestMessage() *AllianceRankRemoveRequestMessage {
	return &AllianceRankRemoveRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceRankRemoveRequestMessage", id_: 3428}}
}
func (m *AllianceRankRemoveRequestMessage) Deserialize(input *DataWrapper) {
	m.RankId = input.ReadVarUhInt()
	m.NewRankId = input.ReadVarUhInt()
}

func (m *AllianceRankRemoveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRankUpdateRequestMessage struct {
	MessageBase
	Rank *RankInformation
}

func NewAllianceRankUpdateRequestMessage() *AllianceRankUpdateRequestMessage {
	return &AllianceRankUpdateRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceRankUpdateRequestMessage", id_: 64}}
}
func (m *AllianceRankUpdateRequestMessage) Deserialize(input *DataWrapper) {
	m.Rank = NewRankInformation()
	m.Rank.Deserialize(input)
}

func (m *AllianceRankUpdateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRanksMessage struct {
	MessageBase
	Ranks *Vector[RankInformation]
}

func NewAllianceRanksMessage() *AllianceRanksMessage {
	return &AllianceRanksMessage{MessageBase: MessageBase{MessageType_: "AllianceRanksMessage", id_: 4427}}
}
func (m *AllianceRanksMessage) Deserialize(input *DataWrapper) {
	m.Ranks = NewVector[RankInformation]()
	ranksLen := int(input.ReadShort())
	for i := 0; i < ranksLen; i++ {
		RankInformation := NewRankInformation()
		RankInformation.Deserialize(input)
		m.Ranks.Push(RankInformation)
	}
}

func (m *AllianceRanksMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRanksRequestMessage struct {
	MessageBase
}

func NewAllianceRanksRequestMessage() *AllianceRanksRequestMessage {
	return &AllianceRanksRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceRanksRequestMessage", id_: 7629}}
}
func (m *AllianceRanksRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceRanksRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRecruitmentInformation struct {
	MessageBase
	SocialRecruitmentInformation
}

func NewAllianceRecruitmentInformation() *AllianceRecruitmentInformation {
	return &AllianceRecruitmentInformation{MessageBase: MessageBase{MessageType_: "AllianceRecruitmentInformation", id_: 4753}}
}
func (m *AllianceRecruitmentInformation) Deserialize(input *DataWrapper) {
	m.SocialRecruitmentInformation.Deserialize(input)
}

func (m *AllianceRecruitmentInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRecruitmentInformationMessage struct {
	MessageBase
	RecruitmentData *AllianceRecruitmentInformation
}

func NewAllianceRecruitmentInformationMessage() *AllianceRecruitmentInformationMessage {
	return &AllianceRecruitmentInformationMessage{MessageBase: MessageBase{MessageType_: "AllianceRecruitmentInformationMessage", id_: 977}}
}
func (m *AllianceRecruitmentInformationMessage) Deserialize(input *DataWrapper) {
	m.RecruitmentData = NewAllianceRecruitmentInformation()
	m.RecruitmentData.Deserialize(input)
}

func (m *AllianceRecruitmentInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRecruitmentInvalidateMessage struct {
	MessageBase
}

func NewAllianceRecruitmentInvalidateMessage() *AllianceRecruitmentInvalidateMessage {
	return &AllianceRecruitmentInvalidateMessage{MessageBase: MessageBase{MessageType_: "AllianceRecruitmentInvalidateMessage", id_: 523}}
}
func (m *AllianceRecruitmentInvalidateMessage) Deserialize(input *DataWrapper) {
}

func (m *AllianceRecruitmentInvalidateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceRightsUpdateMessage struct {
	MessageBase
	RankId int
	Rights *Vector[int]
}

func NewAllianceRightsUpdateMessage() *AllianceRightsUpdateMessage {
	return &AllianceRightsUpdateMessage{MessageBase: MessageBase{MessageType_: "AllianceRightsUpdateMessage", id_: 5154}}
}
func (m *AllianceRightsUpdateMessage) Deserialize(input *DataWrapper) {
	m.RankId = input.ReadVarUhInt()
	m.Rights = NewVector[int]()
	rightsLen := int(input.ReadShort())
	for i := 0; i < rightsLen; i++ {
		val := input.ReadVarInt()
		m.Rights.Push(&val)
	}
}

func (m *AllianceRightsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceSubmitApplicationMessage struct {
	MessageBase
	ApplyText  string
	AllianceId int
}

func NewAllianceSubmitApplicationMessage() *AllianceSubmitApplicationMessage {
	return &AllianceSubmitApplicationMessage{MessageBase: MessageBase{MessageType_: "AllianceSubmitApplicationMessage", id_: 5885}}
}
func (m *AllianceSubmitApplicationMessage) Deserialize(input *DataWrapper) {
	m.ApplyText = input.ReadUTF()
	m.AllianceId = input.ReadVarUhInt()
}

func (m *AllianceSubmitApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceSummaryMessage struct {
	MessageBase
	PaginationAnswerAbstractMessage
	Alliances *Vector[AllianceFactSheetInformation]
}

func NewAllianceSummaryMessage() *AllianceSummaryMessage {
	return &AllianceSummaryMessage{MessageBase: MessageBase{MessageType_: "AllianceSummaryMessage", id_: 2436}}
}
func (m *AllianceSummaryMessage) Deserialize(input *DataWrapper) {
	m.PaginationAnswerAbstractMessage.Deserialize(input)
	m.Alliances = NewVector[AllianceFactSheetInformation]()
	alliancesLen := int(input.ReadShort())
	for i := 0; i < alliancesLen; i++ {
		AllianceFactSheetInformation := NewAllianceFactSheetInformation()
		AllianceFactSheetInformation.Deserialize(input)
		m.Alliances.Push(AllianceFactSheetInformation)
	}
}

func (m *AllianceSummaryMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceSummaryRequestMessage struct {
	MessageBase
	PaginationRequestAbstractMessage
	FilterType                int32
	TextFilter                string
	HideFullFilter            bool
	FollowingAllianceCriteria bool
	CriterionFilter           *Vector[int]
	SortType                  int8
	SortDescending            bool
	LanguagesFilter           *Vector[int]
	RecruitmentTypeFilter     *Vector[int8]
	MinPlayerLevelFilter      int16
	MaxPlayerLevelFilter      int16
}

func NewAllianceSummaryRequestMessage() *AllianceSummaryRequestMessage {
	return &AllianceSummaryRequestMessage{MessageBase: MessageBase{MessageType_: "AllianceSummaryRequestMessage", id_: 4007}}
}
func (m *AllianceSummaryRequestMessage) Deserialize(input *DataWrapper) {
	m.PaginationRequestAbstractMessage.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.HideFullFilter = (byteBox0>>0)&1 != 0
	m.FollowingAllianceCriteria = (byteBox0>>1)&1 != 0
	m.SortDescending = (byteBox0>>2)&1 != 0
	m.FilterType = input.ReadInt()
	m.TextFilter = input.ReadUTF()
	m.CriterionFilter = NewVector[int]()
	criterionFilterLen := int(input.ReadShort())
	for i := 0; i < criterionFilterLen; i++ {
		val := input.ReadVarInt()
		m.CriterionFilter.Push(&val)
	}
	m.SortType = input.ReadByte()
	m.LanguagesFilter = NewVector[int]()
	languagesFilterLen := int(input.ReadShort())
	for i := 0; i < languagesFilterLen; i++ {
		val := input.ReadVarInt()
		m.LanguagesFilter.Push(&val)
	}
	m.RecruitmentTypeFilter = NewVector[int8]()
	recruitmentTypeFilterLen := int(input.ReadShort())
	for i := 0; i < recruitmentTypeFilterLen; i++ {
		val := input.ReadByte()
		m.RecruitmentTypeFilter.Push(&val)
	}
	m.MinPlayerLevelFilter = input.ReadShort()
	m.MaxPlayerLevelFilter = input.ReadShort()
}

func (m *AllianceSummaryRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceUpdateApplicationMessage struct {
	MessageBase
	ApplyText  string
	AllianceId int
}

func NewAllianceUpdateApplicationMessage() *AllianceUpdateApplicationMessage {
	return &AllianceUpdateApplicationMessage{MessageBase: MessageBase{MessageType_: "AllianceUpdateApplicationMessage", id_: 8299}}
}
func (m *AllianceUpdateApplicationMessage) Deserialize(input *DataWrapper) {
	m.ApplyText = input.ReadUTF()
	m.AllianceId = input.ReadVarUhInt()
}

func (m *AllianceUpdateApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AllianceUpdateRecruitmentInformationMessage struct {
	MessageBase
	RecruitmentData *AllianceRecruitmentInformation
}

func NewAllianceUpdateRecruitmentInformationMessage() *AllianceUpdateRecruitmentInformationMessage {
	return &AllianceUpdateRecruitmentInformationMessage{MessageBase: MessageBase{MessageType_: "AllianceUpdateRecruitmentInformationMessage", id_: 5387}}
}
func (m *AllianceUpdateRecruitmentInformationMessage) Deserialize(input *DataWrapper) {
	m.RecruitmentData = NewAllianceRecruitmentInformation()
	m.RecruitmentData.Deserialize(input)
}

func (m *AllianceUpdateRecruitmentInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlmanachCalendarDateMessage struct {
	MessageBase
	Date int32
}

func NewAlmanachCalendarDateMessage() *AlmanachCalendarDateMessage {
	return &AlmanachCalendarDateMessage{MessageBase: MessageBase{MessageType_: "AlmanachCalendarDateMessage", id_: 3938}}
}
func (m *AlmanachCalendarDateMessage) Deserialize(input *DataWrapper) {
	m.Date = input.ReadInt()
}

func (m *AlmanachCalendarDateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlreadyConnectedMessage struct {
	MessageBase
}

func NewAlreadyConnectedMessage() *AlreadyConnectedMessage {
	return &AlreadyConnectedMessage{MessageBase: MessageBase{MessageType_: "AlreadyConnectedMessage", id_: 3137}}
}
func (m *AlreadyConnectedMessage) Deserialize(input *DataWrapper) {
}

func (m *AlreadyConnectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlterationAddedMessage struct {
	MessageBase
	Alteration *AlterationInfo
}

func NewAlterationAddedMessage() *AlterationAddedMessage {
	return &AlterationAddedMessage{MessageBase: MessageBase{MessageType_: "AlterationAddedMessage", id_: 8844}}
}
func (m *AlterationAddedMessage) Deserialize(input *DataWrapper) {
	m.Alteration = NewAlterationInfo()
	m.Alteration.Deserialize(input)
}

func (m *AlterationAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlterationInfo struct {
	MessageBase
	AlterationId    uint32
	CreationTime    float64
	ExpirationType  int8
	ExpirationValue float64
	Effects         *Vector[ObjectEffectI]
}

func NewAlterationInfo() *AlterationInfo {
	return &AlterationInfo{MessageBase: MessageBase{MessageType_: "AlterationInfo", id_: 2959}}
}
func (m *AlterationInfo) Deserialize(input *DataWrapper) {
	m.AlterationId = input.ReadUnsignedInt()
	m.CreationTime = input.ReadDouble()
	m.ExpirationType = input.ReadByte()
	m.ExpirationValue = input.ReadDouble()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
}

func (m *AlterationInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type AlterationRemovedMessage struct {
	MessageBase
	Alteration *AlterationInfo
}

func NewAlterationRemovedMessage() *AlterationRemovedMessage {
	return &AlterationRemovedMessage{MessageBase: MessageBase{MessageType_: "AlterationRemovedMessage", id_: 9284}}
}
func (m *AlterationRemovedMessage) Deserialize(input *DataWrapper) {
	m.Alteration = NewAlterationInfo()
	m.Alteration.Deserialize(input)
}

func (m *AlterationRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlterationsMessage struct {
	MessageBase
	Alterations *Vector[AlterationInfo]
}

func NewAlterationsMessage() *AlterationsMessage {
	return &AlterationsMessage{MessageBase: MessageBase{MessageType_: "AlterationsMessage", id_: 7721}}
}
func (m *AlterationsMessage) Deserialize(input *DataWrapper) {
	m.Alterations = NewVector[AlterationInfo]()
	alterationsLen := int(input.ReadShort())
	for i := 0; i < alterationsLen; i++ {
		AlterationInfo := NewAlterationInfo()
		AlterationInfo.Deserialize(input)
		m.Alterations.Push(AlterationInfo)
	}
}

func (m *AlterationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlterationsUpdatedMessage struct {
	MessageBase
	Alterations *Vector[AlterationInfo]
}

func NewAlterationsUpdatedMessage() *AlterationsUpdatedMessage {
	return &AlterationsUpdatedMessage{MessageBase: MessageBase{MessageType_: "AlterationsUpdatedMessage", id_: 563}}
}
func (m *AlterationsUpdatedMessage) Deserialize(input *DataWrapper) {
	m.Alterations = NewVector[AlterationInfo]()
	alterationsLen := int(input.ReadShort())
	for i := 0; i < alterationsLen; i++ {
		AlterationInfo := NewAlterationInfo()
		AlterationInfo.Deserialize(input)
		m.Alterations.Push(AlterationInfo)
	}
}

func (m *AlterationsUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AlternativeMonstersInGroupLightInformations struct {
	MessageBase
	PlayerCount int32
	Monsters    *Vector[MonsterInGroupLightInformations]
}

func NewAlternativeMonstersInGroupLightInformations() *AlternativeMonstersInGroupLightInformations {
	return &AlternativeMonstersInGroupLightInformations{MessageBase: MessageBase{MessageType_: "AlternativeMonstersInGroupLightInformations", id_: 6089}}
}
func (m *AlternativeMonstersInGroupLightInformations) Deserialize(input *DataWrapper) {
	m.PlayerCount = input.ReadInt()
	m.Monsters = NewVector[MonsterInGroupLightInformations]()
	monstersLen := int(input.ReadShort())
	for i := 0; i < monstersLen; i++ {
		MonsterInGroupLightInformations := NewMonsterInGroupLightInformations()
		MonsterInGroupLightInformations.Deserialize(input)
		m.Monsters.Push(MonsterInGroupLightInformations)
	}
}

func (m *AlternativeMonstersInGroupLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AnomalyOpenedMessage struct {
	MessageBase
	SubAreaId int
}

func NewAnomalyOpenedMessage() *AnomalyOpenedMessage {
	return &AnomalyOpenedMessage{MessageBase: MessageBase{MessageType_: "AnomalyOpenedMessage", id_: 1124}}
}
func (m *AnomalyOpenedMessage) Deserialize(input *DataWrapper) {
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *AnomalyOpenedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AnomalyStateMessage struct {
	MessageBase
	SubAreaId   int
	Open        bool
	ClosingTime int64
}

func NewAnomalyStateMessage() *AnomalyStateMessage {
	return &AnomalyStateMessage{MessageBase: MessageBase{MessageType_: "AnomalyStateMessage", id_: 9316}}
}
func (m *AnomalyStateMessage) Deserialize(input *DataWrapper) {
	m.SubAreaId = input.ReadVarUhShort()
	m.Open = input.ReadBoolean()
	m.ClosingTime = input.ReadVarUhLong()
}

func (m *AnomalyStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AnomalySubareaInformation struct {
	MessageBase
	SubAreaId          int
	RewardRate         int
	HasAnomaly         bool
	AnomalyClosingTime int64
}

func NewAnomalySubareaInformation() *AnomalySubareaInformation {
	return &AnomalySubareaInformation{MessageBase: MessageBase{MessageType_: "AnomalySubareaInformation", id_: 4038}}
}
func (m *AnomalySubareaInformation) Deserialize(input *DataWrapper) {
	m.SubAreaId = input.ReadVarUhShort()
	m.RewardRate = input.ReadVarShort()
	m.HasAnomaly = input.ReadBoolean()
	m.AnomalyClosingTime = input.ReadVarUhLong()
}

func (m *AnomalySubareaInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type AnomalySubareaInformationRequestMessage struct {
	MessageBase
}

func NewAnomalySubareaInformationRequestMessage() *AnomalySubareaInformationRequestMessage {
	return &AnomalySubareaInformationRequestMessage{MessageBase: MessageBase{MessageType_: "AnomalySubareaInformationRequestMessage", id_: 7452}}
}
func (m *AnomalySubareaInformationRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *AnomalySubareaInformationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AnomalySubareaInformationResponseMessage struct {
	MessageBase
	Subareas *Vector[AnomalySubareaInformation]
}

func NewAnomalySubareaInformationResponseMessage() *AnomalySubareaInformationResponseMessage {
	return &AnomalySubareaInformationResponseMessage{MessageBase: MessageBase{MessageType_: "AnomalySubareaInformationResponseMessage", id_: 9235}}
}
func (m *AnomalySubareaInformationResponseMessage) Deserialize(input *DataWrapper) {
	m.Subareas = NewVector[AnomalySubareaInformation]()
	subareasLen := int(input.ReadShort())
	for i := 0; i < subareasLen; i++ {
		AnomalySubareaInformation := NewAnomalySubareaInformation()
		AnomalySubareaInformation.Deserialize(input)
		m.Subareas.Push(AnomalySubareaInformation)
	}
}

func (m *AnomalySubareaInformationResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ApplicationPlayerInformation struct {
	MessageBase
	PlayerId        int64
	PlayerName      string
	Breed           int8
	Sex             bool
	Level           int
	AccountId       int
	AccountTag      string
	AccountNickname string
	Status          PlayerStatusI
}

func NewApplicationPlayerInformation() *ApplicationPlayerInformation {
	return &ApplicationPlayerInformation{MessageBase: MessageBase{MessageType_: "ApplicationPlayerInformation", id_: 9959}}
}
func (m *ApplicationPlayerInformation) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.Level = input.ReadVarUhInt()
	m.AccountId = input.ReadVarUhInt()
	m.AccountTag = input.ReadUTF()
	m.AccountNickname = input.ReadUTF()
	m.Status = NewPlayerStatus()
	m.Status.Deserialize(input)
}

func (m *ApplicationPlayerInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type ApplySpellModifierMessage struct {
	MessageBase
	ActorId  float64
	Modifier *SpellModifierMessage
}

func NewApplySpellModifierMessage() *ApplySpellModifierMessage {
	return &ApplySpellModifierMessage{MessageBase: MessageBase{MessageType_: "ApplySpellModifierMessage", id_: 1373}}
}
func (m *ApplySpellModifierMessage) Deserialize(input *DataWrapper) {
	m.ActorId = input.ReadDouble()
	m.Modifier = NewSpellModifierMessage()
	m.Modifier.Deserialize(input)
}

func (m *ApplySpellModifierMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AreaFightModificatorUpdateMessage struct {
	MessageBase
	SpellPairId int32
}

func NewAreaFightModificatorUpdateMessage() *AreaFightModificatorUpdateMessage {
	return &AreaFightModificatorUpdateMessage{MessageBase: MessageBase{MessageType_: "AreaFightModificatorUpdateMessage", id_: 9461}}
}
func (m *AreaFightModificatorUpdateMessage) Deserialize(input *DataWrapper) {
	m.SpellPairId = input.ReadInt()
}

func (m *AreaFightModificatorUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ArenaFightAnswerAcknowledgementMessage struct {
	MessageBase
	Acknowledged bool
}

func NewArenaFightAnswerAcknowledgementMessage() *ArenaFightAnswerAcknowledgementMessage {
	return &ArenaFightAnswerAcknowledgementMessage{MessageBase: MessageBase{MessageType_: "ArenaFightAnswerAcknowledgementMessage", id_: 2033}}
}
func (m *ArenaFightAnswerAcknowledgementMessage) Deserialize(input *DataWrapper) {
	m.Acknowledged = input.ReadBoolean()
}

func (m *ArenaFightAnswerAcknowledgementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ArenaFighterIdleMessage struct {
	MessageBase
}

func NewArenaFighterIdleMessage() *ArenaFighterIdleMessage {
	return &ArenaFighterIdleMessage{MessageBase: MessageBase{MessageType_: "ArenaFighterIdleMessage", id_: 1701}}
}
func (m *ArenaFighterIdleMessage) Deserialize(input *DataWrapper) {
}

func (m *ArenaFighterIdleMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ArenaFighterLeaveMessage struct {
	MessageBase
	Leaver *CharacterBasicMinimalInformations
}

func NewArenaFighterLeaveMessage() *ArenaFighterLeaveMessage {
	return &ArenaFighterLeaveMessage{MessageBase: MessageBase{MessageType_: "ArenaFighterLeaveMessage", id_: 3724}}
}
func (m *ArenaFighterLeaveMessage) Deserialize(input *DataWrapper) {
	m.Leaver = NewCharacterBasicMinimalInformations()
	m.Leaver.Deserialize(input)
}

func (m *ArenaFighterLeaveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ArenaLeagueRanking struct {
	MessageBase
	Rating         int32
	LeagueId       int
	LadderPosition int32
}

func NewArenaLeagueRanking() *ArenaLeagueRanking {
	return &ArenaLeagueRanking{MessageBase: MessageBase{MessageType_: "ArenaLeagueRanking", id_: 3976}}
}
func (m *ArenaLeagueRanking) Deserialize(input *DataWrapper) {
	m.Rating = input.ReadInt()
	m.LeagueId = input.ReadVarShort()
	m.LadderPosition = input.ReadInt()
}

func (m *ArenaLeagueRanking) IsDeserializeFunctionComplete() bool {
	return true
}

type ArenaRankInfos struct {
	MessageBase
	ArenaType               int32
	LeagueRanking           *ArenaLeagueRanking
	BestLeagueId            int
	BestRating              int32
	DailyVictoryCount       int
	SeasonVictoryCount      int
	DailyFightcount         int
	SeasonFightcount        int
	NumFightNeededForLadder int16
}

func NewArenaRankInfos() *ArenaRankInfos {
	return &ArenaRankInfos{MessageBase: MessageBase{MessageType_: "ArenaRankInfos", id_: 2174}}
}
func (m *ArenaRankInfos) Deserialize(input *DataWrapper) {
	m.ArenaType = input.ReadInt()
	m.LeagueRanking = NewArenaLeagueRanking()
	m.LeagueRanking.Deserialize(input)
	m.BestLeagueId = input.ReadVarShort()
	m.BestRating = input.ReadInt()
	m.DailyVictoryCount = input.ReadVarUhShort()
	m.SeasonVictoryCount = input.ReadVarUhShort()
	m.DailyFightcount = input.ReadVarUhShort()
	m.SeasonFightcount = input.ReadVarUhShort()
	m.NumFightNeededForLadder = input.ReadShort()
}

func (m *ArenaRankInfos) IsDeserializeFunctionComplete() bool {
	return true
}

type AtlasPointInformationsMessage struct {
	MessageBase
	Type *AtlasPointsInformations
}

func NewAtlasPointInformationsMessage() *AtlasPointInformationsMessage {
	return &AtlasPointInformationsMessage{MessageBase: MessageBase{MessageType_: "AtlasPointInformationsMessage", id_: 5424}}
}
func (m *AtlasPointInformationsMessage) Deserialize(input *DataWrapper) {
	m.Type = NewAtlasPointsInformations()
	m.Type.Deserialize(input)
}

func (m *AtlasPointInformationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AtlasPointsInformations struct {
	MessageBase
	Type   int8
	Coords *Vector[MapCoordinatesExtended]
}

func NewAtlasPointsInformations() *AtlasPointsInformations {
	return &AtlasPointsInformations{MessageBase: MessageBase{MessageType_: "AtlasPointsInformations", id_: 6167}}
}
func (m *AtlasPointsInformations) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
	m.Coords = NewVector[MapCoordinatesExtended]()
	coordsLen := int(input.ReadShort())
	for i := 0; i < coordsLen; i++ {
		MapCoordinatesExtended := NewMapCoordinatesExtended()
		MapCoordinatesExtended.Deserialize(input)
		m.Coords.Push(MapCoordinatesExtended)
	}
}

func (m *AtlasPointsInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type AuthenticationTicketAcceptedMessage struct {
	MessageBase
}

func NewAuthenticationTicketAcceptedMessage() *AuthenticationTicketAcceptedMessage {
	return &AuthenticationTicketAcceptedMessage{MessageBase: MessageBase{MessageType_: "AuthenticationTicketAcceptedMessage", id_: 7505}}
}
func (m *AuthenticationTicketAcceptedMessage) Deserialize(input *DataWrapper) {
}

func (m *AuthenticationTicketAcceptedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AuthenticationTicketMessage struct {
	MessageBase
	Lang   string
	Ticket string
}

func NewAuthenticationTicketMessage() *AuthenticationTicketMessage {
	return &AuthenticationTicketMessage{MessageBase: MessageBase{MessageType_: "AuthenticationTicketMessage", id_: 6808}}
}
func (m *AuthenticationTicketMessage) Deserialize(input *DataWrapper) {
	m.Lang = input.ReadUTF()
	m.Ticket = input.ReadUTF()
}

func (m *AuthenticationTicketMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type AuthenticationTicketRefusedMessage struct {
	MessageBase
}

func NewAuthenticationTicketRefusedMessage() *AuthenticationTicketRefusedMessage {
	return &AuthenticationTicketRefusedMessage{MessageBase: MessageBase{MessageType_: "AuthenticationTicketRefusedMessage", id_: 5922}}
}
func (m *AuthenticationTicketRefusedMessage) Deserialize(input *DataWrapper) {
}

func (m *AuthenticationTicketRefusedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BaseSpawnMonsterInformation struct {
	MessageBase
	SpawnInformation
	CreatureGenericId int
}

func NewBaseSpawnMonsterInformation() *BaseSpawnMonsterInformation {
	return &BaseSpawnMonsterInformation{MessageBase: MessageBase{MessageType_: "BaseSpawnMonsterInformation", id_: 5062}}
}
func (m *BaseSpawnMonsterInformation) Deserialize(input *DataWrapper) {
	m.SpawnInformation.Deserialize(input)
	m.CreatureGenericId = input.ReadVarUhShort()
}

func (m *BaseSpawnMonsterInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicAckMessage struct {
	MessageBase
	Seq          int
	LastPacketId int
}

func NewBasicAckMessage() *BasicAckMessage {
	return &BasicAckMessage{MessageBase: MessageBase{MessageType_: "BasicAckMessage", id_: 9375}}
}
func (m *BasicAckMessage) Deserialize(input *DataWrapper) {
	m.Seq = input.ReadVarUhInt()
	m.LastPacketId = input.ReadVarUhShort()
}

func (m *BasicAckMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicAllianceInformations struct {
	MessageBase
	AbstractSocialGroupInfos
	AllianceId  int
	AllianceTag string
}

func NewBasicAllianceInformations() *BasicAllianceInformations {
	return &BasicAllianceInformations{MessageBase: MessageBase{MessageType_: "BasicAllianceInformations", id_: 2995}}
}
func (m *BasicAllianceInformations) Deserialize(input *DataWrapper) {
	m.AbstractSocialGroupInfos.Deserialize(input)
	m.AllianceId = input.ReadVarUhInt()
	m.AllianceTag = input.ReadUTF()
}

func (m *BasicAllianceInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicDateMessage struct {
	MessageBase
	Day   int8
	Month int8
	Year  int16
}

func NewBasicDateMessage() *BasicDateMessage {
	return &BasicDateMessage{MessageBase: MessageBase{MessageType_: "BasicDateMessage", id_: 7499}}
}
func (m *BasicDateMessage) Deserialize(input *DataWrapper) {
	m.Day = input.ReadByte()
	m.Month = input.ReadByte()
	m.Year = input.ReadShort()
}

func (m *BasicDateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicGuildInformations struct {
	MessageBase
	AbstractSocialGroupInfos
	GuildId    int
	GuildName  string
	GuildLevel uint8
}

func NewBasicGuildInformations() *BasicGuildInformations {
	return &BasicGuildInformations{MessageBase: MessageBase{MessageType_: "BasicGuildInformations", id_: 4606}}
}
func (m *BasicGuildInformations) Deserialize(input *DataWrapper) {
	m.AbstractSocialGroupInfos.Deserialize(input)
	m.GuildId = input.ReadVarUhInt()
	m.GuildName = input.ReadUTF()
	m.GuildLevel = input.ReadUnsignedByte()
}

func (m *BasicGuildInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicLatencyStatsMessage struct {
	MessageBase
	Latency     uint16
	SampleCount int
	Max         int
}

func NewBasicLatencyStatsMessage() *BasicLatencyStatsMessage {
	return &BasicLatencyStatsMessage{MessageBase: MessageBase{MessageType_: "BasicLatencyStatsMessage", id_: 7194}}
}
func (m *BasicLatencyStatsMessage) Deserialize(input *DataWrapper) {
	m.Latency = input.ReadUnsignedShort()
	m.SampleCount = input.ReadVarUhShort()
	m.Max = input.ReadVarUhShort()
}

func (m *BasicLatencyStatsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicLatencyStatsRequestMessage struct {
	MessageBase
}

func NewBasicLatencyStatsRequestMessage() *BasicLatencyStatsRequestMessage {
	return &BasicLatencyStatsRequestMessage{MessageBase: MessageBase{MessageType_: "BasicLatencyStatsRequestMessage", id_: 6273}}
}
func (m *BasicLatencyStatsRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *BasicLatencyStatsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicNamedAllianceInformations struct {
	MessageBase
	BasicAllianceInformations
	AllianceName string
}

func NewBasicNamedAllianceInformations() *BasicNamedAllianceInformations {
	return &BasicNamedAllianceInformations{MessageBase: MessageBase{MessageType_: "BasicNamedAllianceInformations", id_: 5416}}
}
func (m *BasicNamedAllianceInformations) Deserialize(input *DataWrapper) {
	m.BasicAllianceInformations.Deserialize(input)
	m.AllianceName = input.ReadUTF()
}

func (m *BasicNamedAllianceInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicNoOperationMessage struct {
	MessageBase
}

func NewBasicNoOperationMessage() *BasicNoOperationMessage {
	return &BasicNoOperationMessage{MessageBase: MessageBase{MessageType_: "BasicNoOperationMessage", id_: 2887}}
}
func (m *BasicNoOperationMessage) Deserialize(input *DataWrapper) {
}

func (m *BasicNoOperationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicPingMessage struct {
	MessageBase
	Quiet bool
}

func NewBasicPingMessage() *BasicPingMessage {
	return &BasicPingMessage{MessageBase: MessageBase{MessageType_: "BasicPingMessage", id_: 7461}}
}
func (m *BasicPingMessage) Deserialize(input *DataWrapper) {
	m.Quiet = input.ReadBoolean()
}

func (m *BasicPingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicPongMessage struct {
	MessageBase
	Quiet bool
}

func NewBasicPongMessage() *BasicPongMessage {
	return &BasicPongMessage{MessageBase: MessageBase{MessageType_: "BasicPongMessage", id_: 4877}}
}
func (m *BasicPongMessage) Deserialize(input *DataWrapper) {
	m.Quiet = input.ReadBoolean()
}

func (m *BasicPongMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicStatMessage struct {
	MessageBase
	TimeSpent float64
	StatId    int
}

func NewBasicStatMessage() *BasicStatMessage {
	return &BasicStatMessage{MessageBase: MessageBase{MessageType_: "BasicStatMessage", id_: 2233}}
}
func (m *BasicStatMessage) Deserialize(input *DataWrapper) {
	m.TimeSpent = input.ReadDouble()
	m.StatId = input.ReadVarUhShort()
}

func (m *BasicStatMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicStatWithDataMessage struct {
	MessageBase
	BasicStatMessage
	Datas *Vector[StatisticDataI]
}

func NewBasicStatWithDataMessage() *BasicStatWithDataMessage {
	return &BasicStatWithDataMessage{MessageBase: MessageBase{MessageType_: "BasicStatWithDataMessage", id_: 6918}}
}
func (m *BasicStatWithDataMessage) Deserialize(input *DataWrapper) {
	m.BasicStatMessage.Deserialize(input)
	m.Datas = NewVector[StatisticDataI]()
	datasLen := int(input.ReadShort())
	for i := 0; i < datasLen; i++ {
		foundStatisticData := getDynamicType(input)
		if castedStatisticData, ok := foundStatisticData.(StatisticDataI); ok {
			castedStatisticData.Deserialize(input)
			m.Datas.Push(&castedStatisticData)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement StatisticDataI, got: " + fmt.Sprintf("%T", foundStatisticData))
		}
	}
}

func (m *BasicStatWithDataMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicTimeMessage struct {
	MessageBase
	Timestamp      float64
	TimezoneOffset int16
}

func NewBasicTimeMessage() *BasicTimeMessage {
	return &BasicTimeMessage{MessageBase: MessageBase{MessageType_: "BasicTimeMessage", id_: 4945}}
}
func (m *BasicTimeMessage) Deserialize(input *DataWrapper) {
	m.Timestamp = input.ReadDouble()
	m.TimezoneOffset = input.ReadShort()
}

func (m *BasicTimeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicWhoAmIRequestMessage struct {
	MessageBase
	Verbose bool
}

func NewBasicWhoAmIRequestMessage() *BasicWhoAmIRequestMessage {
	return &BasicWhoAmIRequestMessage{MessageBase: MessageBase{MessageType_: "BasicWhoAmIRequestMessage", id_: 390}}
}
func (m *BasicWhoAmIRequestMessage) Deserialize(input *DataWrapper) {
	m.Verbose = input.ReadBoolean()
}

func (m *BasicWhoAmIRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicWhoIsMessage struct {
	MessageBase
	Self           bool
	Position       int8
	AccountTag     *AccountTagInformation
	AccountId      int32
	PlayerName     string
	PlayerId       int64
	AreaId         int16
	ServerId       int16
	OriginServerId int16
	SocialGroups   *Vector[AbstractSocialGroupInfosI]
	Verbose        bool
	PlayerState    int8
}

func NewBasicWhoIsMessage() *BasicWhoIsMessage {
	return &BasicWhoIsMessage{MessageBase: MessageBase{MessageType_: "BasicWhoIsMessage", id_: 8673}}
}
func (m *BasicWhoIsMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Self = (byteBox0>>0)&1 != 0
	m.Verbose = (byteBox0>>1)&1 != 0
	m.Position = input.ReadByte()
	m.AccountTag = NewAccountTagInformation()
	m.AccountTag.Deserialize(input)
	m.AccountId = input.ReadInt()
	m.PlayerName = input.ReadUTF()
	m.PlayerId = input.ReadVarUhLong()
	m.AreaId = input.ReadShort()
	m.ServerId = input.ReadShort()
	m.OriginServerId = input.ReadShort()
	m.SocialGroups = NewVector[AbstractSocialGroupInfosI]()
	socialGroupsLen := int(input.ReadShort())
	for i := 0; i < socialGroupsLen; i++ {
		foundAbstractSocialGroupInfos := getDynamicType(input)
		if castedAbstractSocialGroupInfos, ok := foundAbstractSocialGroupInfos.(AbstractSocialGroupInfosI); ok {
			castedAbstractSocialGroupInfos.Deserialize(input)
			m.SocialGroups.Push(&castedAbstractSocialGroupInfos)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement AbstractSocialGroupInfosI, got: " + fmt.Sprintf("%T", foundAbstractSocialGroupInfos))
		}
	}
	m.PlayerState = input.ReadByte()
}

func (m *BasicWhoIsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicWhoIsNoMatchMessage struct {
	MessageBase
	Target AbstractPlayerSearchInformationI
}

func NewBasicWhoIsNoMatchMessage() *BasicWhoIsNoMatchMessage {
	return &BasicWhoIsNoMatchMessage{MessageBase: MessageBase{MessageType_: "BasicWhoIsNoMatchMessage", id_: 4629}}
}
func (m *BasicWhoIsNoMatchMessage) Deserialize(input *DataWrapper) {
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
}

func (m *BasicWhoIsNoMatchMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BasicWhoIsRequestMessage struct {
	MessageBase
	Verbose bool
	Target  AbstractPlayerSearchInformationI
}

func NewBasicWhoIsRequestMessage() *BasicWhoIsRequestMessage {
	return &BasicWhoIsRequestMessage{MessageBase: MessageBase{MessageType_: "BasicWhoIsRequestMessage", id_: 6759}}
}
func (m *BasicWhoIsRequestMessage) Deserialize(input *DataWrapper) {
	m.Verbose = input.ReadBoolean()
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
}

func (m *BasicWhoIsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BidExchangerObjectInfo struct {
	MessageBase
	ObjectUID  int
	ObjectGID  int
	ObjectType int32
	Effects    *Vector[ObjectEffectI]
	Prices     *Vector[int64]
}

func NewBidExchangerObjectInfo() *BidExchangerObjectInfo {
	return &BidExchangerObjectInfo{MessageBase: MessageBase{MessageType_: "BidExchangerObjectInfo", id_: 2811}}
}
func (m *BidExchangerObjectInfo) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.ObjectGID = input.ReadVarUhInt()
	m.ObjectType = input.ReadInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
	m.Prices = NewVector[int64]()
	pricesLen := int(input.ReadShort())
	for i := 0; i < pricesLen; i++ {
		val := input.ReadVarLong()
		m.Prices.Push(&val)
	}
}

func (m *BidExchangerObjectInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachBonusMessage struct {
	MessageBase
	Bonus *ObjectEffectInteger
}

func NewBreachBonusMessage() *BreachBonusMessage {
	return &BreachBonusMessage{MessageBase: MessageBase{MessageType_: "BreachBonusMessage", id_: 427}}
}
func (m *BreachBonusMessage) Deserialize(input *DataWrapper) {
	m.Bonus = NewObjectEffectInteger()
	m.Bonus.Deserialize(input)
}

func (m *BreachBonusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachBranchI interface {
	Deserialize(input *DataWrapper)
}

type BreachBranch struct {
	MessageBase
	Room          int8
	Element       int32
	Bosses        *Vector[MonsterInGroupLightInformations]
	Map           float64
	Score         int16
	RelativeScore int16
	Monsters      *Vector[MonsterInGroupLightInformations]
}

func NewBreachBranch() *BreachBranch {
	return &BreachBranch{MessageBase: MessageBase{MessageType_: "BreachBranch", id_: 7507}}
}
func (m *BreachBranch) Deserialize(input *DataWrapper) {
	m.Room = input.ReadByte()
	m.Element = input.ReadInt()
	m.Bosses = NewVector[MonsterInGroupLightInformations]()
	bossesLen := int(input.ReadShort())
	for i := 0; i < bossesLen; i++ {
		MonsterInGroupLightInformations := NewMonsterInGroupLightInformations()
		MonsterInGroupLightInformations.Deserialize(input)
		m.Bosses.Push(MonsterInGroupLightInformations)
	}
	m.Map = input.ReadDouble()
	m.Score = input.ReadShort()
	m.RelativeScore = input.ReadShort()
	m.Monsters = NewVector[MonsterInGroupLightInformations]()
	monstersLen := int(input.ReadShort())
	for i := 0; i < monstersLen; i++ {
		MonsterInGroupLightInformations := NewMonsterInGroupLightInformations()
		MonsterInGroupLightInformations.Deserialize(input)
		m.Monsters.Push(MonsterInGroupLightInformations)
	}
}

func (m *BreachBranch) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachBranchesMessage struct {
	MessageBase
	Branches *Vector[ExtendedBreachBranchI]
}

func NewBreachBranchesMessage() *BreachBranchesMessage {
	return &BreachBranchesMessage{MessageBase: MessageBase{MessageType_: "BreachBranchesMessage", id_: 1486}}
}
func (m *BreachBranchesMessage) Deserialize(input *DataWrapper) {
	m.Branches = NewVector[ExtendedBreachBranchI]()
	branchesLen := int(input.ReadShort())
	for i := 0; i < branchesLen; i++ {
		foundExtendedBreachBranch := getDynamicType(input)
		if castedExtendedBreachBranch, ok := foundExtendedBreachBranch.(ExtendedBreachBranchI); ok {
			castedExtendedBreachBranch.Deserialize(input)
			m.Branches.Push(&castedExtendedBreachBranch)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ExtendedBreachBranchI, got: " + fmt.Sprintf("%T", foundExtendedBreachBranch))
		}
	}
}

func (m *BreachBranchesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachBudgetMessage struct {
	MessageBase
	Bugdet int
}

func NewBreachBudgetMessage() *BreachBudgetMessage {
	return &BreachBudgetMessage{MessageBase: MessageBase{MessageType_: "BreachBudgetMessage", id_: 9989}}
}
func (m *BreachBudgetMessage) Deserialize(input *DataWrapper) {
	m.Bugdet = input.ReadVarUhInt()
}

func (m *BreachBudgetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachCharactersMessage struct {
	MessageBase
	Characters *Vector[int64]
}

func NewBreachCharactersMessage() *BreachCharactersMessage {
	return &BreachCharactersMessage{MessageBase: MessageBase{MessageType_: "BreachCharactersMessage", id_: 6556}}
}
func (m *BreachCharactersMessage) Deserialize(input *DataWrapper) {
	m.Characters = NewVector[int64]()
	charactersLen := int(input.ReadShort())
	for i := 0; i < charactersLen; i++ {
		val := input.ReadVarLong()
		m.Characters.Push(&val)
	}
}

func (m *BreachCharactersMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachEnterMessage struct {
	MessageBase
	Owner int64
}

func NewBreachEnterMessage() *BreachEnterMessage {
	return &BreachEnterMessage{MessageBase: MessageBase{MessageType_: "BreachEnterMessage", id_: 9138}}
}
func (m *BreachEnterMessage) Deserialize(input *DataWrapper) {
	m.Owner = input.ReadVarUhLong()
}

func (m *BreachEnterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachExitRequestMessage struct {
	MessageBase
}

func NewBreachExitRequestMessage() *BreachExitRequestMessage {
	return &BreachExitRequestMessage{MessageBase: MessageBase{MessageType_: "BreachExitRequestMessage", id_: 6366}}
}
func (m *BreachExitRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *BreachExitRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachExitResponseMessage struct {
	MessageBase
	Exited bool
}

func NewBreachExitResponseMessage() *BreachExitResponseMessage {
	return &BreachExitResponseMessage{MessageBase: MessageBase{MessageType_: "BreachExitResponseMessage", id_: 6746}}
}
func (m *BreachExitResponseMessage) Deserialize(input *DataWrapper) {
	m.Exited = input.ReadBoolean()
}

func (m *BreachExitResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachGameFightEndMessage struct {
	MessageBase
	GameFightEndMessage
	Budget int32
}

func NewBreachGameFightEndMessage() *BreachGameFightEndMessage {
	return &BreachGameFightEndMessage{MessageBase: MessageBase{MessageType_: "BreachGameFightEndMessage", id_: 9314}}
}
func (m *BreachGameFightEndMessage) Deserialize(input *DataWrapper) {
	m.GameFightEndMessage.Deserialize(input)
	m.Budget = input.ReadInt()
}

func (m *BreachGameFightEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachInvitationAnswerMessage struct {
	MessageBase
	Accept bool
}

func NewBreachInvitationAnswerMessage() *BreachInvitationAnswerMessage {
	return &BreachInvitationAnswerMessage{MessageBase: MessageBase{MessageType_: "BreachInvitationAnswerMessage", id_: 2262}}
}
func (m *BreachInvitationAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
}

func (m *BreachInvitationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachInvitationCloseMessage struct {
	MessageBase
	Host *CharacterMinimalInformations
}

func NewBreachInvitationCloseMessage() *BreachInvitationCloseMessage {
	return &BreachInvitationCloseMessage{MessageBase: MessageBase{MessageType_: "BreachInvitationCloseMessage", id_: 6049}}
}
func (m *BreachInvitationCloseMessage) Deserialize(input *DataWrapper) {
	m.Host = NewCharacterMinimalInformations()
	m.Host.Deserialize(input)
}

func (m *BreachInvitationCloseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachInvitationOfferMessage struct {
	MessageBase
	Host                 *CharacterMinimalInformations
	TimeLeftBeforeCancel int
}

func NewBreachInvitationOfferMessage() *BreachInvitationOfferMessage {
	return &BreachInvitationOfferMessage{MessageBase: MessageBase{MessageType_: "BreachInvitationOfferMessage", id_: 5842}}
}
func (m *BreachInvitationOfferMessage) Deserialize(input *DataWrapper) {
	m.Host = NewCharacterMinimalInformations()
	m.Host.Deserialize(input)
	m.TimeLeftBeforeCancel = input.ReadVarUhInt()
}

func (m *BreachInvitationOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachInvitationRequestMessage struct {
	MessageBase
	Guests *Vector[int64]
}

func NewBreachInvitationRequestMessage() *BreachInvitationRequestMessage {
	return &BreachInvitationRequestMessage{MessageBase: MessageBase{MessageType_: "BreachInvitationRequestMessage", id_: 4414}}
}
func (m *BreachInvitationRequestMessage) Deserialize(input *DataWrapper) {
	m.Guests = NewVector[int64]()
	guestsLen := int(input.ReadShort())
	for i := 0; i < guestsLen; i++ {
		val := input.ReadVarLong()
		m.Guests.Push(&val)
	}
}

func (m *BreachInvitationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachInvitationResponseMessage struct {
	MessageBase
	Guest  *CharacterMinimalInformations
	Accept bool
}

func NewBreachInvitationResponseMessage() *BreachInvitationResponseMessage {
	return &BreachInvitationResponseMessage{MessageBase: MessageBase{MessageType_: "BreachInvitationResponseMessage", id_: 9260}}
}
func (m *BreachInvitationResponseMessage) Deserialize(input *DataWrapper) {
	m.Guest = NewCharacterMinimalInformations()
	m.Guest.Deserialize(input)
	m.Accept = input.ReadBoolean()
}

func (m *BreachInvitationResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachKickRequestMessage struct {
	MessageBase
	Target int64
}

func NewBreachKickRequestMessage() *BreachKickRequestMessage {
	return &BreachKickRequestMessage{MessageBase: MessageBase{MessageType_: "BreachKickRequestMessage", id_: 4588}}
}
func (m *BreachKickRequestMessage) Deserialize(input *DataWrapper) {
	m.Target = input.ReadVarUhLong()
}

func (m *BreachKickRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachKickResponseMessage struct {
	MessageBase
	Target *CharacterMinimalInformations
	Kicked bool
}

func NewBreachKickResponseMessage() *BreachKickResponseMessage {
	return &BreachKickResponseMessage{MessageBase: MessageBase{MessageType_: "BreachKickResponseMessage", id_: 5018}}
}
func (m *BreachKickResponseMessage) Deserialize(input *DataWrapper) {
	m.Target = NewCharacterMinimalInformations()
	m.Target.Deserialize(input)
	m.Kicked = input.ReadBoolean()
}

func (m *BreachKickResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachReward struct {
	MessageBase
	Id           int
	BuyLocks     *Vector[int8]
	BuyCriterion string
	RemainingQty int
	Price        int
}

func NewBreachReward() *BreachReward {
	return &BreachReward{MessageBase: MessageBase{MessageType_: "BreachReward", id_: 3273}}
}
func (m *BreachReward) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.BuyLocks = NewVector[int8]()
	buyLocksLen := int(input.ReadShort())
	for i := 0; i < buyLocksLen; i++ {
		val := input.ReadByte()
		m.BuyLocks.Push(&val)
	}
	m.BuyCriterion = input.ReadUTF()
	m.RemainingQty = input.ReadVarInt()
	m.Price = input.ReadVarUhInt()
}

func (m *BreachReward) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRewardBoughtMessage struct {
	MessageBase
	Id     int
	Bought bool
}

func NewBreachRewardBoughtMessage() *BreachRewardBoughtMessage {
	return &BreachRewardBoughtMessage{MessageBase: MessageBase{MessageType_: "BreachRewardBoughtMessage", id_: 560}}
}
func (m *BreachRewardBoughtMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.Bought = input.ReadBoolean()
}

func (m *BreachRewardBoughtMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRewardBuyMessage struct {
	MessageBase
	Id int
}

func NewBreachRewardBuyMessage() *BreachRewardBuyMessage {
	return &BreachRewardBuyMessage{MessageBase: MessageBase{MessageType_: "BreachRewardBuyMessage", id_: 3872}}
}
func (m *BreachRewardBuyMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
}

func (m *BreachRewardBuyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRewardsMessage struct {
	MessageBase
	Rewards *Vector[BreachReward]
}

func NewBreachRewardsMessage() *BreachRewardsMessage {
	return &BreachRewardsMessage{MessageBase: MessageBase{MessageType_: "BreachRewardsMessage", id_: 1741}}
}
func (m *BreachRewardsMessage) Deserialize(input *DataWrapper) {
	m.Rewards = NewVector[BreachReward]()
	rewardsLen := int(input.ReadShort())
	for i := 0; i < rewardsLen; i++ {
		BreachReward := NewBreachReward()
		BreachReward.Deserialize(input)
		m.Rewards.Push(BreachReward)
	}
}

func (m *BreachRewardsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRoomLockedMessage struct {
	MessageBase
}

func NewBreachRoomLockedMessage() *BreachRoomLockedMessage {
	return &BreachRoomLockedMessage{MessageBase: MessageBase{MessageType_: "BreachRoomLockedMessage", id_: 8241}}
}
func (m *BreachRoomLockedMessage) Deserialize(input *DataWrapper) {
}

func (m *BreachRoomLockedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRoomUnlockRequestMessage struct {
	MessageBase
	RoomId int8
}

func NewBreachRoomUnlockRequestMessage() *BreachRoomUnlockRequestMessage {
	return &BreachRoomUnlockRequestMessage{MessageBase: MessageBase{MessageType_: "BreachRoomUnlockRequestMessage", id_: 5483}}
}
func (m *BreachRoomUnlockRequestMessage) Deserialize(input *DataWrapper) {
	m.RoomId = input.ReadByte()
}

func (m *BreachRoomUnlockRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachRoomUnlockResultMessage struct {
	MessageBase
	RoomId int8
	Result int8
}

func NewBreachRoomUnlockResultMessage() *BreachRoomUnlockResultMessage {
	return &BreachRoomUnlockResultMessage{MessageBase: MessageBase{MessageType_: "BreachRoomUnlockResultMessage", id_: 7028}}
}
func (m *BreachRoomUnlockResultMessage) Deserialize(input *DataWrapper) {
	m.RoomId = input.ReadByte()
	m.Result = input.ReadByte()
}

func (m *BreachRoomUnlockResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachSavedMessage struct {
	MessageBase
	Saved bool
}

func NewBreachSavedMessage() *BreachSavedMessage {
	return &BreachSavedMessage{MessageBase: MessageBase{MessageType_: "BreachSavedMessage", id_: 21}}
}
func (m *BreachSavedMessage) Deserialize(input *DataWrapper) {
	m.Saved = input.ReadBoolean()
}

func (m *BreachSavedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachStateMessage struct {
	MessageBase
	Owner   *CharacterMinimalInformations
	Bonuses *Vector[ObjectEffectInteger]
	Bugdet  int
	Saved   bool
}

func NewBreachStateMessage() *BreachStateMessage {
	return &BreachStateMessage{MessageBase: MessageBase{MessageType_: "BreachStateMessage", id_: 8989}}
}
func (m *BreachStateMessage) Deserialize(input *DataWrapper) {
	m.Owner = NewCharacterMinimalInformations()
	m.Owner.Deserialize(input)
	m.Bonuses = NewVector[ObjectEffectInteger]()
	bonusesLen := int(input.ReadShort())
	for i := 0; i < bonusesLen; i++ {
		ObjectEffectInteger := NewObjectEffectInteger()
		ObjectEffectInteger.Deserialize(input)
		m.Bonuses.Push(ObjectEffectInteger)
	}
	m.Bugdet = input.ReadVarUhInt()
	m.Saved = input.ReadBoolean()
}

func (m *BreachStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachTeleportRequestMessage struct {
	MessageBase
}

func NewBreachTeleportRequestMessage() *BreachTeleportRequestMessage {
	return &BreachTeleportRequestMessage{MessageBase: MessageBase{MessageType_: "BreachTeleportRequestMessage", id_: 2317}}
}
func (m *BreachTeleportRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *BreachTeleportRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BreachTeleportResponseMessage struct {
	MessageBase
	Teleported bool
}

func NewBreachTeleportResponseMessage() *BreachTeleportResponseMessage {
	return &BreachTeleportResponseMessage{MessageBase: MessageBase{MessageType_: "BreachTeleportResponseMessage", id_: 1178}}
}
func (m *BreachTeleportResponseMessage) Deserialize(input *DataWrapper) {
	m.Teleported = input.ReadBoolean()
}

func (m *BreachTeleportResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type BufferInformation struct {
	MessageBase
	Id     int64
	Amount int64
}

func NewBufferInformation() *BufferInformation {
	return &BufferInformation{MessageBase: MessageBase{MessageType_: "BufferInformation", id_: 7749}}
}
func (m *BufferInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
	m.Amount = input.ReadVarUhLong()
}

func (m *BufferInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type BulletinMessage struct {
	MessageBase
	SocialNoticeMessage
}

func NewBulletinMessage() *BulletinMessage {
	return &BulletinMessage{MessageBase: MessageBase{MessageType_: "BulletinMessage", id_: 4597}}
}
func (m *BulletinMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeMessage.Deserialize(input)
}

func (m *BulletinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeAddMessage struct {
	MessageBase
	ChallengeInformation *ChallengeInformation
}

func NewChallengeAddMessage() *ChallengeAddMessage {
	return &ChallengeAddMessage{MessageBase: MessageBase{MessageType_: "ChallengeAddMessage", id_: 8563}}
}
func (m *ChallengeAddMessage) Deserialize(input *DataWrapper) {
	m.ChallengeInformation = NewChallengeInformation()
	m.ChallengeInformation.Deserialize(input)
}

func (m *ChallengeAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeBonusChoiceMessage struct {
	MessageBase
	ChallengeBonus int8
}

func NewChallengeBonusChoiceMessage() *ChallengeBonusChoiceMessage {
	return &ChallengeBonusChoiceMessage{MessageBase: MessageBase{MessageType_: "ChallengeBonusChoiceMessage", id_: 2271}}
}
func (m *ChallengeBonusChoiceMessage) Deserialize(input *DataWrapper) {
	m.ChallengeBonus = input.ReadByte()
}

func (m *ChallengeBonusChoiceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeBonusChoiceSelectedMessage struct {
	MessageBase
	ChallengeBonus int8
}

func NewChallengeBonusChoiceSelectedMessage() *ChallengeBonusChoiceSelectedMessage {
	return &ChallengeBonusChoiceSelectedMessage{MessageBase: MessageBase{MessageType_: "ChallengeBonusChoiceSelectedMessage", id_: 4926}}
}
func (m *ChallengeBonusChoiceSelectedMessage) Deserialize(input *DataWrapper) {
	m.ChallengeBonus = input.ReadByte()
}

func (m *ChallengeBonusChoiceSelectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeFightJoinRefusedMessage struct {
	MessageBase
	PlayerId int64
	Reason   int8
}

func NewChallengeFightJoinRefusedMessage() *ChallengeFightJoinRefusedMessage {
	return &ChallengeFightJoinRefusedMessage{MessageBase: MessageBase{MessageType_: "ChallengeFightJoinRefusedMessage", id_: 2072}}
}
func (m *ChallengeFightJoinRefusedMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.Reason = input.ReadByte()
}

func (m *ChallengeFightJoinRefusedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeInformation struct {
	MessageBase
	ChallengeId int
	TargetsList *Vector[ChallengeTargetInformationI]
	DropBonus   int
	XpBonus     int
	State       int8
}

func NewChallengeInformation() *ChallengeInformation {
	return &ChallengeInformation{MessageBase: MessageBase{MessageType_: "ChallengeInformation", id_: 1494}}
}
func (m *ChallengeInformation) Deserialize(input *DataWrapper) {
	m.ChallengeId = input.ReadVarUhInt()
	m.TargetsList = NewVector[ChallengeTargetInformationI]()
	targetsListLen := int(input.ReadShort())
	for i := 0; i < targetsListLen; i++ {
		foundChallengeTargetInformation := getDynamicType(input)
		if castedChallengeTargetInformation, ok := foundChallengeTargetInformation.(ChallengeTargetInformationI); ok {
			castedChallengeTargetInformation.Deserialize(input)
			m.TargetsList.Push(&castedChallengeTargetInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ChallengeTargetInformationI, got: " + fmt.Sprintf("%T", foundChallengeTargetInformation))
		}
	}
	m.DropBonus = input.ReadVarUhInt()
	m.XpBonus = input.ReadVarUhInt()
	m.State = input.ReadByte()
}

func (m *ChallengeInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeListMessage struct {
	MessageBase
	ChallengesInformation *Vector[ChallengeInformation]
}

func NewChallengeListMessage() *ChallengeListMessage {
	return &ChallengeListMessage{MessageBase: MessageBase{MessageType_: "ChallengeListMessage", id_: 4436}}
}
func (m *ChallengeListMessage) Deserialize(input *DataWrapper) {
	m.ChallengesInformation = NewVector[ChallengeInformation]()
	challengesInformationLen := int(input.ReadShort())
	for i := 0; i < challengesInformationLen; i++ {
		ChallengeInformation := NewChallengeInformation()
		ChallengeInformation.Deserialize(input)
		m.ChallengesInformation.Push(ChallengeInformation)
	}
}

func (m *ChallengeListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeModSelectMessage struct {
	MessageBase
	ChallengeMod int8
}

func NewChallengeModSelectMessage() *ChallengeModSelectMessage {
	return &ChallengeModSelectMessage{MessageBase: MessageBase{MessageType_: "ChallengeModSelectMessage", id_: 4455}}
}
func (m *ChallengeModSelectMessage) Deserialize(input *DataWrapper) {
	m.ChallengeMod = input.ReadByte()
}

func (m *ChallengeModSelectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeModSelectedMessage struct {
	MessageBase
	ChallengeMod int8
}

func NewChallengeModSelectedMessage() *ChallengeModSelectedMessage {
	return &ChallengeModSelectedMessage{MessageBase: MessageBase{MessageType_: "ChallengeModSelectedMessage", id_: 4667}}
}
func (m *ChallengeModSelectedMessage) Deserialize(input *DataWrapper) {
	m.ChallengeMod = input.ReadByte()
}

func (m *ChallengeModSelectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeNumberMessage struct {
	MessageBase
	ChallengeNumber int
}

func NewChallengeNumberMessage() *ChallengeNumberMessage {
	return &ChallengeNumberMessage{MessageBase: MessageBase{MessageType_: "ChallengeNumberMessage", id_: 2779}}
}
func (m *ChallengeNumberMessage) Deserialize(input *DataWrapper) {
	m.ChallengeNumber = input.ReadVarUhInt()
}

func (m *ChallengeNumberMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeProposalMessage struct {
	MessageBase
	ChallengeProposals *Vector[ChallengeInformation]
	Timer              float64
}

func NewChallengeProposalMessage() *ChallengeProposalMessage {
	return &ChallengeProposalMessage{MessageBase: MessageBase{MessageType_: "ChallengeProposalMessage", id_: 8830}}
}
func (m *ChallengeProposalMessage) Deserialize(input *DataWrapper) {
	m.ChallengeProposals = NewVector[ChallengeInformation]()
	challengeProposalsLen := int(input.ReadShort())
	for i := 0; i < challengeProposalsLen; i++ {
		ChallengeInformation := NewChallengeInformation()
		ChallengeInformation.Deserialize(input)
		m.ChallengeProposals.Push(ChallengeInformation)
	}
	m.Timer = input.ReadDouble()
}

func (m *ChallengeProposalMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeReadyMessage struct {
	MessageBase
	ChallengeMod int8
}

func NewChallengeReadyMessage() *ChallengeReadyMessage {
	return &ChallengeReadyMessage{MessageBase: MessageBase{MessageType_: "ChallengeReadyMessage", id_: 9700}}
}
func (m *ChallengeReadyMessage) Deserialize(input *DataWrapper) {
	m.ChallengeMod = input.ReadByte()
}

func (m *ChallengeReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeResultMessage struct {
	MessageBase
	ChallengeId int
	Success     bool
}

func NewChallengeResultMessage() *ChallengeResultMessage {
	return &ChallengeResultMessage{MessageBase: MessageBase{MessageType_: "ChallengeResultMessage", id_: 5894}}
}
func (m *ChallengeResultMessage) Deserialize(input *DataWrapper) {
	m.ChallengeId = input.ReadVarUhInt()
	m.Success = input.ReadBoolean()
}

func (m *ChallengeResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeSelectedMessage struct {
	MessageBase
	ChallengeInformation *ChallengeInformation
}

func NewChallengeSelectedMessage() *ChallengeSelectedMessage {
	return &ChallengeSelectedMessage{MessageBase: MessageBase{MessageType_: "ChallengeSelectedMessage", id_: 8045}}
}
func (m *ChallengeSelectedMessage) Deserialize(input *DataWrapper) {
	m.ChallengeInformation = NewChallengeInformation()
	m.ChallengeInformation.Deserialize(input)
}

func (m *ChallengeSelectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeSelectionMessage struct {
	MessageBase
	ChallengeId int
}

func NewChallengeSelectionMessage() *ChallengeSelectionMessage {
	return &ChallengeSelectionMessage{MessageBase: MessageBase{MessageType_: "ChallengeSelectionMessage", id_: 5920}}
}
func (m *ChallengeSelectionMessage) Deserialize(input *DataWrapper) {
	m.ChallengeId = input.ReadVarUhInt()
}

func (m *ChallengeSelectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeTargetInformationI interface {
	Deserialize(input *DataWrapper)
}

type ChallengeTargetInformation struct {
	MessageBase
	TargetId   float64
	TargetCell int16
}

func NewChallengeTargetInformation() *ChallengeTargetInformation {
	return &ChallengeTargetInformation{MessageBase: MessageBase{MessageType_: "ChallengeTargetInformation", id_: 4052}}
}
func (m *ChallengeTargetInformation) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadDouble()
	m.TargetCell = input.ReadShort()
}

func (m *ChallengeTargetInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeTargetWithAttackerInformation struct {
	MessageBase
	ChallengeTargetInformation
	AttackersIds *Vector[float64]
}

func NewChallengeTargetWithAttackerInformation() *ChallengeTargetWithAttackerInformation {
	return &ChallengeTargetWithAttackerInformation{MessageBase: MessageBase{MessageType_: "ChallengeTargetWithAttackerInformation", id_: 540}}
}
func (m *ChallengeTargetWithAttackerInformation) Deserialize(input *DataWrapper) {
	m.ChallengeTargetInformation.Deserialize(input)
	m.AttackersIds = NewVector[float64]()
	attackersIdsLen := int(input.ReadShort())
	for i := 0; i < attackersIdsLen; i++ {
		val := input.ReadDouble()
		m.AttackersIds.Push(&val)
	}
}

func (m *ChallengeTargetWithAttackerInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeTargetsMessage struct {
	MessageBase
	ChallengeInformation *ChallengeInformation
}

func NewChallengeTargetsMessage() *ChallengeTargetsMessage {
	return &ChallengeTargetsMessage{MessageBase: MessageBase{MessageType_: "ChallengeTargetsMessage", id_: 9097}}
}
func (m *ChallengeTargetsMessage) Deserialize(input *DataWrapper) {
	m.ChallengeInformation = NewChallengeInformation()
	m.ChallengeInformation.Deserialize(input)
}

func (m *ChallengeTargetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeTargetsRequestMessage struct {
	MessageBase
	ChallengeId int
}

func NewChallengeTargetsRequestMessage() *ChallengeTargetsRequestMessage {
	return &ChallengeTargetsRequestMessage{MessageBase: MessageBase{MessageType_: "ChallengeTargetsRequestMessage", id_: 2450}}
}
func (m *ChallengeTargetsRequestMessage) Deserialize(input *DataWrapper) {
	m.ChallengeId = input.ReadVarUhInt()
}

func (m *ChallengeTargetsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChallengeValidateMessage struct {
	MessageBase
	ChallengeId int
}

func NewChallengeValidateMessage() *ChallengeValidateMessage {
	return &ChallengeValidateMessage{MessageBase: MessageBase{MessageType_: "ChallengeValidateMessage", id_: 8427}}
}
func (m *ChallengeValidateMessage) Deserialize(input *DataWrapper) {
	m.ChallengeId = input.ReadVarUhInt()
}

func (m *ChallengeValidateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChangeHavenBagRoomRequestMessage struct {
	MessageBase
	RoomId int8
}

func NewChangeHavenBagRoomRequestMessage() *ChangeHavenBagRoomRequestMessage {
	return &ChangeHavenBagRoomRequestMessage{MessageBase: MessageBase{MessageType_: "ChangeHavenBagRoomRequestMessage", id_: 980}}
}
func (m *ChangeHavenBagRoomRequestMessage) Deserialize(input *DataWrapper) {
	m.RoomId = input.ReadByte()
}

func (m *ChangeHavenBagRoomRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChangeMapMessage struct {
	MessageBase
	MapId     float64
	Autopilot bool
}

func NewChangeMapMessage() *ChangeMapMessage {
	return &ChangeMapMessage{MessageBase: MessageBase{MessageType_: "ChangeMapMessage", id_: 5242}}
}
func (m *ChangeMapMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.Autopilot = input.ReadBoolean()
}

func (m *ChangeMapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChangeThemeRequestMessage struct {
	MessageBase
	Theme int8
}

func NewChangeThemeRequestMessage() *ChangeThemeRequestMessage {
	return &ChangeThemeRequestMessage{MessageBase: MessageBase{MessageType_: "ChangeThemeRequestMessage", id_: 4899}}
}
func (m *ChangeThemeRequestMessage) Deserialize(input *DataWrapper) {
	m.Theme = input.ReadByte()
}

func (m *ChangeThemeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChannelEnablingChangeMessage struct {
	MessageBase
	Channel int8
	Enable  bool
}

func NewChannelEnablingChangeMessage() *ChannelEnablingChangeMessage {
	return &ChannelEnablingChangeMessage{MessageBase: MessageBase{MessageType_: "ChannelEnablingChangeMessage", id_: 7739}}
}
func (m *ChannelEnablingChangeMessage) Deserialize(input *DataWrapper) {
	m.Channel = input.ReadByte()
	m.Enable = input.ReadBoolean()
}

func (m *ChannelEnablingChangeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChannelEnablingMessage struct {
	MessageBase
	Channel int8
	Enable  bool
}

func NewChannelEnablingMessage() *ChannelEnablingMessage {
	return &ChannelEnablingMessage{MessageBase: MessageBase{MessageType_: "ChannelEnablingMessage", id_: 4965}}
}
func (m *ChannelEnablingMessage) Deserialize(input *DataWrapper) {
	m.Channel = input.ReadByte()
	m.Enable = input.ReadBoolean()
}

func (m *ChannelEnablingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterAlignmentWarEffortProgressionMessage struct {
	MessageBase
	AlignmentWarEffortDailyLimit       int64
	AlignmentWarEffortDailyDonation    int64
	AlignmentWarEffortPersonalDonation int64
}

func NewCharacterAlignmentWarEffortProgressionMessage() *CharacterAlignmentWarEffortProgressionMessage {
	return &CharacterAlignmentWarEffortProgressionMessage{MessageBase: MessageBase{MessageType_: "CharacterAlignmentWarEffortProgressionMessage", id_: 2916}}
}
func (m *CharacterAlignmentWarEffortProgressionMessage) Deserialize(input *DataWrapper) {
	m.AlignmentWarEffortDailyLimit = input.ReadVarUhLong()
	m.AlignmentWarEffortDailyDonation = input.ReadVarUhLong()
	m.AlignmentWarEffortPersonalDonation = input.ReadVarUhLong()
}

func (m *CharacterAlignmentWarEffortProgressionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterAlignmentWarEffortProgressionRequestMessage struct {
	MessageBase
}

func NewCharacterAlignmentWarEffortProgressionRequestMessage() *CharacterAlignmentWarEffortProgressionRequestMessage {
	return &CharacterAlignmentWarEffortProgressionRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterAlignmentWarEffortProgressionRequestMessage", id_: 946}}
}
func (m *CharacterAlignmentWarEffortProgressionRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterAlignmentWarEffortProgressionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterBaseInformationsI interface {
	Deserialize(input *DataWrapper)
}

type CharacterBaseInformations struct {
	MessageBase
	CharacterMinimalPlusLookInformations
	Sex bool
}

func NewCharacterBaseInformations() *CharacterBaseInformations {
	return &CharacterBaseInformations{MessageBase: MessageBase{MessageType_: "CharacterBaseInformations", id_: 4367}}
}
func (m *CharacterBaseInformations) Deserialize(input *DataWrapper) {
	m.CharacterMinimalPlusLookInformations.Deserialize(input)
	m.Sex = input.ReadBoolean()
}

func (m *CharacterBaseInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterBasicMinimalInformations struct {
	MessageBase
	AbstractCharacterInformation
	Name string
}

func NewCharacterBasicMinimalInformations() *CharacterBasicMinimalInformations {
	return &CharacterBasicMinimalInformations{MessageBase: MessageBase{MessageType_: "CharacterBasicMinimalInformations", id_: 6994}}
}
func (m *CharacterBasicMinimalInformations) Deserialize(input *DataWrapper) {
	m.AbstractCharacterInformation.Deserialize(input)
	m.Name = input.ReadUTF()
}

func (m *CharacterBasicMinimalInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCanBeCreatedRequestMessage struct {
	MessageBase
}

func NewCharacterCanBeCreatedRequestMessage() *CharacterCanBeCreatedRequestMessage {
	return &CharacterCanBeCreatedRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterCanBeCreatedRequestMessage", id_: 4275}}
}
func (m *CharacterCanBeCreatedRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterCanBeCreatedRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCanBeCreatedResultMessage struct {
	MessageBase
	YesYouCan bool
}

func NewCharacterCanBeCreatedResultMessage() *CharacterCanBeCreatedResultMessage {
	return &CharacterCanBeCreatedResultMessage{MessageBase: MessageBase{MessageType_: "CharacterCanBeCreatedResultMessage", id_: 7317}}
}
func (m *CharacterCanBeCreatedResultMessage) Deserialize(input *DataWrapper) {
	m.YesYouCan = input.ReadBoolean()
}

func (m *CharacterCanBeCreatedResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCapabilitiesMessage struct {
	MessageBase
	GuildEmblemSymbolCategories int
}

func NewCharacterCapabilitiesMessage() *CharacterCapabilitiesMessage {
	return &CharacterCapabilitiesMessage{MessageBase: MessageBase{MessageType_: "CharacterCapabilitiesMessage", id_: 3451}}
}
func (m *CharacterCapabilitiesMessage) Deserialize(input *DataWrapper) {
	m.GuildEmblemSymbolCategories = input.ReadVarUhInt()
}

func (m *CharacterCapabilitiesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristicI interface {
	Deserialize(input *DataWrapper)
}

type CharacterCharacteristic struct {
	MessageBase
	CharacteristicId int16
}

func NewCharacterCharacteristic() *CharacterCharacteristic {
	return &CharacterCharacteristic{MessageBase: MessageBase{MessageType_: "CharacterCharacteristic", id_: 6701}}
}
func (m *CharacterCharacteristic) Deserialize(input *DataWrapper) {
	m.CharacteristicId = input.ReadShort()
}

func (m *CharacterCharacteristic) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristicDetailed struct {
	MessageBase
	CharacterCharacteristic
	Base                 int
	Additional           int
	ObjectsAndMountBonus int
	AlignGiftBonus       int
	ContextModif         int
}

func NewCharacterCharacteristicDetailed() *CharacterCharacteristicDetailed {
	return &CharacterCharacteristicDetailed{MessageBase: MessageBase{MessageType_: "CharacterCharacteristicDetailed", id_: 901}}
}
func (m *CharacterCharacteristicDetailed) Deserialize(input *DataWrapper) {
	m.CharacterCharacteristic.Deserialize(input)
	m.Base = input.ReadVarInt()
	m.Additional = input.ReadVarInt()
	m.ObjectsAndMountBonus = input.ReadVarInt()
	m.AlignGiftBonus = input.ReadVarInt()
	m.ContextModif = input.ReadVarInt()
}

func (m *CharacterCharacteristicDetailed) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristicForPreset struct {
	MessageBase
	SimpleCharacterCharacteristicForPreset
	Stuff int
}

func NewCharacterCharacteristicForPreset() *CharacterCharacteristicForPreset {
	return &CharacterCharacteristicForPreset{MessageBase: MessageBase{MessageType_: "CharacterCharacteristicForPreset", id_: 3299}}
}
func (m *CharacterCharacteristicForPreset) Deserialize(input *DataWrapper) {
	m.SimpleCharacterCharacteristicForPreset.Deserialize(input)
	m.Stuff = input.ReadVarInt()
}

func (m *CharacterCharacteristicForPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristicValue struct {
	MessageBase
	CharacterCharacteristic
	Total int32
}

func NewCharacterCharacteristicValue() *CharacterCharacteristicValue {
	return &CharacterCharacteristicValue{MessageBase: MessageBase{MessageType_: "CharacterCharacteristicValue", id_: 3951}}
}
func (m *CharacterCharacteristicValue) Deserialize(input *DataWrapper) {
	m.CharacterCharacteristic.Deserialize(input)
	m.Total = input.ReadInt()
}

func (m *CharacterCharacteristicValue) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristics struct {
	MessageBase
	Characteristics *Vector[CharacterCharacteristicI]
}

func NewCharacterCharacteristics() *CharacterCharacteristics {
	return &CharacterCharacteristics{MessageBase: MessageBase{MessageType_: "CharacterCharacteristics", id_: 294}}
}
func (m *CharacterCharacteristics) Deserialize(input *DataWrapper) {
	m.Characteristics = NewVector[CharacterCharacteristicI]()
	characteristicsLen := int(input.ReadShort())
	for i := 0; i < characteristicsLen; i++ {
		foundCharacterCharacteristic := getDynamicType(input)
		if castedCharacterCharacteristic, ok := foundCharacterCharacteristic.(CharacterCharacteristicI); ok {
			castedCharacterCharacteristic.Deserialize(input)
			m.Characteristics.Push(&castedCharacterCharacteristic)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement CharacterCharacteristicI, got: " + fmt.Sprintf("%T", foundCharacterCharacteristic))
		}
	}
}

func (m *CharacterCharacteristics) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCharacteristicsInformations struct {
	MessageBase
	Experience               int64
	ExperienceLevelFloor     int64
	ExperienceNextLevelFloor int64
	ExperienceBonusLimit     int64
	Kamas                    int64
	AlignmentInfos           *ActorExtendedAlignmentInformations
	CriticalHitWeapon        int
	Characteristics          *Vector[CharacterCharacteristicI]
	SpellModifiers           *Vector[SpellModifierMessage]
	ProbationTime            float64
}

func NewCharacterCharacteristicsInformations() *CharacterCharacteristicsInformations {
	return &CharacterCharacteristicsInformations{MessageBase: MessageBase{MessageType_: "CharacterCharacteristicsInformations", id_: 4504}}
}
func (m *CharacterCharacteristicsInformations) Deserialize(input *DataWrapper) {
	m.Experience = input.ReadVarUhLong()
	m.ExperienceLevelFloor = input.ReadVarUhLong()
	m.ExperienceNextLevelFloor = input.ReadVarUhLong()
	m.ExperienceBonusLimit = input.ReadVarUhLong()
	m.Kamas = input.ReadVarUhLong()
	m.AlignmentInfos = NewActorExtendedAlignmentInformations()
	m.AlignmentInfos.Deserialize(input)
	m.CriticalHitWeapon = input.ReadVarUhShort()
	m.Characteristics = NewVector[CharacterCharacteristicI]()
	characteristicsLen := int(input.ReadShort())
	for i := 0; i < characteristicsLen; i++ {
		foundCharacterCharacteristic := getDynamicType(input)
		if castedCharacterCharacteristic, ok := foundCharacterCharacteristic.(CharacterCharacteristicI); ok {
			castedCharacterCharacteristic.Deserialize(input)
			m.Characteristics.Push(&castedCharacterCharacteristic)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement CharacterCharacteristicI, got: " + fmt.Sprintf("%T", foundCharacterCharacteristic))
		}
	}
	m.SpellModifiers = NewVector[SpellModifierMessage]()
	spellModifiersLen := int(input.ReadShort())
	for i := 0; i < spellModifiersLen; i++ {
		SpellModifierMessage := NewSpellModifierMessage()
		SpellModifierMessage.Deserialize(input)
		m.SpellModifiers.Push(SpellModifierMessage)
	}
	m.ProbationTime = input.ReadDouble()
}

func (m *CharacterCharacteristicsInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCreationRequestMessage struct {
	MessageBase
	Name       string
	Breed      int8
	Sex        bool
	Colors     *Vector[int32]
	CosmeticId int
}

func NewCharacterCreationRequestMessage() *CharacterCreationRequestMessage {
	return &CharacterCreationRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterCreationRequestMessage", id_: 491}}
}
func (m *CharacterCreationRequestMessage) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	// deserialize not ready for 'Colors' (vector type: &{SubType:int LengthType: SubTypeType:Int IsDynamicType:false})
	m.CosmeticId = input.ReadVarUhShort()
}

func (m *CharacterCreationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterCreationResultMessage struct {
	MessageBase
	Result int8
	Reason int8
}

func NewCharacterCreationResultMessage() *CharacterCreationResultMessage {
	return &CharacterCreationResultMessage{MessageBase: MessageBase{MessageType_: "CharacterCreationResultMessage", id_: 5979}}
}
func (m *CharacterCreationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
	m.Reason = input.ReadByte()
}

func (m *CharacterCreationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterDeletionErrorMessage struct {
	MessageBase
	Reason int8
}

func NewCharacterDeletionErrorMessage() *CharacterDeletionErrorMessage {
	return &CharacterDeletionErrorMessage{MessageBase: MessageBase{MessageType_: "CharacterDeletionErrorMessage", id_: 4351}}
}
func (m *CharacterDeletionErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *CharacterDeletionErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterDeletionPrepareMessage struct {
	MessageBase
	CharacterId      int64
	CharacterName    string
	SecretQuestion   string
	NeedSecretAnswer bool
}

func NewCharacterDeletionPrepareMessage() *CharacterDeletionPrepareMessage {
	return &CharacterDeletionPrepareMessage{MessageBase: MessageBase{MessageType_: "CharacterDeletionPrepareMessage", id_: 5348}}
}
func (m *CharacterDeletionPrepareMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
	m.CharacterName = input.ReadUTF()
	m.SecretQuestion = input.ReadUTF()
	m.NeedSecretAnswer = input.ReadBoolean()
}

func (m *CharacterDeletionPrepareMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterDeletionPrepareRequestMessage struct {
	MessageBase
	CharacterId int64
}

func NewCharacterDeletionPrepareRequestMessage() *CharacterDeletionPrepareRequestMessage {
	return &CharacterDeletionPrepareRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterDeletionPrepareRequestMessage", id_: 3535}}
}
func (m *CharacterDeletionPrepareRequestMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
}

func (m *CharacterDeletionPrepareRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterDeletionRequestMessage struct {
	MessageBase
	CharacterId      int64
	SecretAnswerHash string
}

func NewCharacterDeletionRequestMessage() *CharacterDeletionRequestMessage {
	return &CharacterDeletionRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterDeletionRequestMessage", id_: 1489}}
}
func (m *CharacterDeletionRequestMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
	m.SecretAnswerHash = input.ReadUTF()
}

func (m *CharacterDeletionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterExperienceGainMessage struct {
	MessageBase
	ExperienceCharacter   int64
	ExperienceMount       int64
	ExperienceGuild       int64
	ExperienceIncarnation int64
}

func NewCharacterExperienceGainMessage() *CharacterExperienceGainMessage {
	return &CharacterExperienceGainMessage{MessageBase: MessageBase{MessageType_: "CharacterExperienceGainMessage", id_: 9701}}
}
func (m *CharacterExperienceGainMessage) Deserialize(input *DataWrapper) {
	m.ExperienceCharacter = input.ReadVarUhLong()
	m.ExperienceMount = input.ReadVarUhLong()
	m.ExperienceGuild = input.ReadVarUhLong()
	m.ExperienceIncarnation = input.ReadVarUhLong()
}

func (m *CharacterExperienceGainMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterFirstSelectionMessage struct {
	MessageBase
	CharacterSelectionMessage
	DoTutorial bool
}

func NewCharacterFirstSelectionMessage() *CharacterFirstSelectionMessage {
	return &CharacterFirstSelectionMessage{MessageBase: MessageBase{MessageType_: "CharacterFirstSelectionMessage", id_: 7638}}
}
func (m *CharacterFirstSelectionMessage) Deserialize(input *DataWrapper) {
	m.CharacterSelectionMessage.Deserialize(input)
	m.DoTutorial = input.ReadBoolean()
}

func (m *CharacterFirstSelectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterHardcoreOrEpicInformations struct {
	MessageBase
	CharacterBaseInformations
	DeathState    int8
	DeathCount    int
	DeathMaxLevel int
}

func NewCharacterHardcoreOrEpicInformations() *CharacterHardcoreOrEpicInformations {
	return &CharacterHardcoreOrEpicInformations{MessageBase: MessageBase{MessageType_: "CharacterHardcoreOrEpicInformations", id_: 3983}}
}
func (m *CharacterHardcoreOrEpicInformations) Deserialize(input *DataWrapper) {
	m.CharacterBaseInformations.Deserialize(input)
	m.DeathState = input.ReadByte()
	m.DeathCount = input.ReadVarUhShort()
	m.DeathMaxLevel = input.ReadVarUhShort()
}

func (m *CharacterHardcoreOrEpicInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterLevelUpInformationMessage struct {
	MessageBase
	CharacterLevelUpMessage
	Name string
	Id   int64
}

func NewCharacterLevelUpInformationMessage() *CharacterLevelUpInformationMessage {
	return &CharacterLevelUpInformationMessage{MessageBase: MessageBase{MessageType_: "CharacterLevelUpInformationMessage", id_: 3031}}
}
func (m *CharacterLevelUpInformationMessage) Deserialize(input *DataWrapper) {
	m.CharacterLevelUpMessage.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Id = input.ReadVarUhLong()
}

func (m *CharacterLevelUpInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterLevelUpMessage struct {
	MessageBase
	NewLevel int
}

func NewCharacterLevelUpMessage() *CharacterLevelUpMessage {
	return &CharacterLevelUpMessage{MessageBase: MessageBase{MessageType_: "CharacterLevelUpMessage", id_: 5797}}
}
func (m *CharacterLevelUpMessage) Deserialize(input *DataWrapper) {
	m.NewLevel = input.ReadVarUhShort()
}

func (m *CharacterLevelUpMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterLoadingCompleteMessage struct {
	MessageBase
}

func NewCharacterLoadingCompleteMessage() *CharacterLoadingCompleteMessage {
	return &CharacterLoadingCompleteMessage{MessageBase: MessageBase{MessageType_: "CharacterLoadingCompleteMessage", id_: 605}}
}
func (m *CharacterLoadingCompleteMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterLoadingCompleteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterMinimalAllianceInformations struct {
	MessageBase
	CharacterMinimalPlusLookInformations
	Alliance *BasicNamedAllianceInformations
}

func NewCharacterMinimalAllianceInformations() *CharacterMinimalAllianceInformations {
	return &CharacterMinimalAllianceInformations{MessageBase: MessageBase{MessageType_: "CharacterMinimalAllianceInformations", id_: 4814}}
}
func (m *CharacterMinimalAllianceInformations) Deserialize(input *DataWrapper) {
	m.CharacterMinimalPlusLookInformations.Deserialize(input)
	m.Alliance = NewBasicNamedAllianceInformations()
	m.Alliance.Deserialize(input)
}

func (m *CharacterMinimalAllianceInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterMinimalGuildInformations struct {
	MessageBase
	CharacterMinimalPlusLookInformations
	Guild *BasicGuildInformations
}

func NewCharacterMinimalGuildInformations() *CharacterMinimalGuildInformations {
	return &CharacterMinimalGuildInformations{MessageBase: MessageBase{MessageType_: "CharacterMinimalGuildInformations", id_: 2143}}
}
func (m *CharacterMinimalGuildInformations) Deserialize(input *DataWrapper) {
	m.CharacterMinimalPlusLookInformations.Deserialize(input)
	m.Guild = NewBasicGuildInformations()
	m.Guild.Deserialize(input)
}

func (m *CharacterMinimalGuildInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterMinimalInformations struct {
	MessageBase
	CharacterBasicMinimalInformations
	Level int
}

func NewCharacterMinimalInformations() *CharacterMinimalInformations {
	return &CharacterMinimalInformations{MessageBase: MessageBase{MessageType_: "CharacterMinimalInformations", id_: 9474}}
}
func (m *CharacterMinimalInformations) Deserialize(input *DataWrapper) {
	m.CharacterBasicMinimalInformations.Deserialize(input)
	m.Level = input.ReadVarUhShort()
}

func (m *CharacterMinimalInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterMinimalPlusLookInformations struct {
	MessageBase
	CharacterMinimalInformations
	EntityLook *EntityLook
	Breed      int8
}

func NewCharacterMinimalPlusLookInformations() *CharacterMinimalPlusLookInformations {
	return &CharacterMinimalPlusLookInformations{MessageBase: MessageBase{MessageType_: "CharacterMinimalPlusLookInformations", id_: 1529}}
}
func (m *CharacterMinimalPlusLookInformations) Deserialize(input *DataWrapper) {
	m.CharacterMinimalInformations.Deserialize(input)
	m.EntityLook = NewEntityLook()
	m.EntityLook.Deserialize(input)
	m.Breed = input.ReadByte()
}

func (m *CharacterMinimalPlusLookInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterMinimalSocialPublicInformations struct {
	MessageBase
	CharacterMinimalInformations
	Rank *RankPublicInformation
}

func NewCharacterMinimalSocialPublicInformations() *CharacterMinimalSocialPublicInformations {
	return &CharacterMinimalSocialPublicInformations{MessageBase: MessageBase{MessageType_: "CharacterMinimalSocialPublicInformations", id_: 5126}}
}
func (m *CharacterMinimalSocialPublicInformations) Deserialize(input *DataWrapper) {
	m.CharacterMinimalInformations.Deserialize(input)
	m.Rank = NewRankPublicInformation()
	m.Rank.Deserialize(input)
}

func (m *CharacterMinimalSocialPublicInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterNameSuggestionFailureMessage struct {
	MessageBase
	Reason int8
}

func NewCharacterNameSuggestionFailureMessage() *CharacterNameSuggestionFailureMessage {
	return &CharacterNameSuggestionFailureMessage{MessageBase: MessageBase{MessageType_: "CharacterNameSuggestionFailureMessage", id_: 5371}}
}
func (m *CharacterNameSuggestionFailureMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *CharacterNameSuggestionFailureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterNameSuggestionRequestMessage struct {
	MessageBase
}

func NewCharacterNameSuggestionRequestMessage() *CharacterNameSuggestionRequestMessage {
	return &CharacterNameSuggestionRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterNameSuggestionRequestMessage", id_: 2000}}
}
func (m *CharacterNameSuggestionRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterNameSuggestionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterNameSuggestionSuccessMessage struct {
	MessageBase
	Suggestion string
}

func NewCharacterNameSuggestionSuccessMessage() *CharacterNameSuggestionSuccessMessage {
	return &CharacterNameSuggestionSuccessMessage{MessageBase: MessageBase{MessageType_: "CharacterNameSuggestionSuccessMessage", id_: 2208}}
}
func (m *CharacterNameSuggestionSuccessMessage) Deserialize(input *DataWrapper) {
	m.Suggestion = input.ReadUTF()
}

func (m *CharacterNameSuggestionSuccessMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterRemodelingInformation struct {
	MessageBase
	AbstractCharacterInformation
	Name       string
	Breed      int8
	Sex        bool
	CosmeticId int
	Colors     *Vector[int32]
}

func NewCharacterRemodelingInformation() *CharacterRemodelingInformation {
	return &CharacterRemodelingInformation{MessageBase: MessageBase{MessageType_: "CharacterRemodelingInformation", id_: 5105}}
}
func (m *CharacterRemodelingInformation) Deserialize(input *DataWrapper) {
	m.AbstractCharacterInformation.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.CosmeticId = input.ReadVarUhShort()
	m.Colors = NewVector[int32]()
	colorsLen := int(input.ReadShort())
	for i := 0; i < colorsLen; i++ {
		val := input.ReadInt()
		m.Colors.Push(&val)
	}
}

func (m *CharacterRemodelingInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterReplayRequestMessage struct {
	MessageBase
	CharacterId int64
}

func NewCharacterReplayRequestMessage() *CharacterReplayRequestMessage {
	return &CharacterReplayRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterReplayRequestMessage", id_: 8786}}
}
func (m *CharacterReplayRequestMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
}

func (m *CharacterReplayRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterReplayWithRemodelRequestMessage struct {
	MessageBase
	CharacterReplayRequestMessage
	Remodel *RemodelingInformation
}

func NewCharacterReplayWithRemodelRequestMessage() *CharacterReplayWithRemodelRequestMessage {
	return &CharacterReplayWithRemodelRequestMessage{MessageBase: MessageBase{MessageType_: "CharacterReplayWithRemodelRequestMessage", id_: 338}}
}
func (m *CharacterReplayWithRemodelRequestMessage) Deserialize(input *DataWrapper) {
	m.CharacterReplayRequestMessage.Deserialize(input)
	m.Remodel = NewRemodelingInformation()
	m.Remodel.Deserialize(input)
}

func (m *CharacterReplayWithRemodelRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectedErrorMessage struct {
	MessageBase
}

func NewCharacterSelectedErrorMessage() *CharacterSelectedErrorMessage {
	return &CharacterSelectedErrorMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectedErrorMessage", id_: 1596}}
}
func (m *CharacterSelectedErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterSelectedErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectedForceMessage struct {
	MessageBase
	Id int32
}

func NewCharacterSelectedForceMessage() *CharacterSelectedForceMessage {
	return &CharacterSelectedForceMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectedForceMessage", id_: 4050}}
}
func (m *CharacterSelectedForceMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadInt()
}

func (m *CharacterSelectedForceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectedForceReadyMessage struct {
	MessageBase
}

func NewCharacterSelectedForceReadyMessage() *CharacterSelectedForceReadyMessage {
	return &CharacterSelectedForceReadyMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectedForceReadyMessage", id_: 4057}}
}
func (m *CharacterSelectedForceReadyMessage) Deserialize(input *DataWrapper) {
}

func (m *CharacterSelectedForceReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectedSuccessMessage struct {
	MessageBase
	Infos             CharacterBaseInformationsI
	IsCollectingStats bool
}

func NewCharacterSelectedSuccessMessage() *CharacterSelectedSuccessMessage {
	return &CharacterSelectedSuccessMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectedSuccessMessage", id_: 4299}}
}
func (m *CharacterSelectedSuccessMessage) Deserialize(input *DataWrapper) {
	m.Infos = NewCharacterBaseInformations()
	m.Infos.Deserialize(input)
	m.IsCollectingStats = input.ReadBoolean()
}

func (m *CharacterSelectedSuccessMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectionMessage struct {
	MessageBase
	Id int64
}

func NewCharacterSelectionMessage() *CharacterSelectionMessage {
	return &CharacterSelectionMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectionMessage", id_: 6792}}
}
func (m *CharacterSelectionMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
}

func (m *CharacterSelectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterSelectionWithRemodelMessage struct {
	MessageBase
	CharacterSelectionMessage
	Remodel *RemodelingInformation
}

func NewCharacterSelectionWithRemodelMessage() *CharacterSelectionWithRemodelMessage {
	return &CharacterSelectionWithRemodelMessage{MessageBase: MessageBase{MessageType_: "CharacterSelectionWithRemodelMessage", id_: 3540}}
}
func (m *CharacterSelectionWithRemodelMessage) Deserialize(input *DataWrapper) {
	m.CharacterSelectionMessage.Deserialize(input)
	m.Remodel = NewRemodelingInformation()
	m.Remodel.Deserialize(input)
}

func (m *CharacterSelectionWithRemodelMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterStatsListMessage struct {
	MessageBase
	Stats *CharacterCharacteristicsInformations
}

func NewCharacterStatsListMessage() *CharacterStatsListMessage {
	return &CharacterStatsListMessage{MessageBase: MessageBase{MessageType_: "CharacterStatsListMessage", id_: 4395}}
}
func (m *CharacterStatsListMessage) Deserialize(input *DataWrapper) {
	m.Stats = NewCharacterCharacteristicsInformations()
	m.Stats.Deserialize(input)
}

func (m *CharacterStatsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterToRemodelInformations struct {
	MessageBase
	CharacterRemodelingInformation
	PossibleChangeMask  int8
	MandatoryChangeMask int8
}

func NewCharacterToRemodelInformations() *CharacterToRemodelInformations {
	return &CharacterToRemodelInformations{MessageBase: MessageBase{MessageType_: "CharacterToRemodelInformations", id_: 3313}}
}
func (m *CharacterToRemodelInformations) Deserialize(input *DataWrapper) {
	m.CharacterRemodelingInformation.Deserialize(input)
	m.PossibleChangeMask = input.ReadByte()
	m.MandatoryChangeMask = input.ReadByte()
}

func (m *CharacterToRemodelInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type CharacterUsableCharacteristicDetailed struct {
	MessageBase
	CharacterCharacteristicDetailed
	Used int
}

func NewCharacterUsableCharacteristicDetailed() *CharacterUsableCharacteristicDetailed {
	return &CharacterUsableCharacteristicDetailed{MessageBase: MessageBase{MessageType_: "CharacterUsableCharacteristicDetailed", id_: 1943}}
}
func (m *CharacterUsableCharacteristicDetailed) Deserialize(input *DataWrapper) {
	m.CharacterCharacteristicDetailed.Deserialize(input)
	m.Used = input.ReadVarUhInt()
}

func (m *CharacterUsableCharacteristicDetailed) IsDeserializeFunctionComplete() bool {
	return true
}

type CharactersListErrorMessage struct {
	MessageBase
}

func NewCharactersListErrorMessage() *CharactersListErrorMessage {
	return &CharactersListErrorMessage{MessageBase: MessageBase{MessageType_: "CharactersListErrorMessage", id_: 7643}}
}
func (m *CharactersListErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *CharactersListErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharactersListMessage struct {
	MessageBase
	Characters *Vector[CharacterBaseInformationsI]
}

func NewCharactersListMessage() *CharactersListMessage {
	return &CharactersListMessage{MessageBase: MessageBase{MessageType_: "CharactersListMessage", id_: 8016}}
}
func (m *CharactersListMessage) Deserialize(input *DataWrapper) {
	m.Characters = NewVector[CharacterBaseInformationsI]()
	charactersLen := int(input.ReadShort())
	for i := 0; i < charactersLen; i++ {
		foundCharacterBaseInformations := getDynamicType(input)
		if castedCharacterBaseInformations, ok := foundCharacterBaseInformations.(CharacterBaseInformationsI); ok {
			castedCharacterBaseInformations.Deserialize(input)
			m.Characters.Push(&castedCharacterBaseInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement CharacterBaseInformationsI, got: " + fmt.Sprintf("%T", foundCharacterBaseInformations))
		}
	}
}

func (m *CharactersListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharactersListRequestMessage struct {
	MessageBase
}

func NewCharactersListRequestMessage() *CharactersListRequestMessage {
	return &CharactersListRequestMessage{MessageBase: MessageBase{MessageType_: "CharactersListRequestMessage", id_: 2412}}
}
func (m *CharactersListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *CharactersListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CharactersListWithRemodelingMessage struct {
	MessageBase
	CharactersListMessage
	CharactersToRemodel *Vector[CharacterToRemodelInformations]
}

func NewCharactersListWithRemodelingMessage() *CharactersListWithRemodelingMessage {
	return &CharactersListWithRemodelingMessage{MessageBase: MessageBase{MessageType_: "CharactersListWithRemodelingMessage", id_: 9633}}
}
func (m *CharactersListWithRemodelingMessage) Deserialize(input *DataWrapper) {
	m.CharactersListMessage.Deserialize(input)
	m.CharactersToRemodel = NewVector[CharacterToRemodelInformations]()
	charactersToRemodelLen := int(input.ReadShort())
	for i := 0; i < charactersToRemodelLen; i++ {
		CharacterToRemodelInformations := NewCharacterToRemodelInformations()
		CharacterToRemodelInformations.Deserialize(input)
		m.CharactersToRemodel.Push(CharacterToRemodelInformations)
	}
}

func (m *CharactersListWithRemodelingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatAbstractClientMessage struct {
	MessageBase
	Content string
}

func NewChatAbstractClientMessage() *ChatAbstractClientMessage {
	return &ChatAbstractClientMessage{MessageBase: MessageBase{MessageType_: "ChatAbstractClientMessage", id_: 6914}}
}
func (m *ChatAbstractClientMessage) Deserialize(input *DataWrapper) {
	m.Content = input.ReadUTF()
}

func (m *ChatAbstractClientMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatAbstractServerMessage struct {
	MessageBase
	Channel     int8
	Content     string
	Timestamp   int32
	Fingerprint string
}

func NewChatAbstractServerMessage() *ChatAbstractServerMessage {
	return &ChatAbstractServerMessage{MessageBase: MessageBase{MessageType_: "ChatAbstractServerMessage", id_: 1770}}
}
func (m *ChatAbstractServerMessage) Deserialize(input *DataWrapper) {
	m.Channel = input.ReadByte()
	m.Content = input.ReadUTF()
	m.Timestamp = input.ReadInt()
	m.Fingerprint = input.ReadUTF()
}

func (m *ChatAbstractServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatAdminServerMessage struct {
	MessageBase
	ChatServerMessage
}

func NewChatAdminServerMessage() *ChatAdminServerMessage {
	return &ChatAdminServerMessage{MessageBase: MessageBase{MessageType_: "ChatAdminServerMessage", id_: 2080}}
}
func (m *ChatAdminServerMessage) Deserialize(input *DataWrapper) {
	m.ChatServerMessage.Deserialize(input)
}

func (m *ChatAdminServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatClientMultiMessage struct {
	MessageBase
	ChatAbstractClientMessage
	Channel int8
}

func NewChatClientMultiMessage() *ChatClientMultiMessage {
	return &ChatClientMultiMessage{MessageBase: MessageBase{MessageType_: "ChatClientMultiMessage", id_: 3932}}
}
func (m *ChatClientMultiMessage) Deserialize(input *DataWrapper) {
	m.ChatAbstractClientMessage.Deserialize(input)
	m.Channel = input.ReadByte()
}

func (m *ChatClientMultiMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatClientMultiWithObjectMessage struct {
	MessageBase
	ChatClientMultiMessage
	Objects *Vector[ObjectItem]
}

func NewChatClientMultiWithObjectMessage() *ChatClientMultiWithObjectMessage {
	return &ChatClientMultiWithObjectMessage{MessageBase: MessageBase{MessageType_: "ChatClientMultiWithObjectMessage", id_: 5473}}
}
func (m *ChatClientMultiWithObjectMessage) Deserialize(input *DataWrapper) {
	m.ChatClientMultiMessage.Deserialize(input)
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
}

func (m *ChatClientMultiWithObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatClientPrivateMessage struct {
	MessageBase
	ChatAbstractClientMessage
	Receiver AbstractPlayerSearchInformationI
}

func NewChatClientPrivateMessage() *ChatClientPrivateMessage {
	return &ChatClientPrivateMessage{MessageBase: MessageBase{MessageType_: "ChatClientPrivateMessage", id_: 7053}}
}
func (m *ChatClientPrivateMessage) Deserialize(input *DataWrapper) {
	m.ChatAbstractClientMessage.Deserialize(input)
	m.Receiver = getDynamicType(input)
	m.Receiver.Deserialize(input)
}

func (m *ChatClientPrivateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatClientPrivateWithObjectMessage struct {
	MessageBase
	ChatClientPrivateMessage
	Objects *Vector[ObjectItem]
}

func NewChatClientPrivateWithObjectMessage() *ChatClientPrivateWithObjectMessage {
	return &ChatClientPrivateWithObjectMessage{MessageBase: MessageBase{MessageType_: "ChatClientPrivateWithObjectMessage", id_: 9502}}
}
func (m *ChatClientPrivateWithObjectMessage) Deserialize(input *DataWrapper) {
	m.ChatClientPrivateMessage.Deserialize(input)
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
}

func (m *ChatClientPrivateWithObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatCommunityChannelCommunityMessage struct {
	MessageBase
	CommunityId int16
}

func NewChatCommunityChannelCommunityMessage() *ChatCommunityChannelCommunityMessage {
	return &ChatCommunityChannelCommunityMessage{MessageBase: MessageBase{MessageType_: "ChatCommunityChannelCommunityMessage", id_: 5839}}
}
func (m *ChatCommunityChannelCommunityMessage) Deserialize(input *DataWrapper) {
	m.CommunityId = input.ReadShort()
}

func (m *ChatCommunityChannelCommunityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatCommunityChannelSetCommunityRequestMessage struct {
	MessageBase
	CommunityId int16
}

func NewChatCommunityChannelSetCommunityRequestMessage() *ChatCommunityChannelSetCommunityRequestMessage {
	return &ChatCommunityChannelSetCommunityRequestMessage{MessageBase: MessageBase{MessageType_: "ChatCommunityChannelSetCommunityRequestMessage", id_: 2893}}
}
func (m *ChatCommunityChannelSetCommunityRequestMessage) Deserialize(input *DataWrapper) {
	m.CommunityId = input.ReadShort()
}

func (m *ChatCommunityChannelSetCommunityRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatErrorMessage struct {
	MessageBase
	Reason int8
}

func NewChatErrorMessage() *ChatErrorMessage {
	return &ChatErrorMessage{MessageBase: MessageBase{MessageType_: "ChatErrorMessage", id_: 6135}}
}
func (m *ChatErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *ChatErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatKolizeumServerMessage struct {
	MessageBase
	ChatServerMessage
	OriginServerId int16
}

func NewChatKolizeumServerMessage() *ChatKolizeumServerMessage {
	return &ChatKolizeumServerMessage{MessageBase: MessageBase{MessageType_: "ChatKolizeumServerMessage", id_: 942}}
}
func (m *ChatKolizeumServerMessage) Deserialize(input *DataWrapper) {
	m.ChatServerMessage.Deserialize(input)
	m.OriginServerId = input.ReadShort()
}

func (m *ChatKolizeumServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatServerCopyMessage struct {
	MessageBase
	ChatAbstractServerMessage
	ReceiverId   int64
	ReceiverName string
}

func NewChatServerCopyMessage() *ChatServerCopyMessage {
	return &ChatServerCopyMessage{MessageBase: MessageBase{MessageType_: "ChatServerCopyMessage", id_: 8617}}
}
func (m *ChatServerCopyMessage) Deserialize(input *DataWrapper) {
	m.ChatAbstractServerMessage.Deserialize(input)
	m.ReceiverId = input.ReadVarUhLong()
	m.ReceiverName = input.ReadUTF()
}

func (m *ChatServerCopyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatServerCopyWithObjectMessage struct {
	MessageBase
	ChatServerCopyMessage
	Objects *Vector[ObjectItem]
}

func NewChatServerCopyWithObjectMessage() *ChatServerCopyWithObjectMessage {
	return &ChatServerCopyWithObjectMessage{MessageBase: MessageBase{MessageType_: "ChatServerCopyWithObjectMessage", id_: 8059}}
}
func (m *ChatServerCopyWithObjectMessage) Deserialize(input *DataWrapper) {
	m.ChatServerCopyMessage.Deserialize(input)
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
}

func (m *ChatServerCopyWithObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatServerMessage struct {
	MessageBase
	ChatAbstractServerMessage
	SenderId        float64
	SenderName      string
	Prefix          string
	SenderAccountId int32
}

func NewChatServerMessage() *ChatServerMessage {
	return &ChatServerMessage{MessageBase: MessageBase{MessageType_: "ChatServerMessage", id_: 6772}}
}
func (m *ChatServerMessage) Deserialize(input *DataWrapper) {
	m.ChatAbstractServerMessage.Deserialize(input)
	m.SenderId = input.ReadDouble()
	m.SenderName = input.ReadUTF()
	m.Prefix = input.ReadUTF()
	m.SenderAccountId = input.ReadInt()
}

func (m *ChatServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatServerWithObjectMessage struct {
	MessageBase
	ChatServerMessage
	Objects *Vector[ObjectItem]
}

func NewChatServerWithObjectMessage() *ChatServerWithObjectMessage {
	return &ChatServerWithObjectMessage{MessageBase: MessageBase{MessageType_: "ChatServerWithObjectMessage", id_: 399}}
}
func (m *ChatServerWithObjectMessage) Deserialize(input *DataWrapper) {
	m.ChatServerMessage.Deserialize(input)
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
}

func (m *ChatServerWithObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatSmileyExtraPackListMessage struct {
	MessageBase
	PackIds *Vector[int8]
}

func NewChatSmileyExtraPackListMessage() *ChatSmileyExtraPackListMessage {
	return &ChatSmileyExtraPackListMessage{MessageBase: MessageBase{MessageType_: "ChatSmileyExtraPackListMessage", id_: 3973}}
}
func (m *ChatSmileyExtraPackListMessage) Deserialize(input *DataWrapper) {
	m.PackIds = NewVector[int8]()
	packIdsLen := int(input.ReadShort())
	for i := 0; i < packIdsLen; i++ {
		val := input.ReadByte()
		m.PackIds.Push(&val)
	}
}

func (m *ChatSmileyExtraPackListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatSmileyMessage struct {
	MessageBase
	EntityId  float64
	SmileyId  int
	AccountId int32
}

func NewChatSmileyMessage() *ChatSmileyMessage {
	return &ChatSmileyMessage{MessageBase: MessageBase{MessageType_: "ChatSmileyMessage", id_: 7020}}
}
func (m *ChatSmileyMessage) Deserialize(input *DataWrapper) {
	m.EntityId = input.ReadDouble()
	m.SmileyId = input.ReadVarUhShort()
	m.AccountId = input.ReadInt()
}

func (m *ChatSmileyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ChatSmileyRequestMessage struct {
	MessageBase
	SmileyId int
}

func NewChatSmileyRequestMessage() *ChatSmileyRequestMessage {
	return &ChatSmileyRequestMessage{MessageBase: MessageBase{MessageType_: "ChatSmileyRequestMessage", id_: 9020}}
}
func (m *ChatSmileyRequestMessage) Deserialize(input *DataWrapper) {
	m.SmileyId = input.ReadVarUhShort()
}

func (m *ChatSmileyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CheckFileMessage struct {
	MessageBase
	FilenameHash string
	Type         int8
	Value        string
}

func NewCheckFileMessage() *CheckFileMessage {
	return &CheckFileMessage{MessageBase: MessageBase{MessageType_: "CheckFileMessage", id_: 5396}}
}
func (m *CheckFileMessage) Deserialize(input *DataWrapper) {
	m.FilenameHash = input.ReadUTF()
	m.Type = input.ReadByte()
	m.Value = input.ReadUTF()
}

func (m *CheckFileMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CheckFileRequestMessage struct {
	MessageBase
	Filename string
	Type     int8
}

func NewCheckFileRequestMessage() *CheckFileRequestMessage {
	return &CheckFileRequestMessage{MessageBase: MessageBase{MessageType_: "CheckFileRequestMessage", id_: 5970}}
}
func (m *CheckFileRequestMessage) Deserialize(input *DataWrapper) {
	m.Filename = input.ReadUTF()
	m.Type = input.ReadByte()
}

func (m *CheckFileRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CheckIntegrityMessage struct {
	MessageBase
	Data *Vector[int8]
}

func NewCheckIntegrityMessage() *CheckIntegrityMessage {
	return &CheckIntegrityMessage{MessageBase: MessageBase{MessageType_: "CheckIntegrityMessage", id_: 7220}}
}
func (m *CheckIntegrityMessage) Deserialize(input *DataWrapper) {
	m.Data = NewVector[int8]()
	dataLen := int(input.ReadVarInt())
	for i := 0; i < dataLen; i++ {
		val := input.ReadByte()
		m.Data.Push(&val)
	}
}

func (m *CheckIntegrityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CinematicMessage struct {
	MessageBase
	CinematicId int
}

func NewCinematicMessage() *CinematicMessage {
	return &CinematicMessage{MessageBase: MessageBase{MessageType_: "CinematicMessage", id_: 991}}
}
func (m *CinematicMessage) Deserialize(input *DataWrapper) {
	m.CinematicId = input.ReadVarUhShort()
}

func (m *CinematicMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ClientKeyMessage struct {
	MessageBase
	Key string
}

func NewClientKeyMessage() *ClientKeyMessage {
	return &ClientKeyMessage{MessageBase: MessageBase{MessageType_: "ClientKeyMessage", id_: 7975}}
}
func (m *ClientKeyMessage) Deserialize(input *DataWrapper) {
	m.Key = input.ReadUTF()
}

func (m *ClientKeyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ClientUIOpenedByObjectMessage struct {
	MessageBase
	ClientUIOpenedMessage
	Uid int
}

func NewClientUIOpenedByObjectMessage() *ClientUIOpenedByObjectMessage {
	return &ClientUIOpenedByObjectMessage{MessageBase: MessageBase{MessageType_: "ClientUIOpenedByObjectMessage", id_: 2467}}
}
func (m *ClientUIOpenedByObjectMessage) Deserialize(input *DataWrapper) {
	m.ClientUIOpenedMessage.Deserialize(input)
	m.Uid = input.ReadVarUhInt()
}

func (m *ClientUIOpenedByObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ClientUIOpenedMessage struct {
	MessageBase
	Type int8
}

func NewClientUIOpenedMessage() *ClientUIOpenedMessage {
	return &ClientUIOpenedMessage{MessageBase: MessageBase{MessageType_: "ClientUIOpenedMessage", id_: 1039}}
}
func (m *ClientUIOpenedMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
}

func (m *ClientUIOpenedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ClientYouAreDrunkMessage struct {
	MessageBase
	DebugInClientMessage
}

func NewClientYouAreDrunkMessage() *ClientYouAreDrunkMessage {
	return &ClientYouAreDrunkMessage{MessageBase: MessageBase{MessageType_: "ClientYouAreDrunkMessage", id_: 3498}}
}
func (m *ClientYouAreDrunkMessage) Deserialize(input *DataWrapper) {
	m.DebugInClientMessage.Deserialize(input)
}

func (m *ClientYouAreDrunkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CloseHavenBagFurnitureSequenceRequestMessage struct {
	MessageBase
}

func NewCloseHavenBagFurnitureSequenceRequestMessage() *CloseHavenBagFurnitureSequenceRequestMessage {
	return &CloseHavenBagFurnitureSequenceRequestMessage{MessageBase: MessageBase{MessageType_: "CloseHavenBagFurnitureSequenceRequestMessage", id_: 6165}}
}
func (m *CloseHavenBagFurnitureSequenceRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *CloseHavenBagFurnitureSequenceRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CompassResetMessage struct {
	MessageBase
	Type int8
}

func NewCompassResetMessage() *CompassResetMessage {
	return &CompassResetMessage{MessageBase: MessageBase{MessageType_: "CompassResetMessage", id_: 5999}}
}
func (m *CompassResetMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
}

func (m *CompassResetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CompassUpdateMessage struct {
	MessageBase
	Type   int8
	Coords MapCoordinatesI
}

func NewCompassUpdateMessage() *CompassUpdateMessage {
	return &CompassUpdateMessage{MessageBase: MessageBase{MessageType_: "CompassUpdateMessage", id_: 872}}
}
func (m *CompassUpdateMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
	m.Coords = getDynamicType(input)
	m.Coords.Deserialize(input)
}

func (m *CompassUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CompassUpdatePartyMemberMessage struct {
	MessageBase
	CompassUpdateMessage
	MemberId int64
	Active   bool
}

func NewCompassUpdatePartyMemberMessage() *CompassUpdatePartyMemberMessage {
	return &CompassUpdatePartyMemberMessage{MessageBase: MessageBase{MessageType_: "CompassUpdatePartyMemberMessage", id_: 9981}}
}
func (m *CompassUpdatePartyMemberMessage) Deserialize(input *DataWrapper) {
	m.CompassUpdateMessage.Deserialize(input)
	m.MemberId = input.ReadVarUhLong()
	m.Active = input.ReadBoolean()
}

func (m *CompassUpdatePartyMemberMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CompassUpdatePvpSeekMessage struct {
	MessageBase
	CompassUpdateMessage
	MemberId   int64
	MemberName string
}

func NewCompassUpdatePvpSeekMessage() *CompassUpdatePvpSeekMessage {
	return &CompassUpdatePvpSeekMessage{MessageBase: MessageBase{MessageType_: "CompassUpdatePvpSeekMessage", id_: 4778}}
}
func (m *CompassUpdatePvpSeekMessage) Deserialize(input *DataWrapper) {
	m.CompassUpdateMessage.Deserialize(input)
	m.MemberId = input.ReadVarUhLong()
	m.MemberName = input.ReadUTF()
}

func (m *CompassUpdatePvpSeekMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConfirmationOfListeningTaxCollectorUpdatesMessage struct {
	MessageBase
	Information TaxCollectorInformationsI
}

func NewConfirmationOfListeningTaxCollectorUpdatesMessage() *ConfirmationOfListeningTaxCollectorUpdatesMessage {
	return &ConfirmationOfListeningTaxCollectorUpdatesMessage{MessageBase: MessageBase{MessageType_: "ConfirmationOfListeningTaxCollectorUpdatesMessage", id_: 1625}}
}
func (m *ConfirmationOfListeningTaxCollectorUpdatesMessage) Deserialize(input *DataWrapper) {
	m.Information = NewTaxCollectorInformations()
	m.Information.Deserialize(input)
}

func (m *ConfirmationOfListeningTaxCollectorUpdatesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConsoleCommandsListMessage struct {
	MessageBase
	Aliases      *Vector[string]
	Args         *Vector[string]
	Descriptions *Vector[string]
}

func NewConsoleCommandsListMessage() *ConsoleCommandsListMessage {
	return &ConsoleCommandsListMessage{MessageBase: MessageBase{MessageType_: "ConsoleCommandsListMessage", id_: 869}}
}
func (m *ConsoleCommandsListMessage) Deserialize(input *DataWrapper) {
	m.Aliases = NewVector[string]()
	aliasesLen := int(input.ReadShort())
	for i := 0; i < aliasesLen; i++ {
		val := input.ReadUTF()
		m.Aliases.Push(&val)
	}
	m.Args = NewVector[string]()
	argsLen := int(input.ReadShort())
	for i := 0; i < argsLen; i++ {
		val := input.ReadUTF()
		m.Args.Push(&val)
	}
	m.Descriptions = NewVector[string]()
	descriptionsLen := int(input.ReadShort())
	for i := 0; i < descriptionsLen; i++ {
		val := input.ReadUTF()
		m.Descriptions.Push(&val)
	}
}

func (m *ConsoleCommandsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConsoleEndMessage struct {
	MessageBase
	ConsoleUuid *Uuid
	IsSuccess   bool
}

func NewConsoleEndMessage() *ConsoleEndMessage {
	return &ConsoleEndMessage{MessageBase: MessageBase{MessageType_: "ConsoleEndMessage", id_: 9802}}
}
func (m *ConsoleEndMessage) Deserialize(input *DataWrapper) {
	m.ConsoleUuid = NewUuid()
	m.ConsoleUuid.Deserialize(input)
	m.IsSuccess = input.ReadBoolean()
}

func (m *ConsoleEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConsoleMessage struct {
	MessageBase
	Type    int8
	Content string
}

func NewConsoleMessage() *ConsoleMessage {
	return &ConsoleMessage{MessageBase: MessageBase{MessageType_: "ConsoleMessage", id_: 7923}}
}
func (m *ConsoleMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
	m.Content = input.ReadUTF()
}

func (m *ConsoleMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConsumeAllGameActionItemMessage struct {
	MessageBase
	CharacterId int64
}

func NewConsumeAllGameActionItemMessage() *ConsumeAllGameActionItemMessage {
	return &ConsumeAllGameActionItemMessage{MessageBase: MessageBase{MessageType_: "ConsumeAllGameActionItemMessage", id_: 3120}}
}
func (m *ConsumeAllGameActionItemMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
}

func (m *ConsumeAllGameActionItemMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ConsumeGameActionItemMessage struct {
	MessageBase
	ActionId    int32
	CharacterId int64
}

func NewConsumeGameActionItemMessage() *ConsumeGameActionItemMessage {
	return &ConsumeGameActionItemMessage{MessageBase: MessageBase{MessageType_: "ConsumeGameActionItemMessage", id_: 2113}}
}
func (m *ConsumeGameActionItemMessage) Deserialize(input *DataWrapper) {
	m.ActionId = input.ReadInt()
	m.CharacterId = input.ReadVarUhLong()
}

func (m *ConsumeGameActionItemMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactAddFailureMessage struct {
	MessageBase
	Reason int8
}

func NewContactAddFailureMessage() *ContactAddFailureMessage {
	return &ContactAddFailureMessage{MessageBase: MessageBase{MessageType_: "ContactAddFailureMessage", id_: 2506}}
}
func (m *ContactAddFailureMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *ContactAddFailureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactLookErrorMessage struct {
	MessageBase
	RequestId int
}

func NewContactLookErrorMessage() *ContactLookErrorMessage {
	return &ContactLookErrorMessage{MessageBase: MessageBase{MessageType_: "ContactLookErrorMessage", id_: 6346}}
}
func (m *ContactLookErrorMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadVarUhInt()
}

func (m *ContactLookErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactLookMessage struct {
	MessageBase
	RequestId  int
	PlayerName string
	PlayerId   int64
	Look       *EntityLook
}

func NewContactLookMessage() *ContactLookMessage {
	return &ContactLookMessage{MessageBase: MessageBase{MessageType_: "ContactLookMessage", id_: 4925}}
}
func (m *ContactLookMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadVarUhInt()
	m.PlayerName = input.ReadUTF()
	m.PlayerId = input.ReadVarUhLong()
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *ContactLookMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactLookRequestByIdMessage struct {
	MessageBase
	ContactLookRequestMessage
	PlayerId int64
}

func NewContactLookRequestByIdMessage() *ContactLookRequestByIdMessage {
	return &ContactLookRequestByIdMessage{MessageBase: MessageBase{MessageType_: "ContactLookRequestByIdMessage", id_: 6048}}
}
func (m *ContactLookRequestByIdMessage) Deserialize(input *DataWrapper) {
	m.ContactLookRequestMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *ContactLookRequestByIdMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactLookRequestByNameMessage struct {
	MessageBase
	ContactLookRequestMessage
	PlayerName string
}

func NewContactLookRequestByNameMessage() *ContactLookRequestByNameMessage {
	return &ContactLookRequestByNameMessage{MessageBase: MessageBase{MessageType_: "ContactLookRequestByNameMessage", id_: 2776}}
}
func (m *ContactLookRequestByNameMessage) Deserialize(input *DataWrapper) {
	m.ContactLookRequestMessage.Deserialize(input)
	m.PlayerName = input.ReadUTF()
}

func (m *ContactLookRequestByNameMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ContactLookRequestMessage struct {
	MessageBase
	RequestId   uint8
	ContactType int8
}

func NewContactLookRequestMessage() *ContactLookRequestMessage {
	return &ContactLookRequestMessage{MessageBase: MessageBase{MessageType_: "ContactLookRequestMessage", id_: 7562}}
}
func (m *ContactLookRequestMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadUnsignedByte()
	m.ContactType = input.ReadByte()
}

func (m *ContactLookRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type Contribution struct {
	MessageBase
	ContributorId   int64
	ContributorName string
	Amount          int64
}

func NewContribution() *Contribution {
	return &Contribution{MessageBase: MessageBase{MessageType_: "Contribution", id_: 7492}}
}
func (m *Contribution) Deserialize(input *DataWrapper) {
	m.ContributorId = input.ReadVarUhLong()
	m.ContributorName = input.ReadUTF()
	m.Amount = input.ReadVarUhLong()
}

func (m *Contribution) IsDeserializeFunctionComplete() bool {
	return true
}

type CreateGuildRankRequestMessage struct {
	MessageBase
	ParentRankId int
	GfxId        int
	Name         string
}

func NewCreateGuildRankRequestMessage() *CreateGuildRankRequestMessage {
	return &CreateGuildRankRequestMessage{MessageBase: MessageBase{MessageType_: "CreateGuildRankRequestMessage", id_: 1740}}
}
func (m *CreateGuildRankRequestMessage) Deserialize(input *DataWrapper) {
	m.ParentRankId = input.ReadVarUhInt()
	m.GfxId = input.ReadVarUhInt()
	m.Name = input.ReadUTF()
}

func (m *CreateGuildRankRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CredentialsAcknowledgementMessage struct {
	MessageBase
}

func NewCredentialsAcknowledgementMessage() *CredentialsAcknowledgementMessage {
	return &CredentialsAcknowledgementMessage{MessageBase: MessageBase{MessageType_: "CredentialsAcknowledgementMessage", id_: 7628}}
}
func (m *CredentialsAcknowledgementMessage) Deserialize(input *DataWrapper) {
}

func (m *CredentialsAcknowledgementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CurrentMapInstanceMessage struct {
	MessageBase
	CurrentMapMessage
	InstantiatedMapId float64
}

func NewCurrentMapInstanceMessage() *CurrentMapInstanceMessage {
	return &CurrentMapInstanceMessage{MessageBase: MessageBase{MessageType_: "CurrentMapInstanceMessage", id_: 5476}}
}
func (m *CurrentMapInstanceMessage) Deserialize(input *DataWrapper) {
	m.CurrentMapMessage.Deserialize(input)
	m.InstantiatedMapId = input.ReadDouble()
}

func (m *CurrentMapInstanceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CurrentMapMessage struct {
	MessageBase
	MapId float64
}

func NewCurrentMapMessage() *CurrentMapMessage {
	return &CurrentMapMessage{MessageBase: MessageBase{MessageType_: "CurrentMapMessage", id_: 7991}}
}
func (m *CurrentMapMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
}

func (m *CurrentMapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type CurrentServerStatusUpdateMessage struct {
	MessageBase
	Status int8
}

func NewCurrentServerStatusUpdateMessage() *CurrentServerStatusUpdateMessage {
	return &CurrentServerStatusUpdateMessage{MessageBase: MessageBase{MessageType_: "CurrentServerStatusUpdateMessage", id_: 9599}}
}
func (m *CurrentServerStatusUpdateMessage) Deserialize(input *DataWrapper) {
	m.Status = input.ReadByte()
}

func (m *CurrentServerStatusUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DebtInformationI interface {
	Deserialize(input *DataWrapper)
}

type DebtInformation struct {
	MessageBase
	Id        float64
	Timestamp float64
}

func NewDebtInformation() *DebtInformation {
	return &DebtInformation{MessageBase: MessageBase{MessageType_: "DebtInformation", id_: 8943}}
}
func (m *DebtInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.Timestamp = input.ReadDouble()
}

func (m *DebtInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type DebtsDeleteMessage struct {
	MessageBase
	Reason int8
	Debts  *Vector[float64]
}

func NewDebtsDeleteMessage() *DebtsDeleteMessage {
	return &DebtsDeleteMessage{MessageBase: MessageBase{MessageType_: "DebtsDeleteMessage", id_: 7828}}
}
func (m *DebtsDeleteMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
	m.Debts = NewVector[float64]()
	debtsLen := int(input.ReadShort())
	for i := 0; i < debtsLen; i++ {
		val := input.ReadDouble()
		m.Debts.Push(&val)
	}
}

func (m *DebtsDeleteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DebtsUpdateMessage struct {
	MessageBase
	Action int8
	Debts  *Vector[DebtInformationI]
}

func NewDebtsUpdateMessage() *DebtsUpdateMessage {
	return &DebtsUpdateMessage{MessageBase: MessageBase{MessageType_: "DebtsUpdateMessage", id_: 8856}}
}
func (m *DebtsUpdateMessage) Deserialize(input *DataWrapper) {
	m.Action = input.ReadByte()
	m.Debts = NewVector[DebtInformationI]()
	debtsLen := int(input.ReadShort())
	for i := 0; i < debtsLen; i++ {
		foundDebtInformation := getDynamicType(input)
		if castedDebtInformation, ok := foundDebtInformation.(DebtInformationI); ok {
			castedDebtInformation.Deserialize(input)
			m.Debts.Push(&castedDebtInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement DebtInformationI, got: " + fmt.Sprintf("%T", foundDebtInformation))
		}
	}
}

func (m *DebtsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DebugClearHighlightCellsMessage struct {
	MessageBase
}

func NewDebugClearHighlightCellsMessage() *DebugClearHighlightCellsMessage {
	return &DebugClearHighlightCellsMessage{MessageBase: MessageBase{MessageType_: "DebugClearHighlightCellsMessage", id_: 3737}}
}
func (m *DebugClearHighlightCellsMessage) Deserialize(input *DataWrapper) {
}

func (m *DebugClearHighlightCellsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DebugHighlightCellsMessage struct {
	MessageBase
	Color float64
	Cells *Vector[int]
}

func NewDebugHighlightCellsMessage() *DebugHighlightCellsMessage {
	return &DebugHighlightCellsMessage{MessageBase: MessageBase{MessageType_: "DebugHighlightCellsMessage", id_: 9357}}
}
func (m *DebugHighlightCellsMessage) Deserialize(input *DataWrapper) {
	m.Color = input.ReadDouble()
	m.Cells = NewVector[int]()
	cellsLen := int(input.ReadShort())
	for i := 0; i < cellsLen; i++ {
		val := input.ReadVarShort()
		m.Cells.Push(&val)
	}
}

func (m *DebugHighlightCellsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DebugInClientMessage struct {
	MessageBase
	Level   int8
	Message string
}

func NewDebugInClientMessage() *DebugInClientMessage {
	return &DebugInClientMessage{MessageBase: MessageBase{MessageType_: "DebugInClientMessage", id_: 6256}}
}
func (m *DebugInClientMessage) Deserialize(input *DataWrapper) {
	m.Level = input.ReadByte()
	m.Message = input.ReadUTF()
}

func (m *DebugInClientMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DecraftResultMessage struct {
	MessageBase
	Results *Vector[DecraftedItemStackInfo]
}

func NewDecraftResultMessage() *DecraftResultMessage {
	return &DecraftResultMessage{MessageBase: MessageBase{MessageType_: "DecraftResultMessage", id_: 3985}}
}
func (m *DecraftResultMessage) Deserialize(input *DataWrapper) {
	m.Results = NewVector[DecraftedItemStackInfo]()
	resultsLen := int(input.ReadShort())
	for i := 0; i < resultsLen; i++ {
		DecraftedItemStackInfo := NewDecraftedItemStackInfo()
		DecraftedItemStackInfo.Deserialize(input)
		m.Results.Push(DecraftedItemStackInfo)
	}
}

func (m *DecraftResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DecraftedItemStackInfo struct {
	MessageBase
	ObjectUID int
	BonusMin  float32
	BonusMax  float32
	RunesId   *Vector[int]
	RunesQty  *Vector[int]
}

func NewDecraftedItemStackInfo() *DecraftedItemStackInfo {
	return &DecraftedItemStackInfo{MessageBase: MessageBase{MessageType_: "DecraftedItemStackInfo", id_: 2478}}
}
func (m *DecraftedItemStackInfo) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.BonusMin = input.ReadFloat()
	m.BonusMax = input.ReadFloat()
	m.RunesId = NewVector[int]()
	runesIdLen := int(input.ReadShort())
	for i := 0; i < runesIdLen; i++ {
		val := input.ReadVarInt()
		m.RunesId.Push(&val)
	}
	m.RunesQty = NewVector[int]()
	runesQtyLen := int(input.ReadShort())
	for i := 0; i < runesQtyLen; i++ {
		val := input.ReadVarInt()
		m.RunesQty.Push(&val)
	}
}

func (m *DecraftedItemStackInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type DiceRollRequestMessage struct {
	MessageBase
	Dice    int
	Faces   int
	Channel int8
}

func NewDiceRollRequestMessage() *DiceRollRequestMessage {
	return &DiceRollRequestMessage{MessageBase: MessageBase{MessageType_: "DiceRollRequestMessage", id_: 8901}}
}
func (m *DiceRollRequestMessage) Deserialize(input *DataWrapper) {
	m.Dice = input.ReadVarUhInt()
	m.Faces = input.ReadVarUhInt()
	m.Channel = input.ReadByte()
}

func (m *DiceRollRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DisplayNumericalValuePaddockMessage struct {
	MessageBase
	RideId int32
	Value  int32
	Type   int8
}

func NewDisplayNumericalValuePaddockMessage() *DisplayNumericalValuePaddockMessage {
	return &DisplayNumericalValuePaddockMessage{MessageBase: MessageBase{MessageType_: "DisplayNumericalValuePaddockMessage", id_: 4632}}
}
func (m *DisplayNumericalValuePaddockMessage) Deserialize(input *DataWrapper) {
	m.RideId = input.ReadInt()
	m.Value = input.ReadInt()
	m.Type = input.ReadByte()
}

func (m *DisplayNumericalValuePaddockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DocumentReadingBeginMessage struct {
	MessageBase
	DocumentId int
}

func NewDocumentReadingBeginMessage() *DocumentReadingBeginMessage {
	return &DocumentReadingBeginMessage{MessageBase: MessageBase{MessageType_: "DocumentReadingBeginMessage", id_: 9246}}
}
func (m *DocumentReadingBeginMessage) Deserialize(input *DataWrapper) {
	m.DocumentId = input.ReadVarUhShort()
}

func (m *DocumentReadingBeginMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DumpedEntityStatsMessage struct {
	MessageBase
	ActorId float64
	Stats   *CharacterCharacteristics
}

func NewDumpedEntityStatsMessage() *DumpedEntityStatsMessage {
	return &DumpedEntityStatsMessage{MessageBase: MessageBase{MessageType_: "DumpedEntityStatsMessage", id_: 2370}}
}
func (m *DumpedEntityStatsMessage) Deserialize(input *DataWrapper) {
	m.ActorId = input.ReadDouble()
	m.Stats = NewCharacterCharacteristics()
	m.Stats.Deserialize(input)
}

func (m *DumpedEntityStatsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonKeyRingMessage struct {
	MessageBase
	Availables   *Vector[int]
	Unavailables *Vector[int]
}

func NewDungeonKeyRingMessage() *DungeonKeyRingMessage {
	return &DungeonKeyRingMessage{MessageBase: MessageBase{MessageType_: "DungeonKeyRingMessage", id_: 6819}}
}
func (m *DungeonKeyRingMessage) Deserialize(input *DataWrapper) {
	m.Availables = NewVector[int]()
	availablesLen := int(input.ReadShort())
	for i := 0; i < availablesLen; i++ {
		val := input.ReadVarShort()
		m.Availables.Push(&val)
	}
	m.Unavailables = NewVector[int]()
	unavailablesLen := int(input.ReadShort())
	for i := 0; i < unavailablesLen; i++ {
		val := input.ReadVarShort()
		m.Unavailables.Push(&val)
	}
}

func (m *DungeonKeyRingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonKeyRingUpdateMessage struct {
	MessageBase
	DungeonId int
	Available bool
}

func NewDungeonKeyRingUpdateMessage() *DungeonKeyRingUpdateMessage {
	return &DungeonKeyRingUpdateMessage{MessageBase: MessageBase{MessageType_: "DungeonKeyRingUpdateMessage", id_: 6518}}
}
func (m *DungeonKeyRingUpdateMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.Available = input.ReadBoolean()
}

func (m *DungeonKeyRingUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderAvailableDungeonsMessage struct {
	MessageBase
	DungeonIds *Vector[int]
}

func NewDungeonPartyFinderAvailableDungeonsMessage() *DungeonPartyFinderAvailableDungeonsMessage {
	return &DungeonPartyFinderAvailableDungeonsMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderAvailableDungeonsMessage", id_: 8056}}
}
func (m *DungeonPartyFinderAvailableDungeonsMessage) Deserialize(input *DataWrapper) {
	m.DungeonIds = NewVector[int]()
	dungeonIdsLen := int(input.ReadShort())
	for i := 0; i < dungeonIdsLen; i++ {
		val := input.ReadVarShort()
		m.DungeonIds.Push(&val)
	}
}

func (m *DungeonPartyFinderAvailableDungeonsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderAvailableDungeonsRequestMessage struct {
	MessageBase
}

func NewDungeonPartyFinderAvailableDungeonsRequestMessage() *DungeonPartyFinderAvailableDungeonsRequestMessage {
	return &DungeonPartyFinderAvailableDungeonsRequestMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderAvailableDungeonsRequestMessage", id_: 9426}}
}
func (m *DungeonPartyFinderAvailableDungeonsRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *DungeonPartyFinderAvailableDungeonsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderListenErrorMessage struct {
	MessageBase
	DungeonId int
}

func NewDungeonPartyFinderListenErrorMessage() *DungeonPartyFinderListenErrorMessage {
	return &DungeonPartyFinderListenErrorMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderListenErrorMessage", id_: 6905}}
}
func (m *DungeonPartyFinderListenErrorMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
}

func (m *DungeonPartyFinderListenErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderListenRequestMessage struct {
	MessageBase
	DungeonId int
}

func NewDungeonPartyFinderListenRequestMessage() *DungeonPartyFinderListenRequestMessage {
	return &DungeonPartyFinderListenRequestMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderListenRequestMessage", id_: 9359}}
}
func (m *DungeonPartyFinderListenRequestMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
}

func (m *DungeonPartyFinderListenRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderPlayer struct {
	MessageBase
	PlayerId   int64
	PlayerName string
	Breed      int8
	Sex        bool
	Level      int
}

func NewDungeonPartyFinderPlayer() *DungeonPartyFinderPlayer {
	return &DungeonPartyFinderPlayer{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderPlayer", id_: 1061}}
}
func (m *DungeonPartyFinderPlayer) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.Level = input.ReadVarUhShort()
}

func (m *DungeonPartyFinderPlayer) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderRegisterErrorMessage struct {
	MessageBase
}

func NewDungeonPartyFinderRegisterErrorMessage() *DungeonPartyFinderRegisterErrorMessage {
	return &DungeonPartyFinderRegisterErrorMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderRegisterErrorMessage", id_: 3226}}
}
func (m *DungeonPartyFinderRegisterErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *DungeonPartyFinderRegisterErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderRegisterRequestMessage struct {
	MessageBase
	DungeonIds *Vector[int]
}

func NewDungeonPartyFinderRegisterRequestMessage() *DungeonPartyFinderRegisterRequestMessage {
	return &DungeonPartyFinderRegisterRequestMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderRegisterRequestMessage", id_: 7102}}
}
func (m *DungeonPartyFinderRegisterRequestMessage) Deserialize(input *DataWrapper) {
	m.DungeonIds = NewVector[int]()
	dungeonIdsLen := int(input.ReadShort())
	for i := 0; i < dungeonIdsLen; i++ {
		val := input.ReadVarShort()
		m.DungeonIds.Push(&val)
	}
}

func (m *DungeonPartyFinderRegisterRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderRegisterSuccessMessage struct {
	MessageBase
	DungeonIds *Vector[int]
}

func NewDungeonPartyFinderRegisterSuccessMessage() *DungeonPartyFinderRegisterSuccessMessage {
	return &DungeonPartyFinderRegisterSuccessMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderRegisterSuccessMessage", id_: 9509}}
}
func (m *DungeonPartyFinderRegisterSuccessMessage) Deserialize(input *DataWrapper) {
	m.DungeonIds = NewVector[int]()
	dungeonIdsLen := int(input.ReadShort())
	for i := 0; i < dungeonIdsLen; i++ {
		val := input.ReadVarShort()
		m.DungeonIds.Push(&val)
	}
}

func (m *DungeonPartyFinderRegisterSuccessMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderRoomContentMessage struct {
	MessageBase
	DungeonId int
	Players   *Vector[DungeonPartyFinderPlayer]
}

func NewDungeonPartyFinderRoomContentMessage() *DungeonPartyFinderRoomContentMessage {
	return &DungeonPartyFinderRoomContentMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderRoomContentMessage", id_: 9524}}
}
func (m *DungeonPartyFinderRoomContentMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.Players = NewVector[DungeonPartyFinderPlayer]()
	playersLen := int(input.ReadShort())
	for i := 0; i < playersLen; i++ {
		DungeonPartyFinderPlayer := NewDungeonPartyFinderPlayer()
		DungeonPartyFinderPlayer.Deserialize(input)
		m.Players.Push(DungeonPartyFinderPlayer)
	}
}

func (m *DungeonPartyFinderRoomContentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type DungeonPartyFinderRoomContentUpdateMessage struct {
	MessageBase
	DungeonId         int
	AddedPlayers      *Vector[DungeonPartyFinderPlayer]
	RemovedPlayersIds *Vector[int64]
}

func NewDungeonPartyFinderRoomContentUpdateMessage() *DungeonPartyFinderRoomContentUpdateMessage {
	return &DungeonPartyFinderRoomContentUpdateMessage{MessageBase: MessageBase{MessageType_: "DungeonPartyFinderRoomContentUpdateMessage", id_: 5056}}
}
func (m *DungeonPartyFinderRoomContentUpdateMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.AddedPlayers = NewVector[DungeonPartyFinderPlayer]()
	addedPlayersLen := int(input.ReadShort())
	for i := 0; i < addedPlayersLen; i++ {
		DungeonPartyFinderPlayer := NewDungeonPartyFinderPlayer()
		DungeonPartyFinderPlayer.Deserialize(input)
		m.AddedPlayers.Push(DungeonPartyFinderPlayer)
	}
	m.RemovedPlayersIds = NewVector[int64]()
	removedPlayersIdsLen := int(input.ReadShort())
	for i := 0; i < removedPlayersIdsLen; i++ {
		val := input.ReadVarLong()
		m.RemovedPlayersIds.Push(&val)
	}
}

func (m *DungeonPartyFinderRoomContentUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EditHavenBagCancelRequestMessage struct {
	MessageBase
}

func NewEditHavenBagCancelRequestMessage() *EditHavenBagCancelRequestMessage {
	return &EditHavenBagCancelRequestMessage{MessageBase: MessageBase{MessageType_: "EditHavenBagCancelRequestMessage", id_: 8480}}
}
func (m *EditHavenBagCancelRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *EditHavenBagCancelRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EditHavenBagFinishedMessage struct {
	MessageBase
}

func NewEditHavenBagFinishedMessage() *EditHavenBagFinishedMessage {
	return &EditHavenBagFinishedMessage{MessageBase: MessageBase{MessageType_: "EditHavenBagFinishedMessage", id_: 2362}}
}
func (m *EditHavenBagFinishedMessage) Deserialize(input *DataWrapper) {
}

func (m *EditHavenBagFinishedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EditHavenBagRequestMessage struct {
	MessageBase
}

func NewEditHavenBagRequestMessage() *EditHavenBagRequestMessage {
	return &EditHavenBagRequestMessage{MessageBase: MessageBase{MessageType_: "EditHavenBagRequestMessage", id_: 6707}}
}
func (m *EditHavenBagRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *EditHavenBagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EditHavenBagStartMessage struct {
	MessageBase
}

func NewEditHavenBagStartMessage() *EditHavenBagStartMessage {
	return &EditHavenBagStartMessage{MessageBase: MessageBase{MessageType_: "EditHavenBagStartMessage", id_: 9417}}
}
func (m *EditHavenBagStartMessage) Deserialize(input *DataWrapper) {
}

func (m *EditHavenBagStartMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmoteAddMessage struct {
	MessageBase
	EmoteId uint16
}

func NewEmoteAddMessage() *EmoteAddMessage {
	return &EmoteAddMessage{MessageBase: MessageBase{MessageType_: "EmoteAddMessage", id_: 2112}}
}
func (m *EmoteAddMessage) Deserialize(input *DataWrapper) {
	m.EmoteId = input.ReadUnsignedShort()
}

func (m *EmoteAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmoteListMessage struct {
	MessageBase
	EmoteIds *Vector[int16]
}

func NewEmoteListMessage() *EmoteListMessage {
	return &EmoteListMessage{MessageBase: MessageBase{MessageType_: "EmoteListMessage", id_: 6038}}
}
func (m *EmoteListMessage) Deserialize(input *DataWrapper) {
	m.EmoteIds = NewVector[int16]()
	emoteIdsLen := int(input.ReadShort())
	for i := 0; i < emoteIdsLen; i++ {
		val := input.ReadShort()
		m.EmoteIds.Push(&val)
	}
}

func (m *EmoteListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmotePlayAbstractMessage struct {
	MessageBase
	EmoteId        uint16
	EmoteStartTime float64
}

func NewEmotePlayAbstractMessage() *EmotePlayAbstractMessage {
	return &EmotePlayAbstractMessage{MessageBase: MessageBase{MessageType_: "EmotePlayAbstractMessage", id_: 8135}}
}
func (m *EmotePlayAbstractMessage) Deserialize(input *DataWrapper) {
	m.EmoteId = input.ReadUnsignedShort()
	m.EmoteStartTime = input.ReadDouble()
}

func (m *EmotePlayAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmotePlayErrorMessage struct {
	MessageBase
	EmoteId uint16
}

func NewEmotePlayErrorMessage() *EmotePlayErrorMessage {
	return &EmotePlayErrorMessage{MessageBase: MessageBase{MessageType_: "EmotePlayErrorMessage", id_: 7853}}
}
func (m *EmotePlayErrorMessage) Deserialize(input *DataWrapper) {
	m.EmoteId = input.ReadUnsignedShort()
}

func (m *EmotePlayErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmotePlayMassiveMessage struct {
	MessageBase
	EmotePlayAbstractMessage
	ActorIds *Vector[float64]
}

func NewEmotePlayMassiveMessage() *EmotePlayMassiveMessage {
	return &EmotePlayMassiveMessage{MessageBase: MessageBase{MessageType_: "EmotePlayMassiveMessage", id_: 1886}}
}
func (m *EmotePlayMassiveMessage) Deserialize(input *DataWrapper) {
	m.EmotePlayAbstractMessage.Deserialize(input)
	m.ActorIds = NewVector[float64]()
	actorIdsLen := int(input.ReadShort())
	for i := 0; i < actorIdsLen; i++ {
		val := input.ReadDouble()
		m.ActorIds.Push(&val)
	}
}

func (m *EmotePlayMassiveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmotePlayMessage struct {
	MessageBase
	EmotePlayAbstractMessage
	ActorId   float64
	AccountId int32
}

func NewEmotePlayMessage() *EmotePlayMessage {
	return &EmotePlayMessage{MessageBase: MessageBase{MessageType_: "EmotePlayMessage", id_: 3198}}
}
func (m *EmotePlayMessage) Deserialize(input *DataWrapper) {
	m.EmotePlayAbstractMessage.Deserialize(input)
	m.ActorId = input.ReadDouble()
	m.AccountId = input.ReadInt()
}

func (m *EmotePlayMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmotePlayRequestMessage struct {
	MessageBase
	EmoteId uint16
}

func NewEmotePlayRequestMessage() *EmotePlayRequestMessage {
	return &EmotePlayRequestMessage{MessageBase: MessageBase{MessageType_: "EmotePlayRequestMessage", id_: 7754}}
}
func (m *EmotePlayRequestMessage) Deserialize(input *DataWrapper) {
	m.EmoteId = input.ReadUnsignedShort()
}

func (m *EmotePlayRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EmoteRemoveMessage struct {
	MessageBase
	EmoteId uint16
}

func NewEmoteRemoveMessage() *EmoteRemoveMessage {
	return &EmoteRemoveMessage{MessageBase: MessageBase{MessageType_: "EmoteRemoveMessage", id_: 4524}}
}
func (m *EmoteRemoveMessage) Deserialize(input *DataWrapper) {
	m.EmoteId = input.ReadUnsignedShort()
}

func (m *EmoteRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EnabledChannelsMessage struct {
	MessageBase
	Channels   *Vector[int8]
	Disallowed *Vector[int8]
}

func NewEnabledChannelsMessage() *EnabledChannelsMessage {
	return &EnabledChannelsMessage{MessageBase: MessageBase{MessageType_: "EnabledChannelsMessage", id_: 2625}}
}
func (m *EnabledChannelsMessage) Deserialize(input *DataWrapper) {
	m.Channels = NewVector[int8]()
	channelsLen := int(input.ReadShort())
	for i := 0; i < channelsLen; i++ {
		val := input.ReadByte()
		m.Channels.Push(&val)
	}
	m.Disallowed = NewVector[int8]()
	disallowedLen := int(input.ReadShort())
	for i := 0; i < disallowedLen; i++ {
		val := input.ReadByte()
		m.Disallowed.Push(&val)
	}
}

func (m *EnabledChannelsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EnterHavenBagRequestMessage struct {
	MessageBase
	HavenBagOwner int64
}

func NewEnterHavenBagRequestMessage() *EnterHavenBagRequestMessage {
	return &EnterHavenBagRequestMessage{MessageBase: MessageBase{MessageType_: "EnterHavenBagRequestMessage", id_: 4036}}
}
func (m *EnterHavenBagRequestMessage) Deserialize(input *DataWrapper) {
	m.HavenBagOwner = input.ReadVarUhLong()
}

func (m *EnterHavenBagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EntitiesInformationMessage struct {
	MessageBase
	Entities *Vector[EntityInformation]
}

func NewEntitiesInformationMessage() *EntitiesInformationMessage {
	return &EntitiesInformationMessage{MessageBase: MessageBase{MessageType_: "EntitiesInformationMessage", id_: 266}}
}
func (m *EntitiesInformationMessage) Deserialize(input *DataWrapper) {
	m.Entities = NewVector[EntityInformation]()
	entitiesLen := int(input.ReadShort())
	for i := 0; i < entitiesLen; i++ {
		EntityInformation := NewEntityInformation()
		EntityInformation.Deserialize(input)
		m.Entities.Push(EntityInformation)
	}
}

func (m *EntitiesInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EntitiesPreset struct {
	MessageBase
	Preset
	IconId    int16
	EntityIds *Vector[int]
}

func NewEntitiesPreset() *EntitiesPreset {
	return &EntitiesPreset{MessageBase: MessageBase{MessageType_: "EntitiesPreset", id_: 6250}}
}
func (m *EntitiesPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.IconId = input.ReadShort()
	m.EntityIds = NewVector[int]()
	entityIdsLen := int(input.ReadShort())
	for i := 0; i < entityIdsLen; i++ {
		val := input.ReadVarShort()
		m.EntityIds.Push(&val)
	}
}

func (m *EntitiesPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityDispositionInformationsI interface {
	Deserialize(input *DataWrapper)
}

type EntityDispositionInformations struct {
	MessageBase
	CellId    int16
	Direction int8
}

func NewEntityDispositionInformations() *EntityDispositionInformations {
	return &EntityDispositionInformations{MessageBase: MessageBase{MessageType_: "EntityDispositionInformations", id_: 2447}}
}
func (m *EntityDispositionInformations) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadShort()
	m.Direction = input.ReadByte()
}

func (m *EntityDispositionInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityInformation struct {
	MessageBase
	Id         int
	Experience int
	Status     bool
}

func NewEntityInformation() *EntityInformation {
	return &EntityInformation{MessageBase: MessageBase{MessageType_: "EntityInformation", id_: 9779}}
}
func (m *EntityInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhShort()
	m.Experience = input.ReadVarUhInt()
	m.Status = input.ReadBoolean()
}

func (m *EntityInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityInformationMessage struct {
	MessageBase
	Entity *EntityInformation
}

func NewEntityInformationMessage() *EntityInformationMessage {
	return &EntityInformationMessage{MessageBase: MessageBase{MessageType_: "EntityInformationMessage", id_: 6850}}
}
func (m *EntityInformationMessage) Deserialize(input *DataWrapper) {
	m.Entity = NewEntityInformation()
	m.Entity.Deserialize(input)
}

func (m *EntityInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityLook struct {
	MessageBase
	BonesId       int
	Skins         *Vector[int]
	IndexedColors *Vector[int32]
	Scales        *Vector[int]
	Subentities   *Vector[SubEntity]
}

func NewEntityLook() *EntityLook {
	return &EntityLook{MessageBase: MessageBase{MessageType_: "EntityLook", id_: 6640}}
}
func (m *EntityLook) Deserialize(input *DataWrapper) {
	m.BonesId = input.ReadVarUhShort()
	m.Skins = NewVector[int]()
	skinsLen := int(input.ReadShort())
	for i := 0; i < skinsLen; i++ {
		val := input.ReadVarShort()
		m.Skins.Push(&val)
	}
	m.IndexedColors = NewVector[int32]()
	indexedColorsLen := int(input.ReadShort())
	for i := 0; i < indexedColorsLen; i++ {
		val := input.ReadInt()
		m.IndexedColors.Push(&val)
	}
	m.Scales = NewVector[int]()
	scalesLen := int(input.ReadShort())
	for i := 0; i < scalesLen; i++ {
		val := input.ReadVarShort()
		m.Scales.Push(&val)
	}
	m.Subentities = NewVector[SubEntity]()
	subentitiesLen := int(input.ReadShort())
	for i := 0; i < subentitiesLen; i++ {
		SubEntity := NewSubEntity()
		SubEntity.Deserialize(input)
		m.Subentities.Push(SubEntity)
	}
}

func (m *EntityLook) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityMovementInformations struct {
	MessageBase
	Id    int32
	Steps *Vector[int8]
}

func NewEntityMovementInformations() *EntityMovementInformations {
	return &EntityMovementInformations{MessageBase: MessageBase{MessageType_: "EntityMovementInformations", id_: 4990}}
}
func (m *EntityMovementInformations) Deserialize(input *DataWrapper) {
	m.Id = input.ReadInt()
	m.Steps = NewVector[int8]()
	stepsLen := int(input.ReadShort())
	for i := 0; i < stepsLen; i++ {
		val := input.ReadByte()
		m.Steps.Push(&val)
	}
}

func (m *EntityMovementInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type EntityTalkMessage struct {
	MessageBase
	EntityId   float64
	TextId     int
	Parameters *Vector[string]
}

func NewEntityTalkMessage() *EntityTalkMessage {
	return &EntityTalkMessage{MessageBase: MessageBase{MessageType_: "EntityTalkMessage", id_: 1171}}
}
func (m *EntityTalkMessage) Deserialize(input *DataWrapper) {
	m.EntityId = input.ReadDouble()
	m.TextId = input.ReadVarUhShort()
	m.Parameters = NewVector[string]()
	parametersLen := int(input.ReadShort())
	for i := 0; i < parametersLen; i++ {
		val := input.ReadUTF()
		m.Parameters.Push(&val)
	}
}

func (m *EntityTalkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ErrorMapNotFoundMessage struct {
	MessageBase
	MapId float64
}

func NewErrorMapNotFoundMessage() *ErrorMapNotFoundMessage {
	return &ErrorMapNotFoundMessage{MessageBase: MessageBase{MessageType_: "ErrorMapNotFoundMessage", id_: 8967}}
}
func (m *ErrorMapNotFoundMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
}

func (m *ErrorMapNotFoundMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type EvolutiveObjectRecycleResultMessage struct {
	MessageBase
	RecycledItems *Vector[RecycledItem]
}

func NewEvolutiveObjectRecycleResultMessage() *EvolutiveObjectRecycleResultMessage {
	return &EvolutiveObjectRecycleResultMessage{MessageBase: MessageBase{MessageType_: "EvolutiveObjectRecycleResultMessage", id_: 5637}}
}
func (m *EvolutiveObjectRecycleResultMessage) Deserialize(input *DataWrapper) {
	m.RecycledItems = NewVector[RecycledItem]()
	recycledItemsLen := int(input.ReadShort())
	for i := 0; i < recycledItemsLen; i++ {
		RecycledItem := NewRecycledItem()
		RecycledItem.Deserialize(input)
		m.RecycledItems.Push(RecycledItem)
	}
}

func (m *EvolutiveObjectRecycleResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeAcceptMessage struct {
	MessageBase
}

func NewExchangeAcceptMessage() *ExchangeAcceptMessage {
	return &ExchangeAcceptMessage{MessageBase: MessageBase{MessageType_: "ExchangeAcceptMessage", id_: 804}}
}
func (m *ExchangeAcceptMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeAcceptMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseBuyMessage struct {
	MessageBase
	Uid   int
	Qty   int
	Price int64
}

func NewExchangeBidHouseBuyMessage() *ExchangeBidHouseBuyMessage {
	return &ExchangeBidHouseBuyMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseBuyMessage", id_: 3820}}
}
func (m *ExchangeBidHouseBuyMessage) Deserialize(input *DataWrapper) {
	m.Uid = input.ReadVarUhInt()
	m.Qty = input.ReadVarUhInt()
	m.Price = input.ReadVarUhLong()
}

func (m *ExchangeBidHouseBuyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseBuyResultMessage struct {
	MessageBase
	Uid    int
	Bought bool
}

func NewExchangeBidHouseBuyResultMessage() *ExchangeBidHouseBuyResultMessage {
	return &ExchangeBidHouseBuyResultMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseBuyResultMessage", id_: 2613}}
}
func (m *ExchangeBidHouseBuyResultMessage) Deserialize(input *DataWrapper) {
	m.Uid = input.ReadVarUhInt()
	m.Bought = input.ReadBoolean()
}

func (m *ExchangeBidHouseBuyResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseGenericItemAddedMessage struct {
	MessageBase
	ObjGenericId int
}

func NewExchangeBidHouseGenericItemAddedMessage() *ExchangeBidHouseGenericItemAddedMessage {
	return &ExchangeBidHouseGenericItemAddedMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseGenericItemAddedMessage", id_: 3696}}
}
func (m *ExchangeBidHouseGenericItemAddedMessage) Deserialize(input *DataWrapper) {
	m.ObjGenericId = input.ReadVarUhInt()
}

func (m *ExchangeBidHouseGenericItemAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseGenericItemRemovedMessage struct {
	MessageBase
	ObjGenericId int
}

func NewExchangeBidHouseGenericItemRemovedMessage() *ExchangeBidHouseGenericItemRemovedMessage {
	return &ExchangeBidHouseGenericItemRemovedMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseGenericItemRemovedMessage", id_: 3347}}
}
func (m *ExchangeBidHouseGenericItemRemovedMessage) Deserialize(input *DataWrapper) {
	m.ObjGenericId = input.ReadVarUhInt()
}

func (m *ExchangeBidHouseGenericItemRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseInListAddedMessage struct {
	MessageBase
	ItemUID    int32
	ObjectGID  int
	ObjectType int32
	Effects    *Vector[ObjectEffectI]
	Prices     *Vector[int64]
}

func NewExchangeBidHouseInListAddedMessage() *ExchangeBidHouseInListAddedMessage {
	return &ExchangeBidHouseInListAddedMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseInListAddedMessage", id_: 9001}}
}
func (m *ExchangeBidHouseInListAddedMessage) Deserialize(input *DataWrapper) {
	m.ItemUID = input.ReadInt()
	m.ObjectGID = input.ReadVarUhInt()
	m.ObjectType = input.ReadInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
	m.Prices = NewVector[int64]()
	pricesLen := int(input.ReadShort())
	for i := 0; i < pricesLen; i++ {
		val := input.ReadVarLong()
		m.Prices.Push(&val)
	}
}

func (m *ExchangeBidHouseInListAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseInListRemovedMessage struct {
	MessageBase
	ItemUID    int32
	ObjectGID  int
	ObjectType int32
}

func NewExchangeBidHouseInListRemovedMessage() *ExchangeBidHouseInListRemovedMessage {
	return &ExchangeBidHouseInListRemovedMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseInListRemovedMessage", id_: 4180}}
}
func (m *ExchangeBidHouseInListRemovedMessage) Deserialize(input *DataWrapper) {
	m.ItemUID = input.ReadInt()
	m.ObjectGID = input.ReadVarUhInt()
	m.ObjectType = input.ReadInt()
}

func (m *ExchangeBidHouseInListRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseInListUpdatedMessage struct {
	MessageBase
	ExchangeBidHouseInListAddedMessage
}

func NewExchangeBidHouseInListUpdatedMessage() *ExchangeBidHouseInListUpdatedMessage {
	return &ExchangeBidHouseInListUpdatedMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseInListUpdatedMessage", id_: 9240}}
}
func (m *ExchangeBidHouseInListUpdatedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeBidHouseInListAddedMessage.Deserialize(input)
}

func (m *ExchangeBidHouseInListUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseItemAddOkMessage struct {
	MessageBase
	ItemInfo *ObjectItemToSellInBid
}

func NewExchangeBidHouseItemAddOkMessage() *ExchangeBidHouseItemAddOkMessage {
	return &ExchangeBidHouseItemAddOkMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseItemAddOkMessage", id_: 1557}}
}
func (m *ExchangeBidHouseItemAddOkMessage) Deserialize(input *DataWrapper) {
	m.ItemInfo = NewObjectItemToSellInBid()
	m.ItemInfo.Deserialize(input)
}

func (m *ExchangeBidHouseItemAddOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseItemRemoveOkMessage struct {
	MessageBase
	SellerId int32
}

func NewExchangeBidHouseItemRemoveOkMessage() *ExchangeBidHouseItemRemoveOkMessage {
	return &ExchangeBidHouseItemRemoveOkMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseItemRemoveOkMessage", id_: 8101}}
}
func (m *ExchangeBidHouseItemRemoveOkMessage) Deserialize(input *DataWrapper) {
	m.SellerId = input.ReadInt()
}

func (m *ExchangeBidHouseItemRemoveOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseListMessage struct {
	MessageBase
	ObjectGID int
	Follow    bool
}

func NewExchangeBidHouseListMessage() *ExchangeBidHouseListMessage {
	return &ExchangeBidHouseListMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseListMessage", id_: 6171}}
}
func (m *ExchangeBidHouseListMessage) Deserialize(input *DataWrapper) {
	m.ObjectGID = input.ReadVarUhInt()
	m.Follow = input.ReadBoolean()
}

func (m *ExchangeBidHouseListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHousePriceMessage struct {
	MessageBase
	ObjectGID int
}

func NewExchangeBidHousePriceMessage() *ExchangeBidHousePriceMessage {
	return &ExchangeBidHousePriceMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHousePriceMessage", id_: 1454}}
}
func (m *ExchangeBidHousePriceMessage) Deserialize(input *DataWrapper) {
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *ExchangeBidHousePriceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseSearchMessage struct {
	MessageBase
	ObjectGID int
	Follow    bool
}

func NewExchangeBidHouseSearchMessage() *ExchangeBidHouseSearchMessage {
	return &ExchangeBidHouseSearchMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseSearchMessage", id_: 5862}}
}
func (m *ExchangeBidHouseSearchMessage) Deserialize(input *DataWrapper) {
	m.ObjectGID = input.ReadVarUhInt()
	m.Follow = input.ReadBoolean()
}

func (m *ExchangeBidHouseSearchMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseTypeMessage struct {
	MessageBase
	Type   int
	Follow bool
}

func NewExchangeBidHouseTypeMessage() *ExchangeBidHouseTypeMessage {
	return &ExchangeBidHouseTypeMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseTypeMessage", id_: 8802}}
}
func (m *ExchangeBidHouseTypeMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadVarUhInt()
	m.Follow = input.ReadBoolean()
}

func (m *ExchangeBidHouseTypeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidHouseUnsoldItemsMessage struct {
	MessageBase
	Items *Vector[ObjectItemGenericQuantity]
}

func NewExchangeBidHouseUnsoldItemsMessage() *ExchangeBidHouseUnsoldItemsMessage {
	return &ExchangeBidHouseUnsoldItemsMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidHouseUnsoldItemsMessage", id_: 9295}}
}
func (m *ExchangeBidHouseUnsoldItemsMessage) Deserialize(input *DataWrapper) {
	m.Items = NewVector[ObjectItemGenericQuantity]()
	itemsLen := int(input.ReadShort())
	for i := 0; i < itemsLen; i++ {
		ObjectItemGenericQuantity := NewObjectItemGenericQuantity()
		ObjectItemGenericQuantity.Deserialize(input)
		m.Items.Push(ObjectItemGenericQuantity)
	}
}

func (m *ExchangeBidHouseUnsoldItemsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidPriceForSellerMessage struct {
	MessageBase
	ExchangeBidPriceMessage
	AllIdentical  bool
	MinimalPrices *Vector[int64]
}

func NewExchangeBidPriceForSellerMessage() *ExchangeBidPriceForSellerMessage {
	return &ExchangeBidPriceForSellerMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidPriceForSellerMessage", id_: 7209}}
}
func (m *ExchangeBidPriceForSellerMessage) Deserialize(input *DataWrapper) {
	m.ExchangeBidPriceMessage.Deserialize(input)
	m.AllIdentical = input.ReadBoolean()
	m.MinimalPrices = NewVector[int64]()
	minimalPricesLen := int(input.ReadShort())
	for i := 0; i < minimalPricesLen; i++ {
		val := input.ReadVarLong()
		m.MinimalPrices.Push(&val)
	}
}

func (m *ExchangeBidPriceForSellerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidPriceMessage struct {
	MessageBase
	GenericId    int
	AveragePrice int64
}

func NewExchangeBidPriceMessage() *ExchangeBidPriceMessage {
	return &ExchangeBidPriceMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidPriceMessage", id_: 4274}}
}
func (m *ExchangeBidPriceMessage) Deserialize(input *DataWrapper) {
	m.GenericId = input.ReadVarUhInt()
	m.AveragePrice = input.ReadVarLong()
}

func (m *ExchangeBidPriceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBidSearchOkMessage struct {
	MessageBase
}

func NewExchangeBidSearchOkMessage() *ExchangeBidSearchOkMessage {
	return &ExchangeBidSearchOkMessage{MessageBase: MessageBase{MessageType_: "ExchangeBidSearchOkMessage", id_: 8956}}
}
func (m *ExchangeBidSearchOkMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeBidSearchOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBuyMessage struct {
	MessageBase
	ObjectToBuyId int
	Quantity      int
}

func NewExchangeBuyMessage() *ExchangeBuyMessage {
	return &ExchangeBuyMessage{MessageBase: MessageBase{MessageType_: "ExchangeBuyMessage", id_: 4582}}
}
func (m *ExchangeBuyMessage) Deserialize(input *DataWrapper) {
	m.ObjectToBuyId = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ExchangeBuyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeBuyOkMessage struct {
	MessageBase
}

func NewExchangeBuyOkMessage() *ExchangeBuyOkMessage {
	return &ExchangeBuyOkMessage{MessageBase: MessageBase{MessageType_: "ExchangeBuyOkMessage", id_: 9839}}
}
func (m *ExchangeBuyOkMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeBuyOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftCountModifiedMessage struct {
	MessageBase
	Count int
}

func NewExchangeCraftCountModifiedMessage() *ExchangeCraftCountModifiedMessage {
	return &ExchangeCraftCountModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftCountModifiedMessage", id_: 7440}}
}
func (m *ExchangeCraftCountModifiedMessage) Deserialize(input *DataWrapper) {
	m.Count = input.ReadVarInt()
}

func (m *ExchangeCraftCountModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftCountRequestMessage struct {
	MessageBase
	Count int
}

func NewExchangeCraftCountRequestMessage() *ExchangeCraftCountRequestMessage {
	return &ExchangeCraftCountRequestMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftCountRequestMessage", id_: 7189}}
}
func (m *ExchangeCraftCountRequestMessage) Deserialize(input *DataWrapper) {
	m.Count = input.ReadVarInt()
}

func (m *ExchangeCraftCountRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftPaymentModificationRequestMessage struct {
	MessageBase
	Quantity int64
}

func NewExchangeCraftPaymentModificationRequestMessage() *ExchangeCraftPaymentModificationRequestMessage {
	return &ExchangeCraftPaymentModificationRequestMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftPaymentModificationRequestMessage", id_: 2392}}
}
func (m *ExchangeCraftPaymentModificationRequestMessage) Deserialize(input *DataWrapper) {
	m.Quantity = input.ReadVarUhLong()
}

func (m *ExchangeCraftPaymentModificationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftPaymentModifiedMessage struct {
	MessageBase
	GoldSum int64
}

func NewExchangeCraftPaymentModifiedMessage() *ExchangeCraftPaymentModifiedMessage {
	return &ExchangeCraftPaymentModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftPaymentModifiedMessage", id_: 2319}}
}
func (m *ExchangeCraftPaymentModifiedMessage) Deserialize(input *DataWrapper) {
	m.GoldSum = input.ReadVarUhLong()
}

func (m *ExchangeCraftPaymentModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftResultMagicWithObjectDescMessage struct {
	MessageBase
	ExchangeCraftResultWithObjectDescMessage
	MagicPoolStatus int8
}

func NewExchangeCraftResultMagicWithObjectDescMessage() *ExchangeCraftResultMagicWithObjectDescMessage {
	return &ExchangeCraftResultMagicWithObjectDescMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftResultMagicWithObjectDescMessage", id_: 95}}
}
func (m *ExchangeCraftResultMagicWithObjectDescMessage) Deserialize(input *DataWrapper) {
	m.ExchangeCraftResultWithObjectDescMessage.Deserialize(input)
	m.MagicPoolStatus = input.ReadByte()
}

func (m *ExchangeCraftResultMagicWithObjectDescMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftResultMessage struct {
	MessageBase
	CraftResult int8
}

func NewExchangeCraftResultMessage() *ExchangeCraftResultMessage {
	return &ExchangeCraftResultMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftResultMessage", id_: 7869}}
}
func (m *ExchangeCraftResultMessage) Deserialize(input *DataWrapper) {
	m.CraftResult = input.ReadByte()
}

func (m *ExchangeCraftResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftResultWithObjectDescMessage struct {
	MessageBase
	ExchangeCraftResultMessage
	ObjectInfo *ObjectItemNotInContainer
}

func NewExchangeCraftResultWithObjectDescMessage() *ExchangeCraftResultWithObjectDescMessage {
	return &ExchangeCraftResultWithObjectDescMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftResultWithObjectDescMessage", id_: 4819}}
}
func (m *ExchangeCraftResultWithObjectDescMessage) Deserialize(input *DataWrapper) {
	m.ExchangeCraftResultMessage.Deserialize(input)
	m.ObjectInfo = NewObjectItemNotInContainer()
	m.ObjectInfo.Deserialize(input)
}

func (m *ExchangeCraftResultWithObjectDescMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCraftResultWithObjectIdMessage struct {
	MessageBase
	ExchangeCraftResultMessage
	ObjectGenericId int
}

func NewExchangeCraftResultWithObjectIdMessage() *ExchangeCraftResultWithObjectIdMessage {
	return &ExchangeCraftResultWithObjectIdMessage{MessageBase: MessageBase{MessageType_: "ExchangeCraftResultWithObjectIdMessage", id_: 1423}}
}
func (m *ExchangeCraftResultWithObjectIdMessage) Deserialize(input *DataWrapper) {
	m.ExchangeCraftResultMessage.Deserialize(input)
	m.ObjectGenericId = input.ReadVarUhInt()
}

func (m *ExchangeCraftResultWithObjectIdMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeCrafterJobLevelupMessage struct {
	MessageBase
	CrafterJobLevel uint8
}

func NewExchangeCrafterJobLevelupMessage() *ExchangeCrafterJobLevelupMessage {
	return &ExchangeCrafterJobLevelupMessage{MessageBase: MessageBase{MessageType_: "ExchangeCrafterJobLevelupMessage", id_: 2584}}
}
func (m *ExchangeCrafterJobLevelupMessage) Deserialize(input *DataWrapper) {
	m.CrafterJobLevel = input.ReadUnsignedByte()
}

func (m *ExchangeCrafterJobLevelupMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeErrorMessage struct {
	MessageBase
	ErrorType int8
}

func NewExchangeErrorMessage() *ExchangeErrorMessage {
	return &ExchangeErrorMessage{MessageBase: MessageBase{MessageType_: "ExchangeErrorMessage", id_: 9232}}
}
func (m *ExchangeErrorMessage) Deserialize(input *DataWrapper) {
	m.ErrorType = input.ReadByte()
}

func (m *ExchangeErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeHandleMountsMessage struct {
	MessageBase
	ActionType int8
	RidesId    *Vector[int]
}

func NewExchangeHandleMountsMessage() *ExchangeHandleMountsMessage {
	return &ExchangeHandleMountsMessage{MessageBase: MessageBase{MessageType_: "ExchangeHandleMountsMessage", id_: 3319}}
}
func (m *ExchangeHandleMountsMessage) Deserialize(input *DataWrapper) {
	m.ActionType = input.ReadByte()
	m.RidesId = NewVector[int]()
	ridesIdLen := int(input.ReadShort())
	for i := 0; i < ridesIdLen; i++ {
		val := input.ReadVarInt()
		m.RidesId.Push(&val)
	}
}

func (m *ExchangeHandleMountsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeIsReadyMessage struct {
	MessageBase
	Id    float64
	Ready bool
}

func NewExchangeIsReadyMessage() *ExchangeIsReadyMessage {
	return &ExchangeIsReadyMessage{MessageBase: MessageBase{MessageType_: "ExchangeIsReadyMessage", id_: 4377}}
}
func (m *ExchangeIsReadyMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.Ready = input.ReadBoolean()
}

func (m *ExchangeIsReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeItemAutoCraftStopedMessage struct {
	MessageBase
	Reason int8
}

func NewExchangeItemAutoCraftStopedMessage() *ExchangeItemAutoCraftStopedMessage {
	return &ExchangeItemAutoCraftStopedMessage{MessageBase: MessageBase{MessageType_: "ExchangeItemAutoCraftStopedMessage", id_: 5298}}
}
func (m *ExchangeItemAutoCraftStopedMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *ExchangeItemAutoCraftStopedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeKamaModifiedMessage struct {
	MessageBase
	ExchangeObjectMessage
	Quantity int64
}

func NewExchangeKamaModifiedMessage() *ExchangeKamaModifiedMessage {
	return &ExchangeKamaModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangeKamaModifiedMessage", id_: 4910}}
}
func (m *ExchangeKamaModifiedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Quantity = input.ReadVarUhLong()
}

func (m *ExchangeKamaModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeLeaveMessage struct {
	MessageBase
	LeaveDialogMessage
	Success bool
}

func NewExchangeLeaveMessage() *ExchangeLeaveMessage {
	return &ExchangeLeaveMessage{MessageBase: MessageBase{MessageType_: "ExchangeLeaveMessage", id_: 384}}
}
func (m *ExchangeLeaveMessage) Deserialize(input *DataWrapper) {
	m.LeaveDialogMessage.Deserialize(input)
	m.Success = input.ReadBoolean()
}

func (m *ExchangeLeaveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMoneyMovementInformationMessage struct {
	MessageBase
	Limit int64
}

func NewExchangeMoneyMovementInformationMessage() *ExchangeMoneyMovementInformationMessage {
	return &ExchangeMoneyMovementInformationMessage{MessageBase: MessageBase{MessageType_: "ExchangeMoneyMovementInformationMessage", id_: 6145}}
}
func (m *ExchangeMoneyMovementInformationMessage) Deserialize(input *DataWrapper) {
	m.Limit = input.ReadVarUhLong()
}

func (m *ExchangeMoneyMovementInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountFreeFromPaddockMessage struct {
	MessageBase
	Name      string
	WorldX    int16
	WorldY    int16
	Liberator string
}

func NewExchangeMountFreeFromPaddockMessage() *ExchangeMountFreeFromPaddockMessage {
	return &ExchangeMountFreeFromPaddockMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountFreeFromPaddockMessage", id_: 4615}}
}
func (m *ExchangeMountFreeFromPaddockMessage) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.Liberator = input.ReadUTF()
}

func (m *ExchangeMountFreeFromPaddockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountStableErrorMessage struct {
	MessageBase
}

func NewExchangeMountStableErrorMessage() *ExchangeMountStableErrorMessage {
	return &ExchangeMountStableErrorMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountStableErrorMessage", id_: 5267}}
}
func (m *ExchangeMountStableErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeMountStableErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountSterilizeFromPaddockMessage struct {
	MessageBase
	Name         string
	WorldX       int16
	WorldY       int16
	Sterilizator string
}

func NewExchangeMountSterilizeFromPaddockMessage() *ExchangeMountSterilizeFromPaddockMessage {
	return &ExchangeMountSterilizeFromPaddockMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountSterilizeFromPaddockMessage", id_: 7996}}
}
func (m *ExchangeMountSterilizeFromPaddockMessage) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.Sterilizator = input.ReadUTF()
}

func (m *ExchangeMountSterilizeFromPaddockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsPaddockAddMessage struct {
	MessageBase
	MountDescription *Vector[MountClientData]
}

func NewExchangeMountsPaddockAddMessage() *ExchangeMountsPaddockAddMessage {
	return &ExchangeMountsPaddockAddMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsPaddockAddMessage", id_: 8350}}
}
func (m *ExchangeMountsPaddockAddMessage) Deserialize(input *DataWrapper) {
	m.MountDescription = NewVector[MountClientData]()
	mountDescriptionLen := int(input.ReadShort())
	for i := 0; i < mountDescriptionLen; i++ {
		MountClientData := NewMountClientData()
		MountClientData.Deserialize(input)
		m.MountDescription.Push(MountClientData)
	}
}

func (m *ExchangeMountsPaddockAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsPaddockRemoveMessage struct {
	MessageBase
	MountsId *Vector[int]
}

func NewExchangeMountsPaddockRemoveMessage() *ExchangeMountsPaddockRemoveMessage {
	return &ExchangeMountsPaddockRemoveMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsPaddockRemoveMessage", id_: 9608}}
}
func (m *ExchangeMountsPaddockRemoveMessage) Deserialize(input *DataWrapper) {
	m.MountsId = NewVector[int]()
	mountsIdLen := int(input.ReadShort())
	for i := 0; i < mountsIdLen; i++ {
		val := input.ReadVarInt()
		m.MountsId.Push(&val)
	}
}

func (m *ExchangeMountsPaddockRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsStableAddMessage struct {
	MessageBase
	MountDescription *Vector[MountClientData]
}

func NewExchangeMountsStableAddMessage() *ExchangeMountsStableAddMessage {
	return &ExchangeMountsStableAddMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsStableAddMessage", id_: 9743}}
}
func (m *ExchangeMountsStableAddMessage) Deserialize(input *DataWrapper) {
	m.MountDescription = NewVector[MountClientData]()
	mountDescriptionLen := int(input.ReadShort())
	for i := 0; i < mountDescriptionLen; i++ {
		MountClientData := NewMountClientData()
		MountClientData.Deserialize(input)
		m.MountDescription.Push(MountClientData)
	}
}

func (m *ExchangeMountsStableAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsStableBornAddMessage struct {
	MessageBase
	ExchangeMountsStableAddMessage
}

func NewExchangeMountsStableBornAddMessage() *ExchangeMountsStableBornAddMessage {
	return &ExchangeMountsStableBornAddMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsStableBornAddMessage", id_: 2861}}
}
func (m *ExchangeMountsStableBornAddMessage) Deserialize(input *DataWrapper) {
	m.ExchangeMountsStableAddMessage.Deserialize(input)
}

func (m *ExchangeMountsStableBornAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsStableRemoveMessage struct {
	MessageBase
	MountsId *Vector[int]
}

func NewExchangeMountsStableRemoveMessage() *ExchangeMountsStableRemoveMessage {
	return &ExchangeMountsStableRemoveMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsStableRemoveMessage", id_: 6129}}
}
func (m *ExchangeMountsStableRemoveMessage) Deserialize(input *DataWrapper) {
	m.MountsId = NewVector[int]()
	mountsIdLen := int(input.ReadShort())
	for i := 0; i < mountsIdLen; i++ {
		val := input.ReadVarInt()
		m.MountsId.Push(&val)
	}
}

func (m *ExchangeMountsStableRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMountsTakenFromPaddockMessage struct {
	MessageBase
	Name      string
	WorldX    int16
	WorldY    int16
	Ownername string
}

func NewExchangeMountsTakenFromPaddockMessage() *ExchangeMountsTakenFromPaddockMessage {
	return &ExchangeMountsTakenFromPaddockMessage{MessageBase: MessageBase{MessageType_: "ExchangeMountsTakenFromPaddockMessage", id_: 3055}}
}
func (m *ExchangeMountsTakenFromPaddockMessage) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.Ownername = input.ReadUTF()
}

func (m *ExchangeMountsTakenFromPaddockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMultiCraftCrafterCanUseHisRessourcesMessage struct {
	MessageBase
	Allowed bool
}

func NewExchangeMultiCraftCrafterCanUseHisRessourcesMessage() *ExchangeMultiCraftCrafterCanUseHisRessourcesMessage {
	return &ExchangeMultiCraftCrafterCanUseHisRessourcesMessage{MessageBase: MessageBase{MessageType_: "ExchangeMultiCraftCrafterCanUseHisRessourcesMessage", id_: 4154}}
}
func (m *ExchangeMultiCraftCrafterCanUseHisRessourcesMessage) Deserialize(input *DataWrapper) {
	m.Allowed = input.ReadBoolean()
}

func (m *ExchangeMultiCraftCrafterCanUseHisRessourcesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage struct {
	MessageBase
	Allow bool
}

func NewExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage() *ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage {
	return &ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage{MessageBase: MessageBase{MessageType_: "ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage", id_: 7279}}
}
func (m *ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage) Deserialize(input *DataWrapper) {
	m.Allow = input.ReadBoolean()
}

func (m *ExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectAddedMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *ObjectItem
}

func NewExchangeObjectAddedMessage() *ExchangeObjectAddedMessage {
	return &ExchangeObjectAddedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectAddedMessage", id_: 8426}}
}
func (m *ExchangeObjectAddedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *ExchangeObjectAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectMessage struct {
	MessageBase
	Remote bool
}

func NewExchangeObjectMessage() *ExchangeObjectMessage {
	return &ExchangeObjectMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectMessage", id_: 3411}}
}
func (m *ExchangeObjectMessage) Deserialize(input *DataWrapper) {
	m.Remote = input.ReadBoolean()
}

func (m *ExchangeObjectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectModifiedInBagMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *ObjectItem
}

func NewExchangeObjectModifiedInBagMessage() *ExchangeObjectModifiedInBagMessage {
	return &ExchangeObjectModifiedInBagMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectModifiedInBagMessage", id_: 9367}}
}
func (m *ExchangeObjectModifiedInBagMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *ExchangeObjectModifiedInBagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectModifiedMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *ObjectItem
}

func NewExchangeObjectModifiedMessage() *ExchangeObjectModifiedMessage {
	return &ExchangeObjectModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectModifiedMessage", id_: 7078}}
}
func (m *ExchangeObjectModifiedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *ExchangeObjectModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectModifyPricedMessage struct {
	MessageBase
	ExchangeObjectMovePricedMessage
}

func NewExchangeObjectModifyPricedMessage() *ExchangeObjectModifyPricedMessage {
	return &ExchangeObjectModifyPricedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectModifyPricedMessage", id_: 1058}}
}
func (m *ExchangeObjectModifyPricedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMovePricedMessage.Deserialize(input)
}

func (m *ExchangeObjectModifyPricedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectMoveKamaMessage struct {
	MessageBase
	Quantity int64
}

func NewExchangeObjectMoveKamaMessage() *ExchangeObjectMoveKamaMessage {
	return &ExchangeObjectMoveKamaMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectMoveKamaMessage", id_: 7773}}
}
func (m *ExchangeObjectMoveKamaMessage) Deserialize(input *DataWrapper) {
	m.Quantity = input.ReadVarLong()
}

func (m *ExchangeObjectMoveKamaMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectMoveMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
}

func NewExchangeObjectMoveMessage() *ExchangeObjectMoveMessage {
	return &ExchangeObjectMoveMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectMoveMessage", id_: 5939}}
}
func (m *ExchangeObjectMoveMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarInt()
}

func (m *ExchangeObjectMoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectMovePricedMessage struct {
	MessageBase
	ExchangeObjectMoveMessage
	Price int64
}

func NewExchangeObjectMovePricedMessage() *ExchangeObjectMovePricedMessage {
	return &ExchangeObjectMovePricedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectMovePricedMessage", id_: 3566}}
}
func (m *ExchangeObjectMovePricedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMoveMessage.Deserialize(input)
	m.Price = input.ReadVarUhLong()
}

func (m *ExchangeObjectMovePricedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectMoveToTabMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
	TabNumber int
}

func NewExchangeObjectMoveToTabMessage() *ExchangeObjectMoveToTabMessage {
	return &ExchangeObjectMoveToTabMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectMoveToTabMessage", id_: 1002}}
}
func (m *ExchangeObjectMoveToTabMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarInt()
	m.TabNumber = input.ReadVarUhInt()
}

func (m *ExchangeObjectMoveToTabMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectPutInBagMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *ObjectItem
}

func NewExchangeObjectPutInBagMessage() *ExchangeObjectPutInBagMessage {
	return &ExchangeObjectPutInBagMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectPutInBagMessage", id_: 5697}}
}
func (m *ExchangeObjectPutInBagMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *ExchangeObjectPutInBagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectRemovedFromBagMessage struct {
	MessageBase
	ExchangeObjectMessage
	ObjectUID int
}

func NewExchangeObjectRemovedFromBagMessage() *ExchangeObjectRemovedFromBagMessage {
	return &ExchangeObjectRemovedFromBagMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectRemovedFromBagMessage", id_: 5602}}
}
func (m *ExchangeObjectRemovedFromBagMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.ObjectUID = input.ReadVarUhInt()
}

func (m *ExchangeObjectRemovedFromBagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectRemovedMessage struct {
	MessageBase
	ExchangeObjectMessage
	ObjectUID int
}

func NewExchangeObjectRemovedMessage() *ExchangeObjectRemovedMessage {
	return &ExchangeObjectRemovedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectRemovedMessage", id_: 8090}}
}
func (m *ExchangeObjectRemovedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.ObjectUID = input.ReadVarUhInt()
}

func (m *ExchangeObjectRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertAllFromInvMessage struct {
	MessageBase
}

func NewExchangeObjectTransfertAllFromInvMessage() *ExchangeObjectTransfertAllFromInvMessage {
	return &ExchangeObjectTransfertAllFromInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertAllFromInvMessage", id_: 1681}}
}
func (m *ExchangeObjectTransfertAllFromInvMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeObjectTransfertAllFromInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertAllToInvMessage struct {
	MessageBase
}

func NewExchangeObjectTransfertAllToInvMessage() *ExchangeObjectTransfertAllToInvMessage {
	return &ExchangeObjectTransfertAllToInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertAllToInvMessage", id_: 4357}}
}
func (m *ExchangeObjectTransfertAllToInvMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeObjectTransfertAllToInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertExistingFromInvMessage struct {
	MessageBase
}

func NewExchangeObjectTransfertExistingFromInvMessage() *ExchangeObjectTransfertExistingFromInvMessage {
	return &ExchangeObjectTransfertExistingFromInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertExistingFromInvMessage", id_: 9675}}
}
func (m *ExchangeObjectTransfertExistingFromInvMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeObjectTransfertExistingFromInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertExistingToInvMessage struct {
	MessageBase
}

func NewExchangeObjectTransfertExistingToInvMessage() *ExchangeObjectTransfertExistingToInvMessage {
	return &ExchangeObjectTransfertExistingToInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertExistingToInvMessage", id_: 3544}}
}
func (m *ExchangeObjectTransfertExistingToInvMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeObjectTransfertExistingToInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertListFromInvMessage struct {
	MessageBase
	Ids *Vector[int]
}

func NewExchangeObjectTransfertListFromInvMessage() *ExchangeObjectTransfertListFromInvMessage {
	return &ExchangeObjectTransfertListFromInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertListFromInvMessage", id_: 7537}}
}
func (m *ExchangeObjectTransfertListFromInvMessage) Deserialize(input *DataWrapper) {
	m.Ids = NewVector[int]()
	idsLen := int(input.ReadShort())
	for i := 0; i < idsLen; i++ {
		val := input.ReadVarInt()
		m.Ids.Push(&val)
	}
}

func (m *ExchangeObjectTransfertListFromInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertListToInvMessage struct {
	MessageBase
	Ids *Vector[int]
}

func NewExchangeObjectTransfertListToInvMessage() *ExchangeObjectTransfertListToInvMessage {
	return &ExchangeObjectTransfertListToInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertListToInvMessage", id_: 8793}}
}
func (m *ExchangeObjectTransfertListToInvMessage) Deserialize(input *DataWrapper) {
	m.Ids = NewVector[int]()
	idsLen := int(input.ReadShort())
	for i := 0; i < idsLen; i++ {
		val := input.ReadVarInt()
		m.Ids.Push(&val)
	}
}

func (m *ExchangeObjectTransfertListToInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectTransfertListWithQuantityToInvMessage struct {
	MessageBase
	Ids  *Vector[int]
	Qtys *Vector[int]
}

func NewExchangeObjectTransfertListWithQuantityToInvMessage() *ExchangeObjectTransfertListWithQuantityToInvMessage {
	return &ExchangeObjectTransfertListWithQuantityToInvMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectTransfertListWithQuantityToInvMessage", id_: 166}}
}
func (m *ExchangeObjectTransfertListWithQuantityToInvMessage) Deserialize(input *DataWrapper) {
	m.Ids = NewVector[int]()
	idsLen := int(input.ReadShort())
	for i := 0; i < idsLen; i++ {
		val := input.ReadVarInt()
		m.Ids.Push(&val)
	}
	m.Qtys = NewVector[int]()
	qtysLen := int(input.ReadShort())
	for i := 0; i < qtysLen; i++ {
		val := input.ReadVarInt()
		m.Qtys.Push(&val)
	}
}

func (m *ExchangeObjectTransfertListWithQuantityToInvMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectUseInWorkshopMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
}

func NewExchangeObjectUseInWorkshopMessage() *ExchangeObjectUseInWorkshopMessage {
	return &ExchangeObjectUseInWorkshopMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectUseInWorkshopMessage", id_: 8008}}
}
func (m *ExchangeObjectUseInWorkshopMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarInt()
}

func (m *ExchangeObjectUseInWorkshopMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectsAddedMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *Vector[ObjectItem]
}

func NewExchangeObjectsAddedMessage() *ExchangeObjectsAddedMessage {
	return &ExchangeObjectsAddedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectsAddedMessage", id_: 9703}}
}
func (m *ExchangeObjectsAddedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewVector[ObjectItem]()
	objectLen := int(input.ReadShort())
	for i := 0; i < objectLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Object.Push(ObjectItem)
	}
}

func (m *ExchangeObjectsAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectsModifiedMessage struct {
	MessageBase
	ExchangeObjectMessage
	Object *Vector[ObjectItem]
}

func NewExchangeObjectsModifiedMessage() *ExchangeObjectsModifiedMessage {
	return &ExchangeObjectsModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectsModifiedMessage", id_: 7326}}
}
func (m *ExchangeObjectsModifiedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.Object = NewVector[ObjectItem]()
	objectLen := int(input.ReadShort())
	for i := 0; i < objectLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Object.Push(ObjectItem)
	}
}

func (m *ExchangeObjectsModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeObjectsRemovedMessage struct {
	MessageBase
	ExchangeObjectMessage
	ObjectUID *Vector[int]
}

func NewExchangeObjectsRemovedMessage() *ExchangeObjectsRemovedMessage {
	return &ExchangeObjectsRemovedMessage{MessageBase: MessageBase{MessageType_: "ExchangeObjectsRemovedMessage", id_: 8928}}
}
func (m *ExchangeObjectsRemovedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.ObjectUID = NewVector[int]()
	objectUIDLen := int(input.ReadShort())
	for i := 0; i < objectUIDLen; i++ {
		val := input.ReadVarInt()
		m.ObjectUID.Push(&val)
	}
}

func (m *ExchangeObjectsRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeOfflineSoldItemsMessage struct {
	MessageBase
	BidHouseItems *Vector[ObjectItemQuantityPriceDateEffects]
}

func NewExchangeOfflineSoldItemsMessage() *ExchangeOfflineSoldItemsMessage {
	return &ExchangeOfflineSoldItemsMessage{MessageBase: MessageBase{MessageType_: "ExchangeOfflineSoldItemsMessage", id_: 2524}}
}
func (m *ExchangeOfflineSoldItemsMessage) Deserialize(input *DataWrapper) {
	m.BidHouseItems = NewVector[ObjectItemQuantityPriceDateEffects]()
	bidHouseItemsLen := int(input.ReadShort())
	for i := 0; i < bidHouseItemsLen; i++ {
		ObjectItemQuantityPriceDateEffects := NewObjectItemQuantityPriceDateEffects()
		ObjectItemQuantityPriceDateEffects.Deserialize(input)
		m.BidHouseItems.Push(ObjectItemQuantityPriceDateEffects)
	}
}

func (m *ExchangeOfflineSoldItemsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeOkMultiCraftMessage struct {
	MessageBase
	InitiatorId int64
	OtherId     int64
	Role        int8
}

func NewExchangeOkMultiCraftMessage() *ExchangeOkMultiCraftMessage {
	return &ExchangeOkMultiCraftMessage{MessageBase: MessageBase{MessageType_: "ExchangeOkMultiCraftMessage", id_: 4122}}
}
func (m *ExchangeOkMultiCraftMessage) Deserialize(input *DataWrapper) {
	m.InitiatorId = input.ReadVarUhLong()
	m.OtherId = input.ReadVarUhLong()
	m.Role = input.ReadByte()
}

func (m *ExchangeOkMultiCraftMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangePlayerMultiCraftRequestMessage struct {
	MessageBase
	ExchangeRequestMessage
	Target  int64
	SkillId int
}

func NewExchangePlayerMultiCraftRequestMessage() *ExchangePlayerMultiCraftRequestMessage {
	return &ExchangePlayerMultiCraftRequestMessage{MessageBase: MessageBase{MessageType_: "ExchangePlayerMultiCraftRequestMessage", id_: 2028}}
}
func (m *ExchangePlayerMultiCraftRequestMessage) Deserialize(input *DataWrapper) {
	m.ExchangeRequestMessage.Deserialize(input)
	m.Target = input.ReadVarUhLong()
	m.SkillId = input.ReadVarUhInt()
}

func (m *ExchangePlayerMultiCraftRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangePlayerRequestMessage struct {
	MessageBase
	ExchangeRequestMessage
	Target int64
}

func NewExchangePlayerRequestMessage() *ExchangePlayerRequestMessage {
	return &ExchangePlayerRequestMessage{MessageBase: MessageBase{MessageType_: "ExchangePlayerRequestMessage", id_: 9371}}
}
func (m *ExchangePlayerRequestMessage) Deserialize(input *DataWrapper) {
	m.ExchangeRequestMessage.Deserialize(input)
	m.Target = input.ReadVarUhLong()
}

func (m *ExchangePlayerRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangePodsModifiedMessage struct {
	MessageBase
	ExchangeObjectMessage
	CurrentWeight int
	MaxWeight     int
}

func NewExchangePodsModifiedMessage() *ExchangePodsModifiedMessage {
	return &ExchangePodsModifiedMessage{MessageBase: MessageBase{MessageType_: "ExchangePodsModifiedMessage", id_: 7160}}
}
func (m *ExchangePodsModifiedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeObjectMessage.Deserialize(input)
	m.CurrentWeight = input.ReadVarUhInt()
	m.MaxWeight = input.ReadVarUhInt()
}

func (m *ExchangePodsModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeReadyMessage struct {
	MessageBase
	Ready bool
	Step  int
}

func NewExchangeReadyMessage() *ExchangeReadyMessage {
	return &ExchangeReadyMessage{MessageBase: MessageBase{MessageType_: "ExchangeReadyMessage", id_: 9547}}
}
func (m *ExchangeReadyMessage) Deserialize(input *DataWrapper) {
	m.Ready = input.ReadBoolean()
	m.Step = input.ReadVarUhShort()
}

func (m *ExchangeReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeReplayStopMessage struct {
	MessageBase
}

func NewExchangeReplayStopMessage() *ExchangeReplayStopMessage {
	return &ExchangeReplayStopMessage{MessageBase: MessageBase{MessageType_: "ExchangeReplayStopMessage", id_: 2953}}
}
func (m *ExchangeReplayStopMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeReplayStopMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeRequestMessage struct {
	MessageBase
	ExchangeType int8
}

func NewExchangeRequestMessage() *ExchangeRequestMessage {
	return &ExchangeRequestMessage{MessageBase: MessageBase{MessageType_: "ExchangeRequestMessage", id_: 2919}}
}
func (m *ExchangeRequestMessage) Deserialize(input *DataWrapper) {
	m.ExchangeType = input.ReadByte()
}

func (m *ExchangeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeRequestOnMountStockMessage struct {
	MessageBase
}

func NewExchangeRequestOnMountStockMessage() *ExchangeRequestOnMountStockMessage {
	return &ExchangeRequestOnMountStockMessage{MessageBase: MessageBase{MessageType_: "ExchangeRequestOnMountStockMessage", id_: 5627}}
}
func (m *ExchangeRequestOnMountStockMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeRequestOnMountStockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeRequestOnTaxCollectorMessage struct {
	MessageBase
}

func NewExchangeRequestOnTaxCollectorMessage() *ExchangeRequestOnTaxCollectorMessage {
	return &ExchangeRequestOnTaxCollectorMessage{MessageBase: MessageBase{MessageType_: "ExchangeRequestOnTaxCollectorMessage", id_: 1216}}
}
func (m *ExchangeRequestOnTaxCollectorMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeRequestOnTaxCollectorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeRequestedMessage struct {
	MessageBase
	ExchangeType int8
}

func NewExchangeRequestedMessage() *ExchangeRequestedMessage {
	return &ExchangeRequestedMessage{MessageBase: MessageBase{MessageType_: "ExchangeRequestedMessage", id_: 1313}}
}
func (m *ExchangeRequestedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeType = input.ReadByte()
}

func (m *ExchangeRequestedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeRequestedTradeMessage struct {
	MessageBase
	ExchangeRequestedMessage
	Source int64
	Target int64
}

func NewExchangeRequestedTradeMessage() *ExchangeRequestedTradeMessage {
	return &ExchangeRequestedTradeMessage{MessageBase: MessageBase{MessageType_: "ExchangeRequestedTradeMessage", id_: 5103}}
}
func (m *ExchangeRequestedTradeMessage) Deserialize(input *DataWrapper) {
	m.ExchangeRequestedMessage.Deserialize(input)
	m.Source = input.ReadVarUhLong()
	m.Target = input.ReadVarUhLong()
}

func (m *ExchangeRequestedTradeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeSellMessage struct {
	MessageBase
	ObjectToSellId int
	Quantity       int
}

func NewExchangeSellMessage() *ExchangeSellMessage {
	return &ExchangeSellMessage{MessageBase: MessageBase{MessageType_: "ExchangeSellMessage", id_: 4616}}
}
func (m *ExchangeSellMessage) Deserialize(input *DataWrapper) {
	m.ObjectToSellId = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ExchangeSellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeSellOkMessage struct {
	MessageBase
}

func NewExchangeSellOkMessage() *ExchangeSellOkMessage {
	return &ExchangeSellOkMessage{MessageBase: MessageBase{MessageType_: "ExchangeSellOkMessage", id_: 49}}
}
func (m *ExchangeSellOkMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeSellOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeSetCraftRecipeMessage struct {
	MessageBase
	ObjectGID int
}

func NewExchangeSetCraftRecipeMessage() *ExchangeSetCraftRecipeMessage {
	return &ExchangeSetCraftRecipeMessage{MessageBase: MessageBase{MessageType_: "ExchangeSetCraftRecipeMessage", id_: 3981}}
}
func (m *ExchangeSetCraftRecipeMessage) Deserialize(input *DataWrapper) {
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *ExchangeSetCraftRecipeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkCraftMessage struct {
	MessageBase
}

func NewExchangeStartOkCraftMessage() *ExchangeStartOkCraftMessage {
	return &ExchangeStartOkCraftMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkCraftMessage", id_: 6203}}
}
func (m *ExchangeStartOkCraftMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeStartOkCraftMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkCraftWithInformationMessage struct {
	MessageBase
	ExchangeStartOkCraftMessage
	SkillId int
}

func NewExchangeStartOkCraftWithInformationMessage() *ExchangeStartOkCraftWithInformationMessage {
	return &ExchangeStartOkCraftWithInformationMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkCraftWithInformationMessage", id_: 4096}}
}
func (m *ExchangeStartOkCraftWithInformationMessage) Deserialize(input *DataWrapper) {
	m.ExchangeStartOkCraftMessage.Deserialize(input)
	m.SkillId = input.ReadVarUhInt()
}

func (m *ExchangeStartOkCraftWithInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkEvolutiveObjectRecycleTradeMessage struct {
	MessageBase
}

func NewExchangeStartOkEvolutiveObjectRecycleTradeMessage() *ExchangeStartOkEvolutiveObjectRecycleTradeMessage {
	return &ExchangeStartOkEvolutiveObjectRecycleTradeMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkEvolutiveObjectRecycleTradeMessage", id_: 9395}}
}
func (m *ExchangeStartOkEvolutiveObjectRecycleTradeMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeStartOkEvolutiveObjectRecycleTradeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkJobIndexMessage struct {
	MessageBase
	Jobs *Vector[int]
}

func NewExchangeStartOkJobIndexMessage() *ExchangeStartOkJobIndexMessage {
	return &ExchangeStartOkJobIndexMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkJobIndexMessage", id_: 1248}}
}
func (m *ExchangeStartOkJobIndexMessage) Deserialize(input *DataWrapper) {
	m.Jobs = NewVector[int]()
	jobsLen := int(input.ReadShort())
	for i := 0; i < jobsLen; i++ {
		val := input.ReadVarInt()
		m.Jobs.Push(&val)
	}
}

func (m *ExchangeStartOkJobIndexMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkMountMessage struct {
	MessageBase
	ExchangeStartOkMountWithOutPaddockMessage
	PaddockedMountsDescription *Vector[MountClientData]
}

func NewExchangeStartOkMountMessage() *ExchangeStartOkMountMessage {
	return &ExchangeStartOkMountMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkMountMessage", id_: 2274}}
}
func (m *ExchangeStartOkMountMessage) Deserialize(input *DataWrapper) {
	m.ExchangeStartOkMountWithOutPaddockMessage.Deserialize(input)
	m.PaddockedMountsDescription = NewVector[MountClientData]()
	paddockedMountsDescriptionLen := int(input.ReadShort())
	for i := 0; i < paddockedMountsDescriptionLen; i++ {
		MountClientData := NewMountClientData()
		MountClientData.Deserialize(input)
		m.PaddockedMountsDescription.Push(MountClientData)
	}
}

func (m *ExchangeStartOkMountMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkMountWithOutPaddockMessage struct {
	MessageBase
	StabledMountsDescription *Vector[MountClientData]
}

func NewExchangeStartOkMountWithOutPaddockMessage() *ExchangeStartOkMountWithOutPaddockMessage {
	return &ExchangeStartOkMountWithOutPaddockMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkMountWithOutPaddockMessage", id_: 1232}}
}
func (m *ExchangeStartOkMountWithOutPaddockMessage) Deserialize(input *DataWrapper) {
	m.StabledMountsDescription = NewVector[MountClientData]()
	stabledMountsDescriptionLen := int(input.ReadShort())
	for i := 0; i < stabledMountsDescriptionLen; i++ {
		MountClientData := NewMountClientData()
		MountClientData.Deserialize(input)
		m.StabledMountsDescription.Push(MountClientData)
	}
}

func (m *ExchangeStartOkMountWithOutPaddockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkMulticraftCrafterMessage struct {
	MessageBase
	SkillId int
}

func NewExchangeStartOkMulticraftCrafterMessage() *ExchangeStartOkMulticraftCrafterMessage {
	return &ExchangeStartOkMulticraftCrafterMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkMulticraftCrafterMessage", id_: 7458}}
}
func (m *ExchangeStartOkMulticraftCrafterMessage) Deserialize(input *DataWrapper) {
	m.SkillId = input.ReadVarUhInt()
}

func (m *ExchangeStartOkMulticraftCrafterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkMulticraftCustomerMessage struct {
	MessageBase
	SkillId         int
	CrafterJobLevel uint8
}

func NewExchangeStartOkMulticraftCustomerMessage() *ExchangeStartOkMulticraftCustomerMessage {
	return &ExchangeStartOkMulticraftCustomerMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkMulticraftCustomerMessage", id_: 5378}}
}
func (m *ExchangeStartOkMulticraftCustomerMessage) Deserialize(input *DataWrapper) {
	m.SkillId = input.ReadVarUhInt()
	m.CrafterJobLevel = input.ReadUnsignedByte()
}

func (m *ExchangeStartOkMulticraftCustomerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkNpcShopMessage struct {
	MessageBase
	NpcSellerId  float64
	TokenId      int
	ObjectsInfos *Vector[ObjectItemToSellInNpcShop]
}

func NewExchangeStartOkNpcShopMessage() *ExchangeStartOkNpcShopMessage {
	return &ExchangeStartOkNpcShopMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkNpcShopMessage", id_: 6130}}
}
func (m *ExchangeStartOkNpcShopMessage) Deserialize(input *DataWrapper) {
	m.NpcSellerId = input.ReadDouble()
	m.TokenId = input.ReadVarUhInt()
	m.ObjectsInfos = NewVector[ObjectItemToSellInNpcShop]()
	objectsInfosLen := int(input.ReadShort())
	for i := 0; i < objectsInfosLen; i++ {
		ObjectItemToSellInNpcShop := NewObjectItemToSellInNpcShop()
		ObjectItemToSellInNpcShop.Deserialize(input)
		m.ObjectsInfos.Push(ObjectItemToSellInNpcShop)
	}
}

func (m *ExchangeStartOkNpcShopMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkNpcTradeMessage struct {
	MessageBase
	NpcId float64
}

func NewExchangeStartOkNpcTradeMessage() *ExchangeStartOkNpcTradeMessage {
	return &ExchangeStartOkNpcTradeMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkNpcTradeMessage", id_: 8322}}
}
func (m *ExchangeStartOkNpcTradeMessage) Deserialize(input *DataWrapper) {
	m.NpcId = input.ReadDouble()
}

func (m *ExchangeStartOkNpcTradeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkRecycleTradeMessage struct {
	MessageBase
	PercentToPrism             int16
	PercentToPlayer            int16
	AdjacentSubareaPossessed   *Vector[int32]
	AdjacentSubareaUnpossessed *Vector[int32]
}

func NewExchangeStartOkRecycleTradeMessage() *ExchangeStartOkRecycleTradeMessage {
	return &ExchangeStartOkRecycleTradeMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkRecycleTradeMessage", id_: 1067}}
}
func (m *ExchangeStartOkRecycleTradeMessage) Deserialize(input *DataWrapper) {
	m.PercentToPrism = input.ReadShort()
	m.PercentToPlayer = input.ReadShort()
	m.AdjacentSubareaPossessed = NewVector[int32]()
	adjacentSubareaPossessedLen := int(input.ReadShort())
	for i := 0; i < adjacentSubareaPossessedLen; i++ {
		val := input.ReadInt()
		m.AdjacentSubareaPossessed.Push(&val)
	}
	m.AdjacentSubareaUnpossessed = NewVector[int32]()
	adjacentSubareaUnpossessedLen := int(input.ReadShort())
	for i := 0; i < adjacentSubareaUnpossessedLen; i++ {
		val := input.ReadInt()
		m.AdjacentSubareaUnpossessed.Push(&val)
	}
}

func (m *ExchangeStartOkRecycleTradeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartOkRunesTradeMessage struct {
	MessageBase
}

func NewExchangeStartOkRunesTradeMessage() *ExchangeStartOkRunesTradeMessage {
	return &ExchangeStartOkRunesTradeMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartOkRunesTradeMessage", id_: 1662}}
}
func (m *ExchangeStartOkRunesTradeMessage) Deserialize(input *DataWrapper) {
}

func (m *ExchangeStartOkRunesTradeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedBidBuyerMessage struct {
	MessageBase
	BuyerDescriptor *SellerBuyerDescriptor
}

func NewExchangeStartedBidBuyerMessage() *ExchangeStartedBidBuyerMessage {
	return &ExchangeStartedBidBuyerMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedBidBuyerMessage", id_: 4280}}
}
func (m *ExchangeStartedBidBuyerMessage) Deserialize(input *DataWrapper) {
	m.BuyerDescriptor = NewSellerBuyerDescriptor()
	m.BuyerDescriptor.Deserialize(input)
}

func (m *ExchangeStartedBidBuyerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedBidSellerMessage struct {
	MessageBase
	SellerDescriptor *SellerBuyerDescriptor
	ObjectsInfos     *Vector[ObjectItemToSellInBid]
}

func NewExchangeStartedBidSellerMessage() *ExchangeStartedBidSellerMessage {
	return &ExchangeStartedBidSellerMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedBidSellerMessage", id_: 9278}}
}
func (m *ExchangeStartedBidSellerMessage) Deserialize(input *DataWrapper) {
	m.SellerDescriptor = NewSellerBuyerDescriptor()
	m.SellerDescriptor.Deserialize(input)
	m.ObjectsInfos = NewVector[ObjectItemToSellInBid]()
	objectsInfosLen := int(input.ReadShort())
	for i := 0; i < objectsInfosLen; i++ {
		ObjectItemToSellInBid := NewObjectItemToSellInBid()
		ObjectItemToSellInBid.Deserialize(input)
		m.ObjectsInfos.Push(ObjectItemToSellInBid)
	}
}

func (m *ExchangeStartedBidSellerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedMessage struct {
	MessageBase
	ExchangeType int8
}

func NewExchangeStartedMessage() *ExchangeStartedMessage {
	return &ExchangeStartedMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedMessage", id_: 3043}}
}
func (m *ExchangeStartedMessage) Deserialize(input *DataWrapper) {
	m.ExchangeType = input.ReadByte()
}

func (m *ExchangeStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedMountStockMessage struct {
	MessageBase
	ObjectsInfos *Vector[ObjectItem]
}

func NewExchangeStartedMountStockMessage() *ExchangeStartedMountStockMessage {
	return &ExchangeStartedMountStockMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedMountStockMessage", id_: 6115}}
}
func (m *ExchangeStartedMountStockMessage) Deserialize(input *DataWrapper) {
	m.ObjectsInfos = NewVector[ObjectItem]()
	objectsInfosLen := int(input.ReadShort())
	for i := 0; i < objectsInfosLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.ObjectsInfos.Push(ObjectItem)
	}
}

func (m *ExchangeStartedMountStockMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedTaxCollectorEquipmentMessage struct {
	MessageBase
	Information TaxCollectorInformationsI
}

func NewExchangeStartedTaxCollectorEquipmentMessage() *ExchangeStartedTaxCollectorEquipmentMessage {
	return &ExchangeStartedTaxCollectorEquipmentMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedTaxCollectorEquipmentMessage", id_: 9293}}
}
func (m *ExchangeStartedTaxCollectorEquipmentMessage) Deserialize(input *DataWrapper) {
	m.Information = NewTaxCollectorInformations()
	m.Information.Deserialize(input)
}

func (m *ExchangeStartedTaxCollectorEquipmentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedTaxCollectorShopMessage struct {
	MessageBase
	Objects *Vector[ObjectItem]
	Kamas   int64
}

func NewExchangeStartedTaxCollectorShopMessage() *ExchangeStartedTaxCollectorShopMessage {
	return &ExchangeStartedTaxCollectorShopMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedTaxCollectorShopMessage", id_: 9791}}
}
func (m *ExchangeStartedTaxCollectorShopMessage) Deserialize(input *DataWrapper) {
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
	m.Kamas = input.ReadVarUhLong()
}

func (m *ExchangeStartedTaxCollectorShopMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedWithMultiTabStorageMessage struct {
	MessageBase
	ExchangeStartedMessage
	StorageMaxSlot int
	TabNumber      int
}

func NewExchangeStartedWithMultiTabStorageMessage() *ExchangeStartedWithMultiTabStorageMessage {
	return &ExchangeStartedWithMultiTabStorageMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedWithMultiTabStorageMessage", id_: 4135}}
}
func (m *ExchangeStartedWithMultiTabStorageMessage) Deserialize(input *DataWrapper) {
	m.ExchangeStartedMessage.Deserialize(input)
	m.StorageMaxSlot = input.ReadVarUhInt()
	m.TabNumber = input.ReadVarUhInt()
}

func (m *ExchangeStartedWithMultiTabStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedWithPodsMessage struct {
	MessageBase
	ExchangeStartedMessage
	FirstCharacterId             float64
	FirstCharacterCurrentWeight  int
	FirstCharacterMaxWeight      int
	SecondCharacterId            float64
	SecondCharacterCurrentWeight int
	SecondCharacterMaxWeight     int
}

func NewExchangeStartedWithPodsMessage() *ExchangeStartedWithPodsMessage {
	return &ExchangeStartedWithPodsMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedWithPodsMessage", id_: 5028}}
}
func (m *ExchangeStartedWithPodsMessage) Deserialize(input *DataWrapper) {
	m.ExchangeStartedMessage.Deserialize(input)
	m.FirstCharacterId = input.ReadDouble()
	m.FirstCharacterCurrentWeight = input.ReadVarUhInt()
	m.FirstCharacterMaxWeight = input.ReadVarUhInt()
	m.SecondCharacterId = input.ReadDouble()
	m.SecondCharacterCurrentWeight = input.ReadVarUhInt()
	m.SecondCharacterMaxWeight = input.ReadVarUhInt()
}

func (m *ExchangeStartedWithPodsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStartedWithStorageMessage struct {
	MessageBase
	ExchangeStartedMessage
	StorageMaxSlot int
}

func NewExchangeStartedWithStorageMessage() *ExchangeStartedWithStorageMessage {
	return &ExchangeStartedWithStorageMessage{MessageBase: MessageBase{MessageType_: "ExchangeStartedWithStorageMessage", id_: 2977}}
}
func (m *ExchangeStartedWithStorageMessage) Deserialize(input *DataWrapper) {
	m.ExchangeStartedMessage.Deserialize(input)
	m.StorageMaxSlot = input.ReadVarUhInt()
}

func (m *ExchangeStartedWithStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeStoppedMessage struct {
	MessageBase
	Id int64
}

func NewExchangeStoppedMessage() *ExchangeStoppedMessage {
	return &ExchangeStoppedMessage{MessageBase: MessageBase{MessageType_: "ExchangeStoppedMessage", id_: 3673}}
}
func (m *ExchangeStoppedMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
}

func (m *ExchangeStoppedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeTaxCollectorGetMessage struct {
	MessageBase
	CollectorName string
	WorldX        int16
	WorldY        int16
	MapId         float64
	SubAreaId     int
	UserName      string
	CallerId      int64
	CallerName    string
	Pods          int
	ObjectsInfos  *Vector[ObjectItemGenericQuantity]
	Look          *EntityLook
}

func NewExchangeTaxCollectorGetMessage() *ExchangeTaxCollectorGetMessage {
	return &ExchangeTaxCollectorGetMessage{MessageBase: MessageBase{MessageType_: "ExchangeTaxCollectorGetMessage", id_: 3970}}
}
func (m *ExchangeTaxCollectorGetMessage) Deserialize(input *DataWrapper) {
	m.CollectorName = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.UserName = input.ReadUTF()
	m.CallerId = input.ReadVarUhLong()
	m.CallerName = input.ReadUTF()
	m.Pods = input.ReadVarUhShort()
	m.ObjectsInfos = NewVector[ObjectItemGenericQuantity]()
	objectsInfosLen := int(input.ReadShort())
	for i := 0; i < objectsInfosLen; i++ {
		ObjectItemGenericQuantity := NewObjectItemGenericQuantity()
		ObjectItemGenericQuantity.Deserialize(input)
		m.ObjectsInfos.Push(ObjectItemGenericQuantity)
	}
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *ExchangeTaxCollectorGetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeTypesExchangerDescriptionForUserMessage struct {
	MessageBase
	ObjectType      int32
	TypeDescription *Vector[int]
}

func NewExchangeTypesExchangerDescriptionForUserMessage() *ExchangeTypesExchangerDescriptionForUserMessage {
	return &ExchangeTypesExchangerDescriptionForUserMessage{MessageBase: MessageBase{MessageType_: "ExchangeTypesExchangerDescriptionForUserMessage", id_: 6572}}
}
func (m *ExchangeTypesExchangerDescriptionForUserMessage) Deserialize(input *DataWrapper) {
	m.ObjectType = input.ReadInt()
	m.TypeDescription = NewVector[int]()
	typeDescriptionLen := int(input.ReadShort())
	for i := 0; i < typeDescriptionLen; i++ {
		val := input.ReadVarInt()
		m.TypeDescription.Push(&val)
	}
}

func (m *ExchangeTypesExchangerDescriptionForUserMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeTypesItemsExchangerDescriptionForUserMessage struct {
	MessageBase
	ObjectGID            int
	ObjectType           int32
	ItemTypeDescriptions *Vector[BidExchangerObjectInfo]
}

func NewExchangeTypesItemsExchangerDescriptionForUserMessage() *ExchangeTypesItemsExchangerDescriptionForUserMessage {
	return &ExchangeTypesItemsExchangerDescriptionForUserMessage{MessageBase: MessageBase{MessageType_: "ExchangeTypesItemsExchangerDescriptionForUserMessage", id_: 2738}}
}
func (m *ExchangeTypesItemsExchangerDescriptionForUserMessage) Deserialize(input *DataWrapper) {
	m.ObjectGID = input.ReadVarUhInt()
	m.ObjectType = input.ReadInt()
	m.ItemTypeDescriptions = NewVector[BidExchangerObjectInfo]()
	itemTypeDescriptionsLen := int(input.ReadShort())
	for i := 0; i < itemTypeDescriptionsLen; i++ {
		BidExchangerObjectInfo := NewBidExchangerObjectInfo()
		BidExchangerObjectInfo.Deserialize(input)
		m.ItemTypeDescriptions.Push(BidExchangerObjectInfo)
	}
}

func (m *ExchangeTypesItemsExchangerDescriptionForUserMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeWaitingResultMessage struct {
	MessageBase
	Bwait bool
}

func NewExchangeWaitingResultMessage() *ExchangeWaitingResultMessage {
	return &ExchangeWaitingResultMessage{MessageBase: MessageBase{MessageType_: "ExchangeWaitingResultMessage", id_: 4276}}
}
func (m *ExchangeWaitingResultMessage) Deserialize(input *DataWrapper) {
	m.Bwait = input.ReadBoolean()
}

func (m *ExchangeWaitingResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExchangeWeightMessage struct {
	MessageBase
	CurrentWeight int
	MaxWeight     int
}

func NewExchangeWeightMessage() *ExchangeWeightMessage {
	return &ExchangeWeightMessage{MessageBase: MessageBase{MessageType_: "ExchangeWeightMessage", id_: 1630}}
}
func (m *ExchangeWeightMessage) Deserialize(input *DataWrapper) {
	m.CurrentWeight = input.ReadVarUhInt()
	m.MaxWeight = input.ReadVarUhInt()
}

func (m *ExchangeWeightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExitHavenBagRequestMessage struct {
	MessageBase
}

func NewExitHavenBagRequestMessage() *ExitHavenBagRequestMessage {
	return &ExitHavenBagRequestMessage{MessageBase: MessageBase{MessageType_: "ExitHavenBagRequestMessage", id_: 1472}}
}
func (m *ExitHavenBagRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *ExitHavenBagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ExtendedBreachBranchI interface {
	Deserialize(input *DataWrapper)
}

type ExtendedBreachBranch struct {
	MessageBase
	BreachBranch
	Rewards  *Vector[BreachReward]
	Modifier int
	Prize    int
}

func NewExtendedBreachBranch() *ExtendedBreachBranch {
	return &ExtendedBreachBranch{MessageBase: MessageBase{MessageType_: "ExtendedBreachBranch", id_: 8307}}
}
func (m *ExtendedBreachBranch) Deserialize(input *DataWrapper) {
	m.BreachBranch.Deserialize(input)
	m.Rewards = NewVector[BreachReward]()
	rewardsLen := int(input.ReadShort())
	for i := 0; i < rewardsLen; i++ {
		BreachReward := NewBreachReward()
		BreachReward.Deserialize(input)
		m.Rewards.Push(BreachReward)
	}
	m.Modifier = input.ReadVarInt()
	m.Prize = input.ReadVarUhInt()
}

func (m *ExtendedBreachBranch) IsDeserializeFunctionComplete() bool {
	return true
}

type ExtendedLockedBreachBranch struct {
	MessageBase
	ExtendedBreachBranch
	UnlockPrice int
}

func NewExtendedLockedBreachBranch() *ExtendedLockedBreachBranch {
	return &ExtendedLockedBreachBranch{MessageBase: MessageBase{MessageType_: "ExtendedLockedBreachBranch", id_: 4080}}
}
func (m *ExtendedLockedBreachBranch) Deserialize(input *DataWrapper) {
	m.ExtendedBreachBranch.Deserialize(input)
	m.UnlockPrice = input.ReadVarUhInt()
}

func (m *ExtendedLockedBreachBranch) IsDeserializeFunctionComplete() bool {
	return true
}

type FightAllianceTeamInformations struct {
	MessageBase
	FightTeamInformations
	Relation int8
}

func NewFightAllianceTeamInformations() *FightAllianceTeamInformations {
	return &FightAllianceTeamInformations{MessageBase: MessageBase{MessageType_: "FightAllianceTeamInformations", id_: 8585}}
}
func (m *FightAllianceTeamInformations) Deserialize(input *DataWrapper) {
	m.FightTeamInformations.Deserialize(input)
	m.Relation = input.ReadByte()
}

func (m *FightAllianceTeamInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightCommonInformations struct {
	MessageBase
	FightId             int
	FightType           int8
	FightTeams          *Vector[FightTeamInformationsI]
	FightTeamsPositions *Vector[int]
	FightTeamsOptions   *Vector[FightOptionsInformations]
}

func NewFightCommonInformations() *FightCommonInformations {
	return &FightCommonInformations{MessageBase: MessageBase{MessageType_: "FightCommonInformations", id_: 9113}}
}
func (m *FightCommonInformations) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.FightType = input.ReadByte()
	m.FightTeams = NewVector[FightTeamInformationsI]()
	fightTeamsLen := int(input.ReadShort())
	for i := 0; i < fightTeamsLen; i++ {
		foundFightTeamInformations := getDynamicType(input)
		if castedFightTeamInformations, ok := foundFightTeamInformations.(FightTeamInformationsI); ok {
			castedFightTeamInformations.Deserialize(input)
			m.FightTeams.Push(&castedFightTeamInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement FightTeamInformationsI, got: " + fmt.Sprintf("%T", foundFightTeamInformations))
		}
	}
	m.FightTeamsPositions = NewVector[int]()
	fightTeamsPositionsLen := int(input.ReadShort())
	for i := 0; i < fightTeamsPositionsLen; i++ {
		val := input.ReadVarShort()
		m.FightTeamsPositions.Push(&val)
	}
	m.FightTeamsOptions = NewVector[FightOptionsInformations]()
	fightTeamsOptionsLen := int(input.ReadShort())
	for i := 0; i < fightTeamsOptionsLen; i++ {
		FightOptionsInformations := NewFightOptionsInformations()
		FightOptionsInformations.Deserialize(input)
		m.FightTeamsOptions.Push(FightOptionsInformations)
	}
}

func (m *FightCommonInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightDetailedTemporaryBoostEffect struct {
	MessageBase
	FightTemporaryBoostEffect
	Param1 int32
	Param2 int32
	Param3 int32
}

func NewFightDetailedTemporaryBoostEffect() *FightDetailedTemporaryBoostEffect {
	return &FightDetailedTemporaryBoostEffect{MessageBase: MessageBase{MessageType_: "FightDetailedTemporaryBoostEffect", id_: 2061}}
}
func (m *FightDetailedTemporaryBoostEffect) Deserialize(input *DataWrapper) {
	m.FightTemporaryBoostEffect.Deserialize(input)
	m.Param1 = input.ReadInt()
	m.Param2 = input.ReadInt()
	m.Param3 = input.ReadInt()
}

func (m *FightDetailedTemporaryBoostEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightDispellableEffectExtendedInformations struct {
	MessageBase
	ActionId int
	SourceId float64
	Effect   AbstractFightDispellableEffectI
}

func NewFightDispellableEffectExtendedInformations() *FightDispellableEffectExtendedInformations {
	return &FightDispellableEffectExtendedInformations{MessageBase: MessageBase{MessageType_: "FightDispellableEffectExtendedInformations", id_: 8836}}
}
func (m *FightDispellableEffectExtendedInformations) Deserialize(input *DataWrapper) {
	m.ActionId = input.ReadVarUhShort()
	m.SourceId = input.ReadDouble()
	m.Effect = getDynamicType(input)
	m.Effect.Deserialize(input)
}

func (m *FightDispellableEffectExtendedInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightEntityDispositionInformations struct {
	MessageBase
	EntityDispositionInformations
	CarryingCharacterId float64
}

func NewFightEntityDispositionInformations() *FightEntityDispositionInformations {
	return &FightEntityDispositionInformations{MessageBase: MessageBase{MessageType_: "FightEntityDispositionInformations", id_: 3736}}
}
func (m *FightEntityDispositionInformations) Deserialize(input *DataWrapper) {
	m.EntityDispositionInformations.Deserialize(input)
	m.CarryingCharacterId = input.ReadDouble()
}

func (m *FightEntityDispositionInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightExternalInformations struct {
	MessageBase
	FightId              int
	FightType            int8
	FightStart           int32
	FightSpectatorLocked bool
	FightTeams           *Vector[FightTeamLightInformations]
	FightTeamsOptions    *Vector[FightOptionsInformations]
}

func NewFightExternalInformations() *FightExternalInformations {
	return &FightExternalInformations{MessageBase: MessageBase{MessageType_: "FightExternalInformations", id_: 3630}}
}
func (m *FightExternalInformations) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.FightType = input.ReadByte()
	m.FightStart = input.ReadInt()
	m.FightSpectatorLocked = input.ReadBoolean()
	// deserialize not ready for 'FightTeams' (vector type: &{SubType:FightTeamLightInformations LengthType: SubTypeType: IsDynamicType:false})
	// deserialize not ready for 'FightTeamsOptions' (vector type: &{SubType:FightOptionsInformations LengthType: SubTypeType: IsDynamicType:false})
}

func (m *FightExternalInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightLoot struct {
	MessageBase
	Objects *Vector[FightLootObject]
	Kamas   int64
}

func NewFightLoot() *FightLoot {
	return &FightLoot{MessageBase: MessageBase{MessageType_: "FightLoot", id_: 3066}}
}
func (m *FightLoot) Deserialize(input *DataWrapper) {
	m.Objects = NewVector[FightLootObject]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		FightLootObject := NewFightLootObject()
		FightLootObject.Deserialize(input)
		m.Objects.Push(FightLootObject)
	}
	m.Kamas = input.ReadVarUhLong()
}

func (m *FightLoot) IsDeserializeFunctionComplete() bool {
	return true
}

type FightLootObject struct {
	MessageBase
	ObjectId     int32
	Quantity     int32
	PriorityHint int32
}

func NewFightLootObject() *FightLootObject {
	return &FightLootObject{MessageBase: MessageBase{MessageType_: "FightLootObject", id_: 5840}}
}
func (m *FightLootObject) Deserialize(input *DataWrapper) {
	m.ObjectId = input.ReadInt()
	m.Quantity = input.ReadInt()
	m.PriorityHint = input.ReadInt()
}

func (m *FightLootObject) IsDeserializeFunctionComplete() bool {
	return true
}

type FightOptionsInformations struct {
	MessageBase
	IsSecret                bool
	IsRestrictedToPartyOnly bool
	IsClosed                bool
	IsAskingForHelp         bool
}

func NewFightOptionsInformations() *FightOptionsInformations {
	return &FightOptionsInformations{MessageBase: MessageBase{MessageType_: "FightOptionsInformations", id_: 1574}}
}
func (m *FightOptionsInformations) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.IsSecret = (byteBox0>>0)&1 != 0
	m.IsRestrictedToPartyOnly = (byteBox0>>1)&1 != 0
	m.IsClosed = (byteBox0>>2)&1 != 0
	m.IsAskingForHelp = (byteBox0>>3)&1 != 0
}

func (m *FightOptionsInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightPhase struct {
	MessageBase
	Phase             int8
	PhaseEndTimeStamp float64
}

func NewFightPhase() *FightPhase {
	return &FightPhase{MessageBase: MessageBase{MessageType_: "FightPhase", id_: 2770}}
}
func (m *FightPhase) Deserialize(input *DataWrapper) {
	m.Phase = input.ReadByte()
	m.PhaseEndTimeStamp = input.ReadDouble()
}

func (m *FightPhase) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultAdditionalDataI interface {
	Deserialize(input *DataWrapper)
}

type FightResultAdditionalData struct {
	MessageBase
}

func NewFightResultAdditionalData() *FightResultAdditionalData {
	return &FightResultAdditionalData{MessageBase: MessageBase{MessageType_: "FightResultAdditionalData", id_: 8078}}
}
func (m *FightResultAdditionalData) Deserialize(input *DataWrapper) {
}

func (m *FightResultAdditionalData) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultExperienceData struct {
	MessageBase
	FightResultAdditionalData
	Experience                   int64
	ShowExperience               bool
	ExperienceLevelFloor         int64
	ShowExperienceLevelFloor     bool
	ExperienceNextLevelFloor     int64
	ShowExperienceNextLevelFloor bool
	ExperienceFightDelta         int64
	ShowExperienceFightDelta     bool
	ExperienceForGuild           int64
	ShowExperienceForGuild       bool
	ExperienceForMount           int64
	ShowExperienceForMount       bool
	IsIncarnationExperience      bool
	RerollExperienceMul          int8
}

func NewFightResultExperienceData() *FightResultExperienceData {
	return &FightResultExperienceData{MessageBase: MessageBase{MessageType_: "FightResultExperienceData", id_: 5571}}
}
func (m *FightResultExperienceData) Deserialize(input *DataWrapper) {
	m.FightResultAdditionalData.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.ShowExperience = (byteBox0>>0)&1 != 0
	m.ShowExperienceLevelFloor = (byteBox0>>1)&1 != 0
	m.ShowExperienceNextLevelFloor = (byteBox0>>2)&1 != 0
	m.ShowExperienceFightDelta = (byteBox0>>3)&1 != 0
	m.ShowExperienceForGuild = (byteBox0>>4)&1 != 0
	m.ShowExperienceForMount = (byteBox0>>5)&1 != 0
	m.IsIncarnationExperience = (byteBox0>>6)&1 != 0
	m.Experience = input.ReadVarUhLong()
	m.ExperienceLevelFloor = input.ReadVarUhLong()
	m.ExperienceNextLevelFloor = input.ReadVarUhLong()
	m.ExperienceFightDelta = input.ReadVarUhLong()
	m.ExperienceForGuild = input.ReadVarUhLong()
	m.ExperienceForMount = input.ReadVarUhLong()
	m.RerollExperienceMul = input.ReadByte()
}

func (m *FightResultExperienceData) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultFighterListEntry struct {
	MessageBase
	FightResultListEntry
	Id    float64
	Alive bool
}

func NewFightResultFighterListEntry() *FightResultFighterListEntry {
	return &FightResultFighterListEntry{MessageBase: MessageBase{MessageType_: "FightResultFighterListEntry", id_: 613}}
}
func (m *FightResultFighterListEntry) Deserialize(input *DataWrapper) {
	m.FightResultListEntry.Deserialize(input)
	m.Id = input.ReadDouble()
	m.Alive = input.ReadBoolean()
}

func (m *FightResultFighterListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultListEntryI interface {
	Deserialize(input *DataWrapper)
}

type FightResultListEntry struct {
	MessageBase
	Outcome int
	Wave    int8
	Rewards *FightLoot
}

func NewFightResultListEntry() *FightResultListEntry {
	return &FightResultListEntry{MessageBase: MessageBase{MessageType_: "FightResultListEntry", id_: 3594}}
}
func (m *FightResultListEntry) Deserialize(input *DataWrapper) {
	m.Outcome = input.ReadVarUhShort()
	m.Wave = input.ReadByte()
	m.Rewards = NewFightLoot()
	m.Rewards.Deserialize(input)
}

func (m *FightResultListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultMutantListEntry struct {
	MessageBase
	FightResultFighterListEntry
	Level int
}

func NewFightResultMutantListEntry() *FightResultMutantListEntry {
	return &FightResultMutantListEntry{MessageBase: MessageBase{MessageType_: "FightResultMutantListEntry", id_: 2795}}
}
func (m *FightResultMutantListEntry) Deserialize(input *DataWrapper) {
	m.FightResultFighterListEntry.Deserialize(input)
	m.Level = input.ReadVarUhShort()
}

func (m *FightResultMutantListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultPlayerListEntry struct {
	MessageBase
	FightResultFighterListEntry
	Level      int
	Additional *Vector[FightResultAdditionalDataI]
}

func NewFightResultPlayerListEntry() *FightResultPlayerListEntry {
	return &FightResultPlayerListEntry{MessageBase: MessageBase{MessageType_: "FightResultPlayerListEntry", id_: 6813}}
}
func (m *FightResultPlayerListEntry) Deserialize(input *DataWrapper) {
	m.FightResultFighterListEntry.Deserialize(input)
	m.Level = input.ReadVarUhShort()
	m.Additional = NewVector[FightResultAdditionalDataI]()
	additionalLen := int(input.ReadShort())
	for i := 0; i < additionalLen; i++ {
		foundFightResultAdditionalData := getDynamicType(input)
		if castedFightResultAdditionalData, ok := foundFightResultAdditionalData.(FightResultAdditionalDataI); ok {
			castedFightResultAdditionalData.Deserialize(input)
			m.Additional.Push(&castedFightResultAdditionalData)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement FightResultAdditionalDataI, got: " + fmt.Sprintf("%T", foundFightResultAdditionalData))
		}
	}
}

func (m *FightResultPlayerListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultPvpData struct {
	MessageBase
	FightResultAdditionalData
	Grade            uint8
	MinHonorForGrade int
	MaxHonorForGrade int
	Honor            int
	HonorDelta       int
}

func NewFightResultPvpData() *FightResultPvpData {
	return &FightResultPvpData{MessageBase: MessageBase{MessageType_: "FightResultPvpData", id_: 7233}}
}
func (m *FightResultPvpData) Deserialize(input *DataWrapper) {
	m.FightResultAdditionalData.Deserialize(input)
	m.Grade = input.ReadUnsignedByte()
	m.MinHonorForGrade = input.ReadVarUhShort()
	m.MaxHonorForGrade = input.ReadVarUhShort()
	m.Honor = input.ReadVarUhShort()
	m.HonorDelta = input.ReadVarShort()
}

func (m *FightResultPvpData) IsDeserializeFunctionComplete() bool {
	return true
}

type FightResultTaxCollectorListEntry struct {
	MessageBase
	FightResultFighterListEntry
	AllianceInfo *BasicAllianceInformations
}

func NewFightResultTaxCollectorListEntry() *FightResultTaxCollectorListEntry {
	return &FightResultTaxCollectorListEntry{MessageBase: MessageBase{MessageType_: "FightResultTaxCollectorListEntry", id_: 6507}}
}
func (m *FightResultTaxCollectorListEntry) Deserialize(input *DataWrapper) {
	m.FightResultFighterListEntry.Deserialize(input)
	m.AllianceInfo = NewBasicAllianceInformations()
	m.AllianceInfo.Deserialize(input)
}

func (m *FightResultTaxCollectorListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type FightStartingPositions struct {
	MessageBase
	PositionsForChallengers *Vector[int]
	PositionsForDefenders   *Vector[int]
}

func NewFightStartingPositions() *FightStartingPositions {
	return &FightStartingPositions{MessageBase: MessageBase{MessageType_: "FightStartingPositions", id_: 5557}}
}
func (m *FightStartingPositions) Deserialize(input *DataWrapper) {
	m.PositionsForChallengers = NewVector[int]()
	positionsForChallengersLen := int(input.ReadShort())
	for i := 0; i < positionsForChallengersLen; i++ {
		val := input.ReadVarShort()
		m.PositionsForChallengers.Push(&val)
	}
	m.PositionsForDefenders = NewVector[int]()
	positionsForDefendersLen := int(input.ReadShort())
	for i := 0; i < positionsForDefendersLen; i++ {
		val := input.ReadVarShort()
		m.PositionsForDefenders.Push(&val)
	}
}

func (m *FightStartingPositions) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamInformationsI interface {
	Deserialize(input *DataWrapper)
}

type FightTeamInformations struct {
	MessageBase
	AbstractFightTeamInformations
	TeamMembers *Vector[FightTeamMemberInformationsI]
}

func NewFightTeamInformations() *FightTeamInformations {
	return &FightTeamInformations{MessageBase: MessageBase{MessageType_: "FightTeamInformations", id_: 3291}}
}
func (m *FightTeamInformations) Deserialize(input *DataWrapper) {
	m.AbstractFightTeamInformations.Deserialize(input)
	m.TeamMembers = NewVector[FightTeamMemberInformationsI]()
	teamMembersLen := int(input.ReadShort())
	for i := 0; i < teamMembersLen; i++ {
		foundFightTeamMemberInformations := getDynamicType(input)
		if castedFightTeamMemberInformations, ok := foundFightTeamMemberInformations.(FightTeamMemberInformationsI); ok {
			castedFightTeamMemberInformations.Deserialize(input)
			m.TeamMembers.Push(&castedFightTeamMemberInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement FightTeamMemberInformationsI, got: " + fmt.Sprintf("%T", foundFightTeamMemberInformations))
		}
	}
}

func (m *FightTeamInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamLightInformations struct {
	MessageBase
	AbstractFightTeamInformations
	TeamMembersCount  int8
	MeanLevel         int
	HasFriend         bool
	HasGuildMember    bool
	HasAllianceMember bool
	HasGroupMember    bool
	HasMyTaxCollector bool
}

func NewFightTeamLightInformations() *FightTeamLightInformations {
	return &FightTeamLightInformations{MessageBase: MessageBase{MessageType_: "FightTeamLightInformations", id_: 6964}}
}
func (m *FightTeamLightInformations) Deserialize(input *DataWrapper) {
	m.AbstractFightTeamInformations.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.HasFriend = (byteBox0>>0)&1 != 0
	m.HasGuildMember = (byteBox0>>1)&1 != 0
	m.HasAllianceMember = (byteBox0>>2)&1 != 0
	m.HasGroupMember = (byteBox0>>3)&1 != 0
	m.HasMyTaxCollector = (byteBox0>>4)&1 != 0
	m.TeamMembersCount = input.ReadByte()
	m.MeanLevel = input.ReadVarUhInt()
}

func (m *FightTeamLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberCharacterInformations struct {
	MessageBase
	FightTeamMemberInformations
	Name  string
	Level int
}

func NewFightTeamMemberCharacterInformations() *FightTeamMemberCharacterInformations {
	return &FightTeamMemberCharacterInformations{MessageBase: MessageBase{MessageType_: "FightTeamMemberCharacterInformations", id_: 4535}}
}
func (m *FightTeamMemberCharacterInformations) Deserialize(input *DataWrapper) {
	m.FightTeamMemberInformations.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Level = input.ReadVarUhShort()
}

func (m *FightTeamMemberCharacterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberEntityInformation struct {
	MessageBase
	FightTeamMemberInformations
	EntityModelId int8
	Level         int
	MasterId      float64
}

func NewFightTeamMemberEntityInformation() *FightTeamMemberEntityInformation {
	return &FightTeamMemberEntityInformation{MessageBase: MessageBase{MessageType_: "FightTeamMemberEntityInformation", id_: 5854}}
}
func (m *FightTeamMemberEntityInformation) Deserialize(input *DataWrapper) {
	m.FightTeamMemberInformations.Deserialize(input)
	m.EntityModelId = input.ReadByte()
	m.Level = input.ReadVarUhShort()
	m.MasterId = input.ReadDouble()
}

func (m *FightTeamMemberEntityInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberInformationsI interface {
	Deserialize(input *DataWrapper)
}

type FightTeamMemberInformations struct {
	MessageBase
	Id float64
}

func NewFightTeamMemberInformations() *FightTeamMemberInformations {
	return &FightTeamMemberInformations{MessageBase: MessageBase{MessageType_: "FightTeamMemberInformations", id_: 9810}}
}
func (m *FightTeamMemberInformations) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
}

func (m *FightTeamMemberInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberMonsterInformations struct {
	MessageBase
	FightTeamMemberInformations
	MonsterId int32
	Grade     int8
}

func NewFightTeamMemberMonsterInformations() *FightTeamMemberMonsterInformations {
	return &FightTeamMemberMonsterInformations{MessageBase: MessageBase{MessageType_: "FightTeamMemberMonsterInformations", id_: 7397}}
}
func (m *FightTeamMemberMonsterInformations) Deserialize(input *DataWrapper) {
	m.FightTeamMemberInformations.Deserialize(input)
	m.MonsterId = input.ReadInt()
	m.Grade = input.ReadByte()
}

func (m *FightTeamMemberMonsterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberTaxCollectorInformations struct {
	MessageBase
	FightTeamMemberInformations
	FirstNameId int
	LastNameId  int
	GroupId     int
	Uid         float64
}

func NewFightTeamMemberTaxCollectorInformations() *FightTeamMemberTaxCollectorInformations {
	return &FightTeamMemberTaxCollectorInformations{MessageBase: MessageBase{MessageType_: "FightTeamMemberTaxCollectorInformations", id_: 4832}}
}
func (m *FightTeamMemberTaxCollectorInformations) Deserialize(input *DataWrapper) {
	m.FightTeamMemberInformations.Deserialize(input)
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
	m.GroupId = input.ReadVarUhInt()
	m.Uid = input.ReadDouble()
}

func (m *FightTeamMemberTaxCollectorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTeamMemberWithAllianceCharacterInformations struct {
	MessageBase
	FightTeamMemberCharacterInformations
	AllianceInfos *BasicAllianceInformations
}

func NewFightTeamMemberWithAllianceCharacterInformations() *FightTeamMemberWithAllianceCharacterInformations {
	return &FightTeamMemberWithAllianceCharacterInformations{MessageBase: MessageBase{MessageType_: "FightTeamMemberWithAllianceCharacterInformations", id_: 793}}
}
func (m *FightTeamMemberWithAllianceCharacterInformations) Deserialize(input *DataWrapper) {
	m.FightTeamMemberCharacterInformations.Deserialize(input)
	m.AllianceInfos = NewBasicAllianceInformations()
	m.AllianceInfos.Deserialize(input)
}

func (m *FightTeamMemberWithAllianceCharacterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTemporaryBoostEffect struct {
	MessageBase
	AbstractFightDispellableEffect
	Delta int32
}

func NewFightTemporaryBoostEffect() *FightTemporaryBoostEffect {
	return &FightTemporaryBoostEffect{MessageBase: MessageBase{MessageType_: "FightTemporaryBoostEffect", id_: 2521}}
}
func (m *FightTemporaryBoostEffect) Deserialize(input *DataWrapper) {
	m.AbstractFightDispellableEffect.Deserialize(input)
	m.Delta = input.ReadInt()
}

func (m *FightTemporaryBoostEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTemporaryBoostStateEffect struct {
	MessageBase
	FightTemporaryBoostEffect
	StateId int16
}

func NewFightTemporaryBoostStateEffect() *FightTemporaryBoostStateEffect {
	return &FightTemporaryBoostStateEffect{MessageBase: MessageBase{MessageType_: "FightTemporaryBoostStateEffect", id_: 4574}}
}
func (m *FightTemporaryBoostStateEffect) Deserialize(input *DataWrapper) {
	m.FightTemporaryBoostEffect.Deserialize(input)
	m.StateId = input.ReadShort()
}

func (m *FightTemporaryBoostStateEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTemporaryBoostWeaponDamagesEffect struct {
	MessageBase
	FightTemporaryBoostEffect
	WeaponTypeId int16
}

func NewFightTemporaryBoostWeaponDamagesEffect() *FightTemporaryBoostWeaponDamagesEffect {
	return &FightTemporaryBoostWeaponDamagesEffect{MessageBase: MessageBase{MessageType_: "FightTemporaryBoostWeaponDamagesEffect", id_: 9695}}
}
func (m *FightTemporaryBoostWeaponDamagesEffect) Deserialize(input *DataWrapper) {
	m.FightTemporaryBoostEffect.Deserialize(input)
	m.WeaponTypeId = input.ReadShort()
}

func (m *FightTemporaryBoostWeaponDamagesEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTemporarySpellBoostEffect struct {
	MessageBase
	FightTemporaryBoostEffect
	BoostedSpellId int
}

func NewFightTemporarySpellBoostEffect() *FightTemporarySpellBoostEffect {
	return &FightTemporarySpellBoostEffect{MessageBase: MessageBase{MessageType_: "FightTemporarySpellBoostEffect", id_: 7119}}
}
func (m *FightTemporarySpellBoostEffect) Deserialize(input *DataWrapper) {
	m.FightTemporaryBoostEffect.Deserialize(input)
	m.BoostedSpellId = input.ReadVarUhShort()
}

func (m *FightTemporarySpellBoostEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTemporarySpellImmunityEffect struct {
	MessageBase
	AbstractFightDispellableEffect
	ImmuneSpellId int32
}

func NewFightTemporarySpellImmunityEffect() *FightTemporarySpellImmunityEffect {
	return &FightTemporarySpellImmunityEffect{MessageBase: MessageBase{MessageType_: "FightTemporarySpellImmunityEffect", id_: 3450}}
}
func (m *FightTemporarySpellImmunityEffect) Deserialize(input *DataWrapper) {
	m.AbstractFightDispellableEffect.Deserialize(input)
	m.ImmuneSpellId = input.ReadInt()
}

func (m *FightTemporarySpellImmunityEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FightTriggeredEffect struct {
	MessageBase
	AbstractFightDispellableEffect
	Param1 int32
	Param2 int32
	Param3 int32
	Delay  int16
}

func NewFightTriggeredEffect() *FightTriggeredEffect {
	return &FightTriggeredEffect{MessageBase: MessageBase{MessageType_: "FightTriggeredEffect", id_: 5487}}
}
func (m *FightTriggeredEffect) Deserialize(input *DataWrapper) {
	m.AbstractFightDispellableEffect.Deserialize(input)
	m.Param1 = input.ReadInt()
	m.Param2 = input.ReadInt()
	m.Param3 = input.ReadInt()
	m.Delay = input.ReadShort()
}

func (m *FightTriggeredEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type FighterStatsListMessage struct {
	MessageBase
	Stats *CharacterCharacteristicsInformations
}

func NewFighterStatsListMessage() *FighterStatsListMessage {
	return &FighterStatsListMessage{MessageBase: MessageBase{MessageType_: "FighterStatsListMessage", id_: 4354}}
}
func (m *FighterStatsListMessage) Deserialize(input *DataWrapper) {
	m.Stats = NewCharacterCharacteristicsInformations()
	m.Stats.Deserialize(input)
}

func (m *FighterStatsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FinishMoveInformations struct {
	MessageBase
	FinishMoveId    int32
	FinishMoveState bool
}

func NewFinishMoveInformations() *FinishMoveInformations {
	return &FinishMoveInformations{MessageBase: MessageBase{MessageType_: "FinishMoveInformations", id_: 8829}}
}
func (m *FinishMoveInformations) Deserialize(input *DataWrapper) {
	m.FinishMoveId = input.ReadInt()
	m.FinishMoveState = input.ReadBoolean()
}

func (m *FinishMoveInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FinishMoveListMessage struct {
	MessageBase
	FinishMoves *Vector[FinishMoveInformations]
}

func NewFinishMoveListMessage() *FinishMoveListMessage {
	return &FinishMoveListMessage{MessageBase: MessageBase{MessageType_: "FinishMoveListMessage", id_: 4769}}
}
func (m *FinishMoveListMessage) Deserialize(input *DataWrapper) {
	m.FinishMoves = NewVector[FinishMoveInformations]()
	finishMovesLen := int(input.ReadShort())
	for i := 0; i < finishMovesLen; i++ {
		FinishMoveInformations := NewFinishMoveInformations()
		FinishMoveInformations.Deserialize(input)
		m.FinishMoves.Push(FinishMoveInformations)
	}
}

func (m *FinishMoveListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FinishMoveListRequestMessage struct {
	MessageBase
}

func NewFinishMoveListRequestMessage() *FinishMoveListRequestMessage {
	return &FinishMoveListRequestMessage{MessageBase: MessageBase{MessageType_: "FinishMoveListRequestMessage", id_: 2859}}
}
func (m *FinishMoveListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *FinishMoveListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FinishMoveSetRequestMessage struct {
	MessageBase
	FinishMoveId    int32
	FinishMoveState bool
}

func NewFinishMoveSetRequestMessage() *FinishMoveSetRequestMessage {
	return &FinishMoveSetRequestMessage{MessageBase: MessageBase{MessageType_: "FinishMoveSetRequestMessage", id_: 6930}}
}
func (m *FinishMoveSetRequestMessage) Deserialize(input *DataWrapper) {
	m.FinishMoveId = input.ReadInt()
	m.FinishMoveState = input.ReadBoolean()
}

func (m *FinishMoveSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FocusedExchangeReadyMessage struct {
	MessageBase
	ExchangeReadyMessage
	FocusActionId int
}

func NewFocusedExchangeReadyMessage() *FocusedExchangeReadyMessage {
	return &FocusedExchangeReadyMessage{MessageBase: MessageBase{MessageType_: "FocusedExchangeReadyMessage", id_: 885}}
}
func (m *FocusedExchangeReadyMessage) Deserialize(input *DataWrapper) {
	m.ExchangeReadyMessage.Deserialize(input)
	m.FocusActionId = input.ReadVarUhInt()
}

func (m *FocusedExchangeReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FollowQuestObjectiveRequestMessage struct {
	MessageBase
	QuestId     int
	ObjectiveId int16
}

func NewFollowQuestObjectiveRequestMessage() *FollowQuestObjectiveRequestMessage {
	return &FollowQuestObjectiveRequestMessage{MessageBase: MessageBase{MessageType_: "FollowQuestObjectiveRequestMessage", id_: 2913}}
}
func (m *FollowQuestObjectiveRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.ObjectiveId = input.ReadShort()
}

func (m *FollowQuestObjectiveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FollowedQuestsMessage struct {
	MessageBase
	Quests *Vector[QuestActiveDetailedInformations]
}

func NewFollowedQuestsMessage() *FollowedQuestsMessage {
	return &FollowedQuestsMessage{MessageBase: MessageBase{MessageType_: "FollowedQuestsMessage", id_: 6589}}
}
func (m *FollowedQuestsMessage) Deserialize(input *DataWrapper) {
	m.Quests = NewVector[QuestActiveDetailedInformations]()
	questsLen := int(input.ReadShort())
	for i := 0; i < questsLen; i++ {
		QuestActiveDetailedInformations := NewQuestActiveDetailedInformations()
		QuestActiveDetailedInformations.Deserialize(input)
		m.Quests.Push(QuestActiveDetailedInformations)
	}
}

func (m *FollowedQuestsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForceAccountErrorMessage struct {
	MessageBase
}

func NewForceAccountErrorMessage() *ForceAccountErrorMessage {
	return &ForceAccountErrorMessage{MessageBase: MessageBase{MessageType_: "ForceAccountErrorMessage", id_: 5352}}
}
func (m *ForceAccountErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *ForceAccountErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForceAccountMessage struct {
	MessageBase
	AccountId int32
}

func NewForceAccountMessage() *ForceAccountMessage {
	return &ForceAccountMessage{MessageBase: MessageBase{MessageType_: "ForceAccountMessage", id_: 5654}}
}
func (m *ForceAccountMessage) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
}

func (m *ForceAccountMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForceAccountStatusMessage struct {
	MessageBase
	Force           bool
	ForcedAccountId int32
	ForcedNickname  string
	ForcedTag       string
}

func NewForceAccountStatusMessage() *ForceAccountStatusMessage {
	return &ForceAccountStatusMessage{MessageBase: MessageBase{MessageType_: "ForceAccountStatusMessage", id_: 25}}
}
func (m *ForceAccountStatusMessage) Deserialize(input *DataWrapper) {
	m.Force = input.ReadBoolean()
	m.ForcedAccountId = input.ReadInt()
	m.ForcedNickname = input.ReadUTF()
	m.ForcedTag = input.ReadUTF()
}

func (m *ForceAccountStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellClientActionMessage struct {
	MessageBase
	SpellId int32
	Action  int8
}

func NewForgettableSpellClientActionMessage() *ForgettableSpellClientActionMessage {
	return &ForgettableSpellClientActionMessage{MessageBase: MessageBase{MessageType_: "ForgettableSpellClientActionMessage", id_: 5459}}
}
func (m *ForgettableSpellClientActionMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadInt()
	m.Action = input.ReadByte()
}

func (m *ForgettableSpellClientActionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellDeleteMessage struct {
	MessageBase
	Reason int8
	Spells *Vector[int32]
}

func NewForgettableSpellDeleteMessage() *ForgettableSpellDeleteMessage {
	return &ForgettableSpellDeleteMessage{MessageBase: MessageBase{MessageType_: "ForgettableSpellDeleteMessage", id_: 4353}}
}
func (m *ForgettableSpellDeleteMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
	m.Spells = NewVector[int32]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		val := input.ReadInt()
		m.Spells.Push(&val)
	}
}

func (m *ForgettableSpellDeleteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellEquipmentSlotsMessage struct {
	MessageBase
	Quantity int
}

func NewForgettableSpellEquipmentSlotsMessage() *ForgettableSpellEquipmentSlotsMessage {
	return &ForgettableSpellEquipmentSlotsMessage{MessageBase: MessageBase{MessageType_: "ForgettableSpellEquipmentSlotsMessage", id_: 41}}
}
func (m *ForgettableSpellEquipmentSlotsMessage) Deserialize(input *DataWrapper) {
	m.Quantity = input.ReadVarShort()
}

func (m *ForgettableSpellEquipmentSlotsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellItem struct {
	MessageBase
	SpellItem
	Available bool
}

func NewForgettableSpellItem() *ForgettableSpellItem {
	return &ForgettableSpellItem{MessageBase: MessageBase{MessageType_: "ForgettableSpellItem", id_: 2798}}
}
func (m *ForgettableSpellItem) Deserialize(input *DataWrapper) {
	m.SpellItem.Deserialize(input)
	m.Available = input.ReadBoolean()
}

func (m *ForgettableSpellItem) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellListUpdateMessage struct {
	MessageBase
	Action int8
	Spells *Vector[ForgettableSpellItem]
}

func NewForgettableSpellListUpdateMessage() *ForgettableSpellListUpdateMessage {
	return &ForgettableSpellListUpdateMessage{MessageBase: MessageBase{MessageType_: "ForgettableSpellListUpdateMessage", id_: 6155}}
}
func (m *ForgettableSpellListUpdateMessage) Deserialize(input *DataWrapper) {
	m.Action = input.ReadByte()
	m.Spells = NewVector[ForgettableSpellItem]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		ForgettableSpellItem := NewForgettableSpellItem()
		ForgettableSpellItem.Deserialize(input)
		m.Spells.Push(ForgettableSpellItem)
	}
}

func (m *ForgettableSpellListUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ForgettableSpellsPreset struct {
	MessageBase
	Preset
	BaseSpellsPreset  *SpellsPreset
	ForgettableSpells *Vector[SpellForPreset]
}

func NewForgettableSpellsPreset() *ForgettableSpellsPreset {
	return &ForgettableSpellsPreset{MessageBase: MessageBase{MessageType_: "ForgettableSpellsPreset", id_: 6253}}
}
func (m *ForgettableSpellsPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.BaseSpellsPreset = NewSpellsPreset()
	m.BaseSpellsPreset.Deserialize(input)
	m.ForgettableSpells = NewVector[SpellForPreset]()
	forgettableSpellsLen := int(input.ReadShort())
	for i := 0; i < forgettableSpellsLen; i++ {
		SpellForPreset := NewSpellForPreset()
		SpellForPreset.Deserialize(input)
		m.ForgettableSpells.Push(SpellForPreset)
	}
}

func (m *ForgettableSpellsPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendAddFailureMessage struct {
	MessageBase
	Reason int8
}

func NewFriendAddFailureMessage() *FriendAddFailureMessage {
	return &FriendAddFailureMessage{MessageBase: MessageBase{MessageType_: "FriendAddFailureMessage", id_: 6674}}
}
func (m *FriendAddFailureMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *FriendAddFailureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendAddRequestMessage struct {
	MessageBase
	Target AbstractPlayerSearchInformationI
}

func NewFriendAddRequestMessage() *FriendAddRequestMessage {
	return &FriendAddRequestMessage{MessageBase: MessageBase{MessageType_: "FriendAddRequestMessage", id_: 5713}}
}
func (m *FriendAddRequestMessage) Deserialize(input *DataWrapper) {
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
}

func (m *FriendAddRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendAddedMessage struct {
	MessageBase
	FriendAdded FriendInformationsI
}

func NewFriendAddedMessage() *FriendAddedMessage {
	return &FriendAddedMessage{MessageBase: MessageBase{MessageType_: "FriendAddedMessage", id_: 3185}}
}
func (m *FriendAddedMessage) Deserialize(input *DataWrapper) {
	m.FriendAdded = getDynamicType(input)
	m.FriendAdded.Deserialize(input)
}

func (m *FriendAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendDeleteRequestMessage struct {
	MessageBase
	AccountId int32
}

func NewFriendDeleteRequestMessage() *FriendDeleteRequestMessage {
	return &FriendDeleteRequestMessage{MessageBase: MessageBase{MessageType_: "FriendDeleteRequestMessage", id_: 9081}}
}
func (m *FriendDeleteRequestMessage) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
}

func (m *FriendDeleteRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendDeleteResultMessage struct {
	MessageBase
	Success bool
	Tag     *AccountTagInformation
}

func NewFriendDeleteResultMessage() *FriendDeleteResultMessage {
	return &FriendDeleteResultMessage{MessageBase: MessageBase{MessageType_: "FriendDeleteResultMessage", id_: 4930}}
}
func (m *FriendDeleteResultMessage) Deserialize(input *DataWrapper) {
	m.Success = input.ReadBoolean()
	m.Tag = NewAccountTagInformation()
	m.Tag.Deserialize(input)
}

func (m *FriendDeleteResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendGuildSetWarnOnAchievementCompleteMessage struct {
	MessageBase
	Enable bool
}

func NewFriendGuildSetWarnOnAchievementCompleteMessage() *FriendGuildSetWarnOnAchievementCompleteMessage {
	return &FriendGuildSetWarnOnAchievementCompleteMessage{MessageBase: MessageBase{MessageType_: "FriendGuildSetWarnOnAchievementCompleteMessage", id_: 2747}}
}
func (m *FriendGuildSetWarnOnAchievementCompleteMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendGuildSetWarnOnAchievementCompleteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendGuildWarnOnAchievementCompleteStateMessage struct {
	MessageBase
	Enable bool
}

func NewFriendGuildWarnOnAchievementCompleteStateMessage() *FriendGuildWarnOnAchievementCompleteStateMessage {
	return &FriendGuildWarnOnAchievementCompleteStateMessage{MessageBase: MessageBase{MessageType_: "FriendGuildWarnOnAchievementCompleteStateMessage", id_: 1328}}
}
func (m *FriendGuildWarnOnAchievementCompleteStateMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendGuildWarnOnAchievementCompleteStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendInformationsI interface {
	Deserialize(input *DataWrapper)
}

type FriendInformations struct {
	MessageBase
	AbstractContactInformations
	PlayerState       int8
	LastConnection    int
	AchievementPoints int32
	LeagueId          int
	LadderPosition    int32
}

func NewFriendInformations() *FriendInformations {
	return &FriendInformations{MessageBase: MessageBase{MessageType_: "FriendInformations", id_: 861}}
}
func (m *FriendInformations) Deserialize(input *DataWrapper) {
	m.AbstractContactInformations.Deserialize(input)
	m.PlayerState = input.ReadByte()
	m.LastConnection = input.ReadVarUhShort()
	m.AchievementPoints = input.ReadInt()
	m.LeagueId = input.ReadVarShort()
	m.LadderPosition = input.ReadInt()
}

func (m *FriendInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendJoinRequestMessage struct {
	MessageBase
	Target AbstractPlayerSearchInformationI
}

func NewFriendJoinRequestMessage() *FriendJoinRequestMessage {
	return &FriendJoinRequestMessage{MessageBase: MessageBase{MessageType_: "FriendJoinRequestMessage", id_: 5530}}
}
func (m *FriendJoinRequestMessage) Deserialize(input *DataWrapper) {
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
}

func (m *FriendJoinRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendOnlineInformations struct {
	MessageBase
	FriendInformations
	PlayerId       int64
	PlayerName     string
	Level          int
	AlignmentSide  int8
	Breed          int8
	Sex            bool
	GuildInfo      *GuildInformations
	MoodSmileyId   int
	Status         PlayerStatusI
	HavenBagShared bool
}

func NewFriendOnlineInformations() *FriendOnlineInformations {
	return &FriendOnlineInformations{MessageBase: MessageBase{MessageType_: "FriendOnlineInformations", id_: 9348}}
}
func (m *FriendOnlineInformations) Deserialize(input *DataWrapper) {
	m.FriendInformations.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.Sex = (byteBox0>>0)&1 != 0
	m.HavenBagShared = (byteBox0>>1)&1 != 0
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.Level = input.ReadVarUhShort()
	m.AlignmentSide = input.ReadByte()
	m.Breed = input.ReadByte()
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
	m.MoodSmileyId = input.ReadVarUhShort()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
}

func (m *FriendOnlineInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSetStatusShareMessage struct {
	MessageBase
	Share bool
}

func NewFriendSetStatusShareMessage() *FriendSetStatusShareMessage {
	return &FriendSetStatusShareMessage{MessageBase: MessageBase{MessageType_: "FriendSetStatusShareMessage", id_: 5816}}
}
func (m *FriendSetStatusShareMessage) Deserialize(input *DataWrapper) {
	m.Share = input.ReadBoolean()
}

func (m *FriendSetStatusShareMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSetWarnOnConnectionMessage struct {
	MessageBase
	Enable bool
}

func NewFriendSetWarnOnConnectionMessage() *FriendSetWarnOnConnectionMessage {
	return &FriendSetWarnOnConnectionMessage{MessageBase: MessageBase{MessageType_: "FriendSetWarnOnConnectionMessage", id_: 7385}}
}
func (m *FriendSetWarnOnConnectionMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendSetWarnOnConnectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSetWarnOnLevelGainMessage struct {
	MessageBase
	Enable bool
}

func NewFriendSetWarnOnLevelGainMessage() *FriendSetWarnOnLevelGainMessage {
	return &FriendSetWarnOnLevelGainMessage{MessageBase: MessageBase{MessageType_: "FriendSetWarnOnLevelGainMessage", id_: 5437}}
}
func (m *FriendSetWarnOnLevelGainMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendSetWarnOnLevelGainMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSpouseFollowWithCompassRequestMessage struct {
	MessageBase
	Enable bool
}

func NewFriendSpouseFollowWithCompassRequestMessage() *FriendSpouseFollowWithCompassRequestMessage {
	return &FriendSpouseFollowWithCompassRequestMessage{MessageBase: MessageBase{MessageType_: "FriendSpouseFollowWithCompassRequestMessage", id_: 3784}}
}
func (m *FriendSpouseFollowWithCompassRequestMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendSpouseFollowWithCompassRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSpouseInformationsI interface {
	Deserialize(input *DataWrapper)
}

type FriendSpouseInformations struct {
	MessageBase
	SpouseAccountId  int32
	SpouseId         int64
	SpouseName       string
	SpouseLevel      int
	Breed            int8
	Sex              int8
	SpouseEntityLook *EntityLook
	GuildInfo        *GuildInformations
	AlignmentSide    int8
}

func NewFriendSpouseInformations() *FriendSpouseInformations {
	return &FriendSpouseInformations{MessageBase: MessageBase{MessageType_: "FriendSpouseInformations", id_: 8260}}
}
func (m *FriendSpouseInformations) Deserialize(input *DataWrapper) {
	m.SpouseAccountId = input.ReadInt()
	m.SpouseId = input.ReadVarUhLong()
	m.SpouseName = input.ReadUTF()
	m.SpouseLevel = input.ReadVarUhShort()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadByte()
	m.SpouseEntityLook = NewEntityLook()
	m.SpouseEntityLook.Deserialize(input)
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
	m.AlignmentSide = input.ReadByte()
}

func (m *FriendSpouseInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSpouseJoinRequestMessage struct {
	MessageBase
}

func NewFriendSpouseJoinRequestMessage() *FriendSpouseJoinRequestMessage {
	return &FriendSpouseJoinRequestMessage{MessageBase: MessageBase{MessageType_: "FriendSpouseJoinRequestMessage", id_: 2260}}
}
func (m *FriendSpouseJoinRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *FriendSpouseJoinRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendSpouseOnlineInformations struct {
	MessageBase
	FriendSpouseInformations
	MapId        float64
	SubAreaId    int
	InFight      bool
	FollowSpouse bool
}

func NewFriendSpouseOnlineInformations() *FriendSpouseOnlineInformations {
	return &FriendSpouseOnlineInformations{MessageBase: MessageBase{MessageType_: "FriendSpouseOnlineInformations", id_: 8676}}
}
func (m *FriendSpouseOnlineInformations) Deserialize(input *DataWrapper) {
	m.FriendSpouseInformations.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.InFight = (byteBox0>>0)&1 != 0
	m.FollowSpouse = (byteBox0>>1)&1 != 0
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *FriendSpouseOnlineInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendStatusShareStateMessage struct {
	MessageBase
	Share bool
}

func NewFriendStatusShareStateMessage() *FriendStatusShareStateMessage {
	return &FriendStatusShareStateMessage{MessageBase: MessageBase{MessageType_: "FriendStatusShareStateMessage", id_: 8565}}
}
func (m *FriendStatusShareStateMessage) Deserialize(input *DataWrapper) {
	m.Share = input.ReadBoolean()
}

func (m *FriendStatusShareStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendUpdateMessage struct {
	MessageBase
	FriendUpdated FriendInformationsI
}

func NewFriendUpdateMessage() *FriendUpdateMessage {
	return &FriendUpdateMessage{MessageBase: MessageBase{MessageType_: "FriendUpdateMessage", id_: 7293}}
}
func (m *FriendUpdateMessage) Deserialize(input *DataWrapper) {
	m.FriendUpdated = getDynamicType(input)
	m.FriendUpdated.Deserialize(input)
}

func (m *FriendUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendWarnOnConnectionStateMessage struct {
	MessageBase
	Enable bool
}

func NewFriendWarnOnConnectionStateMessage() *FriendWarnOnConnectionStateMessage {
	return &FriendWarnOnConnectionStateMessage{MessageBase: MessageBase{MessageType_: "FriendWarnOnConnectionStateMessage", id_: 584}}
}
func (m *FriendWarnOnConnectionStateMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendWarnOnConnectionStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendWarnOnLevelGainStateMessage struct {
	MessageBase
	Enable bool
}

func NewFriendWarnOnLevelGainStateMessage() *FriendWarnOnLevelGainStateMessage {
	return &FriendWarnOnLevelGainStateMessage{MessageBase: MessageBase{MessageType_: "FriendWarnOnLevelGainStateMessage", id_: 2158}}
}
func (m *FriendWarnOnLevelGainStateMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *FriendWarnOnLevelGainStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendsGetListMessage struct {
	MessageBase
}

func NewFriendsGetListMessage() *FriendsGetListMessage {
	return &FriendsGetListMessage{MessageBase: MessageBase{MessageType_: "FriendsGetListMessage", id_: 14}}
}
func (m *FriendsGetListMessage) Deserialize(input *DataWrapper) {
}

func (m *FriendsGetListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FriendsListMessage struct {
	MessageBase
	FriendsList *Vector[FriendInformationsI]
}

func NewFriendsListMessage() *FriendsListMessage {
	return &FriendsListMessage{MessageBase: MessageBase{MessageType_: "FriendsListMessage", id_: 4172}}
}
func (m *FriendsListMessage) Deserialize(input *DataWrapper) {
	m.FriendsList = NewVector[FriendInformationsI]()
	friendsListLen := int(input.ReadShort())
	for i := 0; i < friendsListLen; i++ {
		foundFriendInformations := getDynamicType(input)
		if castedFriendInformations, ok := foundFriendInformations.(FriendInformationsI); ok {
			castedFriendInformations.Deserialize(input)
			m.FriendsList.Push(&castedFriendInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement FriendInformationsI, got: " + fmt.Sprintf("%T", foundFriendInformations))
		}
	}
}

func (m *FriendsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type FullStatsPreset struct {
	MessageBase
	Preset
	Stats *Vector[CharacterCharacteristicForPreset]
}

func NewFullStatsPreset() *FullStatsPreset {
	return &FullStatsPreset{MessageBase: MessageBase{MessageType_: "FullStatsPreset", id_: 4653}}
}
func (m *FullStatsPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.Stats = NewVector[CharacterCharacteristicForPreset]()
	statsLen := int(input.ReadShort())
	for i := 0; i < statsLen; i++ {
		CharacterCharacteristicForPreset := NewCharacterCharacteristicForPreset()
		CharacterCharacteristicForPreset.Deserialize(input)
		m.Stats.Push(CharacterCharacteristicForPreset)
	}
}

func (m *FullStatsPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionAcknowledgementMessage struct {
	MessageBase
	Valid    bool
	ActionId int8
}

func NewGameActionAcknowledgementMessage() *GameActionAcknowledgementMessage {
	return &GameActionAcknowledgementMessage{MessageBase: MessageBase{MessageType_: "GameActionAcknowledgementMessage", id_: 5751}}
}
func (m *GameActionAcknowledgementMessage) Deserialize(input *DataWrapper) {
	m.Valid = input.ReadBoolean()
	m.ActionId = input.ReadByte()
}

func (m *GameActionAcknowledgementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightActivateGlyphTrapMessage struct {
	MessageBase
	AbstractGameActionMessage
	MarkId int16
	Active bool
}

func NewGameActionFightActivateGlyphTrapMessage() *GameActionFightActivateGlyphTrapMessage {
	return &GameActionFightActivateGlyphTrapMessage{MessageBase: MessageBase{MessageType_: "GameActionFightActivateGlyphTrapMessage", id_: 5706}}
}
func (m *GameActionFightActivateGlyphTrapMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.MarkId = input.ReadShort()
	m.Active = input.ReadBoolean()
}

func (m *GameActionFightActivateGlyphTrapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightCarryCharacterMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	CellId   int16
}

func NewGameActionFightCarryCharacterMessage() *GameActionFightCarryCharacterMessage {
	return &GameActionFightCarryCharacterMessage{MessageBase: MessageBase{MessageType_: "GameActionFightCarryCharacterMessage", id_: 5771}}
}
func (m *GameActionFightCarryCharacterMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightCarryCharacterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightCastOnTargetRequestMessage struct {
	MessageBase
	SpellId  int
	TargetId float64
}

func NewGameActionFightCastOnTargetRequestMessage() *GameActionFightCastOnTargetRequestMessage {
	return &GameActionFightCastOnTargetRequestMessage{MessageBase: MessageBase{MessageType_: "GameActionFightCastOnTargetRequestMessage", id_: 6910}}
}
func (m *GameActionFightCastOnTargetRequestMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightCastOnTargetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightCastRequestMessage struct {
	MessageBase
	SpellId int
	CellId  int16
}

func NewGameActionFightCastRequestMessage() *GameActionFightCastRequestMessage {
	return &GameActionFightCastRequestMessage{MessageBase: MessageBase{MessageType_: "GameActionFightCastRequestMessage", id_: 6438}}
}
func (m *GameActionFightCastRequestMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightCastRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightChangeLookMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId   float64
	EntityLook *EntityLook
}

func NewGameActionFightChangeLookMessage() *GameActionFightChangeLookMessage {
	return &GameActionFightChangeLookMessage{MessageBase: MessageBase{MessageType_: "GameActionFightChangeLookMessage", id_: 1629}}
}
func (m *GameActionFightChangeLookMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.EntityLook = NewEntityLook()
	m.EntityLook.Deserialize(input)
}

func (m *GameActionFightChangeLookMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightCloseCombatMessage struct {
	MessageBase
	AbstractGameActionFightTargetedAbilityMessage
	WeaponGenericId int
}

func NewGameActionFightCloseCombatMessage() *GameActionFightCloseCombatMessage {
	return &GameActionFightCloseCombatMessage{MessageBase: MessageBase{MessageType_: "GameActionFightCloseCombatMessage", id_: 2405}}
}
func (m *GameActionFightCloseCombatMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionFightTargetedAbilityMessage.Deserialize(input)
	m.WeaponGenericId = input.ReadVarUhInt()
}

func (m *GameActionFightCloseCombatMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDeathMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
}

func NewGameActionFightDeathMessage() *GameActionFightDeathMessage {
	return &GameActionFightDeathMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDeathMessage", id_: 9724}}
}
func (m *GameActionFightDeathMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightDeathMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDispellEffectMessage struct {
	MessageBase
	GameActionFightDispellMessage
	BoostUID int32
}

func NewGameActionFightDispellEffectMessage() *GameActionFightDispellEffectMessage {
	return &GameActionFightDispellEffectMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDispellEffectMessage", id_: 8550}}
}
func (m *GameActionFightDispellEffectMessage) Deserialize(input *DataWrapper) {
	m.GameActionFightDispellMessage.Deserialize(input)
	m.BoostUID = input.ReadInt()
}

func (m *GameActionFightDispellEffectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDispellMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId    float64
	VerboseCast bool
}

func NewGameActionFightDispellMessage() *GameActionFightDispellMessage {
	return &GameActionFightDispellMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDispellMessage", id_: 9152}}
}
func (m *GameActionFightDispellMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.VerboseCast = input.ReadBoolean()
}

func (m *GameActionFightDispellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDispellSpellMessage struct {
	MessageBase
	GameActionFightDispellMessage
	SpellId int
}

func NewGameActionFightDispellSpellMessage() *GameActionFightDispellSpellMessage {
	return &GameActionFightDispellSpellMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDispellSpellMessage", id_: 4714}}
}
func (m *GameActionFightDispellSpellMessage) Deserialize(input *DataWrapper) {
	m.GameActionFightDispellMessage.Deserialize(input)
	m.SpellId = input.ReadVarUhShort()
}

func (m *GameActionFightDispellSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDispellableEffectMessage struct {
	MessageBase
	AbstractGameActionMessage
	Effect AbstractFightDispellableEffectI
}

func NewGameActionFightDispellableEffectMessage() *GameActionFightDispellableEffectMessage {
	return &GameActionFightDispellableEffectMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDispellableEffectMessage", id_: 3071}}
}
func (m *GameActionFightDispellableEffectMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.Effect = getDynamicType(input)
	m.Effect.Deserialize(input)
}

func (m *GameActionFightDispellableEffectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDodgePointLossMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Amount   int
}

func NewGameActionFightDodgePointLossMessage() *GameActionFightDodgePointLossMessage {
	return &GameActionFightDodgePointLossMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDodgePointLossMessage", id_: 7515}}
}
func (m *GameActionFightDodgePointLossMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Amount = input.ReadVarUhShort()
}

func (m *GameActionFightDodgePointLossMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightDropCharacterMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	CellId   int16
}

func NewGameActionFightDropCharacterMessage() *GameActionFightDropCharacterMessage {
	return &GameActionFightDropCharacterMessage{MessageBase: MessageBase{MessageType_: "GameActionFightDropCharacterMessage", id_: 8009}}
}
func (m *GameActionFightDropCharacterMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightDropCharacterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightExchangePositionsMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId     float64
	CasterCellId int16
	TargetCellId int16
}

func NewGameActionFightExchangePositionsMessage() *GameActionFightExchangePositionsMessage {
	return &GameActionFightExchangePositionsMessage{MessageBase: MessageBase{MessageType_: "GameActionFightExchangePositionsMessage", id_: 8976}}
}
func (m *GameActionFightExchangePositionsMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CasterCellId = input.ReadShort()
	m.TargetCellId = input.ReadShort()
}

func (m *GameActionFightExchangePositionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightInvisibilityMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	State    int8
}

func NewGameActionFightInvisibilityMessage() *GameActionFightInvisibilityMessage {
	return &GameActionFightInvisibilityMessage{MessageBase: MessageBase{MessageType_: "GameActionFightInvisibilityMessage", id_: 2495}}
}
func (m *GameActionFightInvisibilityMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.State = input.ReadByte()
}

func (m *GameActionFightInvisibilityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightInvisibleDetectedMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	CellId   int16
}

func NewGameActionFightInvisibleDetectedMessage() *GameActionFightInvisibleDetectedMessage {
	return &GameActionFightInvisibleDetectedMessage{MessageBase: MessageBase{MessageType_: "GameActionFightInvisibleDetectedMessage", id_: 7285}}
}
func (m *GameActionFightInvisibleDetectedMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightInvisibleDetectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightKillMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
}

func NewGameActionFightKillMessage() *GameActionFightKillMessage {
	return &GameActionFightKillMessage{MessageBase: MessageBase{MessageType_: "GameActionFightKillMessage", id_: 6293}}
}
func (m *GameActionFightKillMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightKillMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightLifeAndShieldPointsLostMessage struct {
	MessageBase
	GameActionFightLifePointsLostMessage
	ShieldLoss int
}

func NewGameActionFightLifeAndShieldPointsLostMessage() *GameActionFightLifeAndShieldPointsLostMessage {
	return &GameActionFightLifeAndShieldPointsLostMessage{MessageBase: MessageBase{MessageType_: "GameActionFightLifeAndShieldPointsLostMessage", id_: 5703}}
}
func (m *GameActionFightLifeAndShieldPointsLostMessage) Deserialize(input *DataWrapper) {
	m.GameActionFightLifePointsLostMessage.Deserialize(input)
	m.ShieldLoss = input.ReadVarUhShort()
}

func (m *GameActionFightLifeAndShieldPointsLostMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightLifePointsGainMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Delta    int
}

func NewGameActionFightLifePointsGainMessage() *GameActionFightLifePointsGainMessage {
	return &GameActionFightLifePointsGainMessage{MessageBase: MessageBase{MessageType_: "GameActionFightLifePointsGainMessage", id_: 6590}}
}
func (m *GameActionFightLifePointsGainMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Delta = input.ReadVarUhInt()
}

func (m *GameActionFightLifePointsGainMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightLifePointsLostMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId         float64
	Loss             int
	PermanentDamages int
	ElementId        int
}

func NewGameActionFightLifePointsLostMessage() *GameActionFightLifePointsLostMessage {
	return &GameActionFightLifePointsLostMessage{MessageBase: MessageBase{MessageType_: "GameActionFightLifePointsLostMessage", id_: 6444}}
}
func (m *GameActionFightLifePointsLostMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Loss = input.ReadVarUhInt()
	m.PermanentDamages = input.ReadVarUhInt()
	m.ElementId = input.ReadVarInt()
}

func (m *GameActionFightLifePointsLostMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightMarkCellsMessage struct {
	MessageBase
	AbstractGameActionMessage
	Mark *GameActionMark
}

func NewGameActionFightMarkCellsMessage() *GameActionFightMarkCellsMessage {
	return &GameActionFightMarkCellsMessage{MessageBase: MessageBase{MessageType_: "GameActionFightMarkCellsMessage", id_: 432}}
}
func (m *GameActionFightMarkCellsMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.Mark = NewGameActionMark()
	m.Mark.Deserialize(input)
}

func (m *GameActionFightMarkCellsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightModifyEffectsDurationMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Delta    int16
}

func NewGameActionFightModifyEffectsDurationMessage() *GameActionFightModifyEffectsDurationMessage {
	return &GameActionFightModifyEffectsDurationMessage{MessageBase: MessageBase{MessageType_: "GameActionFightModifyEffectsDurationMessage", id_: 9731}}
}
func (m *GameActionFightModifyEffectsDurationMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Delta = input.ReadShort()
}

func (m *GameActionFightModifyEffectsDurationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightMultipleSummonMessage struct {
	MessageBase
	AbstractGameActionMessage
	Summons *Vector[GameContextSummonsInformationI]
}

func NewGameActionFightMultipleSummonMessage() *GameActionFightMultipleSummonMessage {
	return &GameActionFightMultipleSummonMessage{MessageBase: MessageBase{MessageType_: "GameActionFightMultipleSummonMessage", id_: 8549}}
}
func (m *GameActionFightMultipleSummonMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.Summons = NewVector[GameContextSummonsInformationI]()
	summonsLen := int(input.ReadShort())
	for i := 0; i < summonsLen; i++ {
		foundGameContextSummonsInformation := getDynamicType(input)
		if castedGameContextSummonsInformation, ok := foundGameContextSummonsInformation.(GameContextSummonsInformationI); ok {
			castedGameContextSummonsInformation.Deserialize(input)
			m.Summons.Push(&castedGameContextSummonsInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameContextSummonsInformationI, got: " + fmt.Sprintf("%T", foundGameContextSummonsInformation))
		}
	}
}

func (m *GameActionFightMultipleSummonMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightNoSpellCastMessage struct {
	MessageBase
	SpellLevelId int
}

func NewGameActionFightNoSpellCastMessage() *GameActionFightNoSpellCastMessage {
	return &GameActionFightNoSpellCastMessage{MessageBase: MessageBase{MessageType_: "GameActionFightNoSpellCastMessage", id_: 393}}
}
func (m *GameActionFightNoSpellCastMessage) Deserialize(input *DataWrapper) {
	m.SpellLevelId = input.ReadVarUhInt()
}

func (m *GameActionFightNoSpellCastMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightPointsVariationMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Delta    int16
}

func NewGameActionFightPointsVariationMessage() *GameActionFightPointsVariationMessage {
	return &GameActionFightPointsVariationMessage{MessageBase: MessageBase{MessageType_: "GameActionFightPointsVariationMessage", id_: 8927}}
}
func (m *GameActionFightPointsVariationMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Delta = input.ReadShort()
}

func (m *GameActionFightPointsVariationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightReduceDamagesMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Amount   int
}

func NewGameActionFightReduceDamagesMessage() *GameActionFightReduceDamagesMessage {
	return &GameActionFightReduceDamagesMessage{MessageBase: MessageBase{MessageType_: "GameActionFightReduceDamagesMessage", id_: 1547}}
}
func (m *GameActionFightReduceDamagesMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Amount = input.ReadVarUhInt()
}

func (m *GameActionFightReduceDamagesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightReflectDamagesMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
}

func NewGameActionFightReflectDamagesMessage() *GameActionFightReflectDamagesMessage {
	return &GameActionFightReflectDamagesMessage{MessageBase: MessageBase{MessageType_: "GameActionFightReflectDamagesMessage", id_: 7259}}
}
func (m *GameActionFightReflectDamagesMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightReflectDamagesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightReflectSpellMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
}

func NewGameActionFightReflectSpellMessage() *GameActionFightReflectSpellMessage {
	return &GameActionFightReflectSpellMessage{MessageBase: MessageBase{MessageType_: "GameActionFightReflectSpellMessage", id_: 2356}}
}
func (m *GameActionFightReflectSpellMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightReflectSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightSlideMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId    float64
	StartCellId int16
	EndCellId   int16
}

func NewGameActionFightSlideMessage() *GameActionFightSlideMessage {
	return &GameActionFightSlideMessage{MessageBase: MessageBase{MessageType_: "GameActionFightSlideMessage", id_: 7006}}
}
func (m *GameActionFightSlideMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.StartCellId = input.ReadShort()
	m.EndCellId = input.ReadShort()
}

func (m *GameActionFightSlideMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightSpellCastMessage struct {
	MessageBase
	AbstractGameActionFightTargetedAbilityMessage
	SpellId    int
	SpellLevel int16
	PortalsIds *Vector[int16]
}

func NewGameActionFightSpellCastMessage() *GameActionFightSpellCastMessage {
	return &GameActionFightSpellCastMessage{MessageBase: MessageBase{MessageType_: "GameActionFightSpellCastMessage", id_: 2679}}
}
func (m *GameActionFightSpellCastMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionFightTargetedAbilityMessage.Deserialize(input)
	m.SpellId = input.ReadVarUhShort()
	m.SpellLevel = input.ReadShort()
	m.PortalsIds = NewVector[int16]()
	portalsIdsLen := int(input.ReadShort())
	for i := 0; i < portalsIdsLen; i++ {
		val := input.ReadShort()
		m.PortalsIds.Push(&val)
	}
}

func (m *GameActionFightSpellCastMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightSpellCooldownVariationMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	SpellId  int
	Value    int
}

func NewGameActionFightSpellCooldownVariationMessage() *GameActionFightSpellCooldownVariationMessage {
	return &GameActionFightSpellCooldownVariationMessage{MessageBase: MessageBase{MessageType_: "GameActionFightSpellCooldownVariationMessage", id_: 766}}
}
func (m *GameActionFightSpellCooldownVariationMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.SpellId = input.ReadVarUhShort()
	m.Value = input.ReadVarShort()
}

func (m *GameActionFightSpellCooldownVariationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightSpellImmunityMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	SpellId  int
}

func NewGameActionFightSpellImmunityMessage() *GameActionFightSpellImmunityMessage {
	return &GameActionFightSpellImmunityMessage{MessageBase: MessageBase{MessageType_: "GameActionFightSpellImmunityMessage", id_: 276}}
}
func (m *GameActionFightSpellImmunityMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.SpellId = input.ReadVarUhShort()
}

func (m *GameActionFightSpellImmunityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightStealKamaMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	Amount   int64
}

func NewGameActionFightStealKamaMessage() *GameActionFightStealKamaMessage {
	return &GameActionFightStealKamaMessage{MessageBase: MessageBase{MessageType_: "GameActionFightStealKamaMessage", id_: 6352}}
}
func (m *GameActionFightStealKamaMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.Amount = input.ReadVarUhLong()
}

func (m *GameActionFightStealKamaMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightSummonMessage struct {
	MessageBase
	AbstractGameActionMessage
	Summons *Vector[GameFightFighterInformationsI]
}

func NewGameActionFightSummonMessage() *GameActionFightSummonMessage {
	return &GameActionFightSummonMessage{MessageBase: MessageBase{MessageType_: "GameActionFightSummonMessage", id_: 7363}}
}
func (m *GameActionFightSummonMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.Summons = NewVector[GameFightFighterInformationsI]()
	summonsLen := int(input.ReadShort())
	for i := 0; i < summonsLen; i++ {
		foundGameFightFighterInformations := getDynamicType(input)
		if castedGameFightFighterInformations, ok := foundGameFightFighterInformations.(GameFightFighterInformationsI); ok {
			castedGameFightFighterInformations.Deserialize(input)
			m.Summons.Push(&castedGameFightFighterInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameFightFighterInformationsI, got: " + fmt.Sprintf("%T", foundGameFightFighterInformations))
		}
	}
}

func (m *GameActionFightSummonMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightTackledMessage struct {
	MessageBase
	AbstractGameActionMessage
	TacklersIds *Vector[float64]
}

func NewGameActionFightTackledMessage() *GameActionFightTackledMessage {
	return &GameActionFightTackledMessage{MessageBase: MessageBase{MessageType_: "GameActionFightTackledMessage", id_: 3805}}
}
func (m *GameActionFightTackledMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TacklersIds = NewVector[float64]()
	tacklersIdsLen := int(input.ReadShort())
	for i := 0; i < tacklersIdsLen; i++ {
		val := input.ReadDouble()
		m.TacklersIds.Push(&val)
	}
}

func (m *GameActionFightTackledMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightTeleportOnSameMapMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	CellId   int16
}

func NewGameActionFightTeleportOnSameMapMessage() *GameActionFightTeleportOnSameMapMessage {
	return &GameActionFightTeleportOnSameMapMessage{MessageBase: MessageBase{MessageType_: "GameActionFightTeleportOnSameMapMessage", id_: 9922}}
}
func (m *GameActionFightTeleportOnSameMapMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightTeleportOnSameMapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightThrowCharacterMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
	CellId   int16
}

func NewGameActionFightThrowCharacterMessage() *GameActionFightThrowCharacterMessage {
	return &GameActionFightThrowCharacterMessage{MessageBase: MessageBase{MessageType_: "GameActionFightThrowCharacterMessage", id_: 8659}}
}
func (m *GameActionFightThrowCharacterMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadShort()
}

func (m *GameActionFightThrowCharacterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightTriggerEffectMessage struct {
	MessageBase
	GameActionFightDispellEffectMessage
}

func NewGameActionFightTriggerEffectMessage() *GameActionFightTriggerEffectMessage {
	return &GameActionFightTriggerEffectMessage{MessageBase: MessageBase{MessageType_: "GameActionFightTriggerEffectMessage", id_: 8838}}
}
func (m *GameActionFightTriggerEffectMessage) Deserialize(input *DataWrapper) {
	m.GameActionFightDispellEffectMessage.Deserialize(input)
}

func (m *GameActionFightTriggerEffectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightTriggerGlyphTrapMessage struct {
	MessageBase
	AbstractGameActionMessage
	MarkId                int16
	MarkImpactCell        int
	TriggeringCharacterId float64
	TriggeredSpellId      int
}

func NewGameActionFightTriggerGlyphTrapMessage() *GameActionFightTriggerGlyphTrapMessage {
	return &GameActionFightTriggerGlyphTrapMessage{MessageBase: MessageBase{MessageType_: "GameActionFightTriggerGlyphTrapMessage", id_: 6199}}
}
func (m *GameActionFightTriggerGlyphTrapMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.MarkId = input.ReadShort()
	m.MarkImpactCell = input.ReadVarUhShort()
	m.TriggeringCharacterId = input.ReadDouble()
	m.TriggeredSpellId = input.ReadVarUhShort()
}

func (m *GameActionFightTriggerGlyphTrapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightUnmarkCellsMessage struct {
	MessageBase
	AbstractGameActionMessage
	MarkId int16
}

func NewGameActionFightUnmarkCellsMessage() *GameActionFightUnmarkCellsMessage {
	return &GameActionFightUnmarkCellsMessage{MessageBase: MessageBase{MessageType_: "GameActionFightUnmarkCellsMessage", id_: 9827}}
}
func (m *GameActionFightUnmarkCellsMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.MarkId = input.ReadShort()
}

func (m *GameActionFightUnmarkCellsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionFightVanishMessage struct {
	MessageBase
	AbstractGameActionMessage
	TargetId float64
}

func NewGameActionFightVanishMessage() *GameActionFightVanishMessage {
	return &GameActionFightVanishMessage{MessageBase: MessageBase{MessageType_: "GameActionFightVanishMessage", id_: 5071}}
}
func (m *GameActionFightVanishMessage) Deserialize(input *DataWrapper) {
	m.AbstractGameActionMessage.Deserialize(input)
	m.TargetId = input.ReadDouble()
}

func (m *GameActionFightVanishMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionItem struct {
	MessageBase
	Uid        int32
	Title      string
	Text       string
	DescUrl    string
	PictureUrl string
	Items      *Vector[ObjectItemInformationWithQuantity]
}

func NewGameActionItem() *GameActionItem {
	return &GameActionItem{MessageBase: MessageBase{MessageType_: "GameActionItem", id_: 7527}}
}
func (m *GameActionItem) Deserialize(input *DataWrapper) {
	m.Uid = input.ReadInt()
	m.Title = input.ReadUTF()
	m.Text = input.ReadUTF()
	m.DescUrl = input.ReadUTF()
	m.PictureUrl = input.ReadUTF()
	m.Items = NewVector[ObjectItemInformationWithQuantity]()
	itemsLen := int(input.ReadShort())
	for i := 0; i < itemsLen; i++ {
		ObjectItemInformationWithQuantity := NewObjectItemInformationWithQuantity()
		ObjectItemInformationWithQuantity.Deserialize(input)
		m.Items.Push(ObjectItemInformationWithQuantity)
	}
}

func (m *GameActionItem) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionItemAddMessage struct {
	MessageBase
	NewAction *GameActionItem
}

func NewGameActionItemAddMessage() *GameActionItemAddMessage {
	return &GameActionItemAddMessage{MessageBase: MessageBase{MessageType_: "GameActionItemAddMessage", id_: 8509}}
}
func (m *GameActionItemAddMessage) Deserialize(input *DataWrapper) {
	m.NewAction = NewGameActionItem()
	m.NewAction.Deserialize(input)
}

func (m *GameActionItemAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionItemConsumedMessage struct {
	MessageBase
	Success         bool
	ActionId        int32
	AutomaticAction bool
}

func NewGameActionItemConsumedMessage() *GameActionItemConsumedMessage {
	return &GameActionItemConsumedMessage{MessageBase: MessageBase{MessageType_: "GameActionItemConsumedMessage", id_: 5525}}
}
func (m *GameActionItemConsumedMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Success = (byteBox0>>0)&1 != 0
	m.AutomaticAction = (byteBox0>>1)&1 != 0
	m.ActionId = input.ReadInt()
}

func (m *GameActionItemConsumedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionItemListMessage struct {
	MessageBase
	Actions *Vector[GameActionItem]
}

func NewGameActionItemListMessage() *GameActionItemListMessage {
	return &GameActionItemListMessage{MessageBase: MessageBase{MessageType_: "GameActionItemListMessage", id_: 6041}}
}
func (m *GameActionItemListMessage) Deserialize(input *DataWrapper) {
	m.Actions = NewVector[GameActionItem]()
	actionsLen := int(input.ReadShort())
	for i := 0; i < actionsLen; i++ {
		GameActionItem := NewGameActionItem()
		GameActionItem.Deserialize(input)
		m.Actions.Push(GameActionItem)
	}
}

func (m *GameActionItemListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionMark struct {
	MessageBase
	MarkAuthorId   float64
	MarkTeamId     int8
	MarkSpellId    int32
	MarkSpellLevel int16
	MarkId         int16
	MarkType       int8
	MarkimpactCell int16
	Cells          *Vector[GameActionMarkedCell]
	Active         bool
}

func NewGameActionMark() *GameActionMark {
	return &GameActionMark{MessageBase: MessageBase{MessageType_: "GameActionMark", id_: 8022}}
}
func (m *GameActionMark) Deserialize(input *DataWrapper) {
	m.MarkAuthorId = input.ReadDouble()
	m.MarkTeamId = input.ReadByte()
	m.MarkSpellId = input.ReadInt()
	m.MarkSpellLevel = input.ReadShort()
	m.MarkId = input.ReadShort()
	m.MarkType = input.ReadByte()
	m.MarkimpactCell = input.ReadShort()
	m.Cells = NewVector[GameActionMarkedCell]()
	cellsLen := int(input.ReadShort())
	for i := 0; i < cellsLen; i++ {
		GameActionMarkedCell := NewGameActionMarkedCell()
		GameActionMarkedCell.Deserialize(input)
		m.Cells.Push(GameActionMarkedCell)
	}
	m.Active = input.ReadBoolean()
}

func (m *GameActionMark) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionMarkedCell struct {
	MessageBase
	CellId    int
	ZoneSize  int8
	CellColor int32
	CellsType int8
}

func NewGameActionMarkedCell() *GameActionMarkedCell {
	return &GameActionMarkedCell{MessageBase: MessageBase{MessageType_: "GameActionMarkedCell", id_: 5710}}
}
func (m *GameActionMarkedCell) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
	m.ZoneSize = input.ReadByte()
	m.CellColor = input.ReadInt()
	m.CellsType = input.ReadByte()
}

func (m *GameActionMarkedCell) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionNoopMessage struct {
	MessageBase
}

func NewGameActionNoopMessage() *GameActionNoopMessage {
	return &GameActionNoopMessage{MessageBase: MessageBase{MessageType_: "GameActionNoopMessage", id_: 116}}
}
func (m *GameActionNoopMessage) Deserialize(input *DataWrapper) {
}

func (m *GameActionNoopMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionSpamMessage struct {
	MessageBase
	Cells *Vector[int16]
}

func NewGameActionSpamMessage() *GameActionSpamMessage {
	return &GameActionSpamMessage{MessageBase: MessageBase{MessageType_: "GameActionSpamMessage", id_: 9805}}
}
func (m *GameActionSpamMessage) Deserialize(input *DataWrapper) {
	m.Cells = NewVector[int16]()
	cellsLen := int(input.ReadShort())
	for i := 0; i < cellsLen; i++ {
		val := input.ReadShort()
		m.Cells.Push(&val)
	}
}

func (m *GameActionSpamMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameActionUpdateEffectTriggerCountMessage struct {
	MessageBase
	TargetIds *Vector[GameFightEffectTriggerCount]
}

func NewGameActionUpdateEffectTriggerCountMessage() *GameActionUpdateEffectTriggerCountMessage {
	return &GameActionUpdateEffectTriggerCountMessage{MessageBase: MessageBase{MessageType_: "GameActionUpdateEffectTriggerCountMessage", id_: 6014}}
}
func (m *GameActionUpdateEffectTriggerCountMessage) Deserialize(input *DataWrapper) {
	m.TargetIds = NewVector[GameFightEffectTriggerCount]()
	targetIdsLen := int(input.ReadShort())
	for i := 0; i < targetIdsLen; i++ {
		GameFightEffectTriggerCount := NewGameFightEffectTriggerCount()
		GameFightEffectTriggerCount.Deserialize(input)
		m.TargetIds.Push(GameFightEffectTriggerCount)
	}
}

func (m *GameActionUpdateEffectTriggerCountMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameCautiousMapMovementMessage struct {
	MessageBase
	GameMapMovementMessage
}

func NewGameCautiousMapMovementMessage() *GameCautiousMapMovementMessage {
	return &GameCautiousMapMovementMessage{MessageBase: MessageBase{MessageType_: "GameCautiousMapMovementMessage", id_: 779}}
}
func (m *GameCautiousMapMovementMessage) Deserialize(input *DataWrapper) {
	m.GameMapMovementMessage.Deserialize(input)
}

func (m *GameCautiousMapMovementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameCautiousMapMovementRequestMessage struct {
	MessageBase
	GameMapMovementRequestMessage
}

func NewGameCautiousMapMovementRequestMessage() *GameCautiousMapMovementRequestMessage {
	return &GameCautiousMapMovementRequestMessage{MessageBase: MessageBase{MessageType_: "GameCautiousMapMovementRequestMessage", id_: 920}}
}
func (m *GameCautiousMapMovementRequestMessage) Deserialize(input *DataWrapper) {
	m.GameMapMovementRequestMessage.Deserialize(input)
}

func (m *GameCautiousMapMovementRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextActorInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GameContextActorInformations struct {
	MessageBase
	GameContextActorPositionInformations
	Look *EntityLook
}

func NewGameContextActorInformations() *GameContextActorInformations {
	return &GameContextActorInformations{MessageBase: MessageBase{MessageType_: "GameContextActorInformations", id_: 9060}}
}
func (m *GameContextActorInformations) Deserialize(input *DataWrapper) {
	m.GameContextActorPositionInformations.Deserialize(input)
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *GameContextActorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextActorPositionInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GameContextActorPositionInformations struct {
	MessageBase
	ContextualId float64
	Disposition  EntityDispositionInformationsI
}

func NewGameContextActorPositionInformations() *GameContextActorPositionInformations {
	return &GameContextActorPositionInformations{MessageBase: MessageBase{MessageType_: "GameContextActorPositionInformations", id_: 3056}}
}
func (m *GameContextActorPositionInformations) Deserialize(input *DataWrapper) {
	m.ContextualId = input.ReadDouble()
	m.Disposition = getDynamicType(input)
	m.Disposition.Deserialize(input)
}

func (m *GameContextActorPositionInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextBasicSpawnInformationI interface {
	Deserialize(input *DataWrapper)
}

type GameContextBasicSpawnInformation struct {
	MessageBase
	TeamId       int8
	Alive        bool
	Informations GameContextActorPositionInformationsI
}

func NewGameContextBasicSpawnInformation() *GameContextBasicSpawnInformation {
	return &GameContextBasicSpawnInformation{MessageBase: MessageBase{MessageType_: "GameContextBasicSpawnInformation", id_: 1891}}
}
func (m *GameContextBasicSpawnInformation) Deserialize(input *DataWrapper) {
	m.TeamId = input.ReadByte()
	m.Alive = input.ReadBoolean()
	m.Informations = getDynamicType(input)
	m.Informations.Deserialize(input)
}

func (m *GameContextBasicSpawnInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextCreateErrorMessage struct {
	MessageBase
}

func NewGameContextCreateErrorMessage() *GameContextCreateErrorMessage {
	return &GameContextCreateErrorMessage{MessageBase: MessageBase{MessageType_: "GameContextCreateErrorMessage", id_: 223}}
}
func (m *GameContextCreateErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *GameContextCreateErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextCreateMessage struct {
	MessageBase
	Context int8
}

func NewGameContextCreateMessage() *GameContextCreateMessage {
	return &GameContextCreateMessage{MessageBase: MessageBase{MessageType_: "GameContextCreateMessage", id_: 1595}}
}
func (m *GameContextCreateMessage) Deserialize(input *DataWrapper) {
	m.Context = input.ReadByte()
}

func (m *GameContextCreateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextCreateRequestMessage struct {
	MessageBase
}

func NewGameContextCreateRequestMessage() *GameContextCreateRequestMessage {
	return &GameContextCreateRequestMessage{MessageBase: MessageBase{MessageType_: "GameContextCreateRequestMessage", id_: 5527}}
}
func (m *GameContextCreateRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GameContextCreateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextDestroyMessage struct {
	MessageBase
}

func NewGameContextDestroyMessage() *GameContextDestroyMessage {
	return &GameContextDestroyMessage{MessageBase: MessageBase{MessageType_: "GameContextDestroyMessage", id_: 1821}}
}
func (m *GameContextDestroyMessage) Deserialize(input *DataWrapper) {
}

func (m *GameContextDestroyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextKickMessage struct {
	MessageBase
	TargetId float64
}

func NewGameContextKickMessage() *GameContextKickMessage {
	return &GameContextKickMessage{MessageBase: MessageBase{MessageType_: "GameContextKickMessage", id_: 2032}}
}
func (m *GameContextKickMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadDouble()
}

func (m *GameContextKickMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextMoveElementMessage struct {
	MessageBase
	Movement *EntityMovementInformations
}

func NewGameContextMoveElementMessage() *GameContextMoveElementMessage {
	return &GameContextMoveElementMessage{MessageBase: MessageBase{MessageType_: "GameContextMoveElementMessage", id_: 5362}}
}
func (m *GameContextMoveElementMessage) Deserialize(input *DataWrapper) {
	m.Movement = NewEntityMovementInformations()
	m.Movement.Deserialize(input)
}

func (m *GameContextMoveElementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextMoveMultipleElementsMessage struct {
	MessageBase
	Movements *Vector[EntityMovementInformations]
}

func NewGameContextMoveMultipleElementsMessage() *GameContextMoveMultipleElementsMessage {
	return &GameContextMoveMultipleElementsMessage{MessageBase: MessageBase{MessageType_: "GameContextMoveMultipleElementsMessage", id_: 7368}}
}
func (m *GameContextMoveMultipleElementsMessage) Deserialize(input *DataWrapper) {
	m.Movements = NewVector[EntityMovementInformations]()
	movementsLen := int(input.ReadShort())
	for i := 0; i < movementsLen; i++ {
		EntityMovementInformations := NewEntityMovementInformations()
		EntityMovementInformations.Deserialize(input)
		m.Movements.Push(EntityMovementInformations)
	}
}

func (m *GameContextMoveMultipleElementsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextQuitMessage struct {
	MessageBase
}

func NewGameContextQuitMessage() *GameContextQuitMessage {
	return &GameContextQuitMessage{MessageBase: MessageBase{MessageType_: "GameContextQuitMessage", id_: 4314}}
}
func (m *GameContextQuitMessage) Deserialize(input *DataWrapper) {
}

func (m *GameContextQuitMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextReadyMessage struct {
	MessageBase
	MapId float64
}

func NewGameContextReadyMessage() *GameContextReadyMessage {
	return &GameContextReadyMessage{MessageBase: MessageBase{MessageType_: "GameContextReadyMessage", id_: 9237}}
}
func (m *GameContextReadyMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
}

func (m *GameContextReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextRefreshEntityLookMessage struct {
	MessageBase
	Id   float64
	Look *EntityLook
}

func NewGameContextRefreshEntityLookMessage() *GameContextRefreshEntityLookMessage {
	return &GameContextRefreshEntityLookMessage{MessageBase: MessageBase{MessageType_: "GameContextRefreshEntityLookMessage", id_: 7865}}
}
func (m *GameContextRefreshEntityLookMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *GameContextRefreshEntityLookMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextRemoveElementMessage struct {
	MessageBase
	Id float64
}

func NewGameContextRemoveElementMessage() *GameContextRemoveElementMessage {
	return &GameContextRemoveElementMessage{MessageBase: MessageBase{MessageType_: "GameContextRemoveElementMessage", id_: 3496}}
}
func (m *GameContextRemoveElementMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
}

func (m *GameContextRemoveElementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextRemoveElementWithEventMessage struct {
	MessageBase
	GameContextRemoveElementMessage
	ElementEventId int8
}

func NewGameContextRemoveElementWithEventMessage() *GameContextRemoveElementWithEventMessage {
	return &GameContextRemoveElementWithEventMessage{MessageBase: MessageBase{MessageType_: "GameContextRemoveElementWithEventMessage", id_: 7775}}
}
func (m *GameContextRemoveElementWithEventMessage) Deserialize(input *DataWrapper) {
	m.GameContextRemoveElementMessage.Deserialize(input)
	m.ElementEventId = input.ReadByte()
}

func (m *GameContextRemoveElementWithEventMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextRemoveMultipleElementsMessage struct {
	MessageBase
	ElementsIds *Vector[float64]
}

func NewGameContextRemoveMultipleElementsMessage() *GameContextRemoveMultipleElementsMessage {
	return &GameContextRemoveMultipleElementsMessage{MessageBase: MessageBase{MessageType_: "GameContextRemoveMultipleElementsMessage", id_: 5405}}
}
func (m *GameContextRemoveMultipleElementsMessage) Deserialize(input *DataWrapper) {
	m.ElementsIds = NewVector[float64]()
	elementsIdsLen := int(input.ReadShort())
	for i := 0; i < elementsIdsLen; i++ {
		val := input.ReadDouble()
		m.ElementsIds.Push(&val)
	}
}

func (m *GameContextRemoveMultipleElementsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextRemoveMultipleElementsWithEventsMessage struct {
	MessageBase
	GameContextRemoveMultipleElementsMessage
	ElementEventIds *Vector[int8]
}

func NewGameContextRemoveMultipleElementsWithEventsMessage() *GameContextRemoveMultipleElementsWithEventsMessage {
	return &GameContextRemoveMultipleElementsWithEventsMessage{MessageBase: MessageBase{MessageType_: "GameContextRemoveMultipleElementsWithEventsMessage", id_: 1167}}
}
func (m *GameContextRemoveMultipleElementsWithEventsMessage) Deserialize(input *DataWrapper) {
	m.GameContextRemoveMultipleElementsMessage.Deserialize(input)
	m.ElementEventIds = NewVector[int8]()
	elementEventIdsLen := int(input.ReadShort())
	for i := 0; i < elementEventIdsLen; i++ {
		val := input.ReadByte()
		m.ElementEventIds.Push(&val)
	}
}

func (m *GameContextRemoveMultipleElementsWithEventsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameContextSummonsInformationI interface {
	Deserialize(input *DataWrapper)
}

type GameContextSummonsInformation struct {
	MessageBase
	SpawnInformation SpawnInformationI
	Wave             int8
	Look             *EntityLook
	Stats            GameFightCharacteristicsI
	Summons          *Vector[GameContextBasicSpawnInformationI]
}

func NewGameContextSummonsInformation() *GameContextSummonsInformation {
	return &GameContextSummonsInformation{MessageBase: MessageBase{MessageType_: "GameContextSummonsInformation", id_: 5419}}
}
func (m *GameContextSummonsInformation) Deserialize(input *DataWrapper) {
	m.SpawnInformation = getDynamicType(input)
	m.SpawnInformation.Deserialize(input)
	m.Wave = input.ReadByte()
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
	m.Stats = getDynamicType(input)
	m.Stats.Deserialize(input)
	m.Summons = NewVector[GameContextBasicSpawnInformationI]()
	summonsLen := int(input.ReadShort())
	for i := 0; i < summonsLen; i++ {
		foundGameContextBasicSpawnInformation := getDynamicType(input)
		if castedGameContextBasicSpawnInformation, ok := foundGameContextBasicSpawnInformation.(GameContextBasicSpawnInformationI); ok {
			castedGameContextBasicSpawnInformation.Deserialize(input)
			m.Summons.Push(&castedGameContextBasicSpawnInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameContextBasicSpawnInformationI, got: " + fmt.Sprintf("%T", foundGameContextBasicSpawnInformation))
		}
	}
}

func (m *GameContextSummonsInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GameDataPaddockObjectAddMessage struct {
	MessageBase
	PaddockItemDescription *PaddockItem
}

func NewGameDataPaddockObjectAddMessage() *GameDataPaddockObjectAddMessage {
	return &GameDataPaddockObjectAddMessage{MessageBase: MessageBase{MessageType_: "GameDataPaddockObjectAddMessage", id_: 652}}
}
func (m *GameDataPaddockObjectAddMessage) Deserialize(input *DataWrapper) {
	m.PaddockItemDescription = NewPaddockItem()
	m.PaddockItemDescription.Deserialize(input)
}

func (m *GameDataPaddockObjectAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameDataPaddockObjectListAddMessage struct {
	MessageBase
	PaddockItemDescription *Vector[PaddockItem]
}

func NewGameDataPaddockObjectListAddMessage() *GameDataPaddockObjectListAddMessage {
	return &GameDataPaddockObjectListAddMessage{MessageBase: MessageBase{MessageType_: "GameDataPaddockObjectListAddMessage", id_: 9121}}
}
func (m *GameDataPaddockObjectListAddMessage) Deserialize(input *DataWrapper) {
	m.PaddockItemDescription = NewVector[PaddockItem]()
	paddockItemDescriptionLen := int(input.ReadShort())
	for i := 0; i < paddockItemDescriptionLen; i++ {
		PaddockItem := NewPaddockItem()
		PaddockItem.Deserialize(input)
		m.PaddockItemDescription.Push(PaddockItem)
	}
}

func (m *GameDataPaddockObjectListAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameDataPaddockObjectRemoveMessage struct {
	MessageBase
	CellId int
}

func NewGameDataPaddockObjectRemoveMessage() *GameDataPaddockObjectRemoveMessage {
	return &GameDataPaddockObjectRemoveMessage{MessageBase: MessageBase{MessageType_: "GameDataPaddockObjectRemoveMessage", id_: 9218}}
}
func (m *GameDataPaddockObjectRemoveMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
}

func (m *GameDataPaddockObjectRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameDataPlayFarmObjectAnimationMessage struct {
	MessageBase
	CellId *Vector[int]
}

func NewGameDataPlayFarmObjectAnimationMessage() *GameDataPlayFarmObjectAnimationMessage {
	return &GameDataPlayFarmObjectAnimationMessage{MessageBase: MessageBase{MessageType_: "GameDataPlayFarmObjectAnimationMessage", id_: 8213}}
}
func (m *GameDataPlayFarmObjectAnimationMessage) Deserialize(input *DataWrapper) {
	m.CellId = NewVector[int]()
	cellIdLen := int(input.ReadShort())
	for i := 0; i < cellIdLen; i++ {
		val := input.ReadVarShort()
		m.CellId.Push(&val)
	}
}

func (m *GameDataPlayFarmObjectAnimationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameEntitiesDispositionMessage struct {
	MessageBase
	Dispositions *Vector[IdentifiedEntityDispositionInformations]
}

func NewGameEntitiesDispositionMessage() *GameEntitiesDispositionMessage {
	return &GameEntitiesDispositionMessage{MessageBase: MessageBase{MessageType_: "GameEntitiesDispositionMessage", id_: 7948}}
}
func (m *GameEntitiesDispositionMessage) Deserialize(input *DataWrapper) {
	m.Dispositions = NewVector[IdentifiedEntityDispositionInformations]()
	dispositionsLen := int(input.ReadShort())
	for i := 0; i < dispositionsLen; i++ {
		IdentifiedEntityDispositionInformations := NewIdentifiedEntityDispositionInformations()
		IdentifiedEntityDispositionInformations.Deserialize(input)
		m.Dispositions.Push(IdentifiedEntityDispositionInformations)
	}
}

func (m *GameEntitiesDispositionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameEntityDispositionErrorMessage struct {
	MessageBase
}

func NewGameEntityDispositionErrorMessage() *GameEntityDispositionErrorMessage {
	return &GameEntityDispositionErrorMessage{MessageBase: MessageBase{MessageType_: "GameEntityDispositionErrorMessage", id_: 2619}}
}
func (m *GameEntityDispositionErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *GameEntityDispositionErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameEntityDispositionMessage struct {
	MessageBase
	Disposition *IdentifiedEntityDispositionInformations
}

func NewGameEntityDispositionMessage() *GameEntityDispositionMessage {
	return &GameEntityDispositionMessage{MessageBase: MessageBase{MessageType_: "GameEntityDispositionMessage", id_: 4}}
}
func (m *GameEntityDispositionMessage) Deserialize(input *DataWrapper) {
	m.Disposition = NewIdentifiedEntityDispositionInformations()
	m.Disposition.Deserialize(input)
}

func (m *GameEntityDispositionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightAIInformations struct {
	MessageBase
	GameFightFighterInformations
}

func NewGameFightAIInformations() *GameFightAIInformations {
	return &GameFightAIInformations{MessageBase: MessageBase{MessageType_: "GameFightAIInformations", id_: 8061}}
}
func (m *GameFightAIInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterInformations.Deserialize(input)
}

func (m *GameFightAIInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightCharacterInformations struct {
	MessageBase
	GameFightFighterNamedInformations
	Level          int
	AlignmentInfos *ActorAlignmentInformations
	Breed          int8
	Sex            bool
}

func NewGameFightCharacterInformations() *GameFightCharacterInformations {
	return &GameFightCharacterInformations{MessageBase: MessageBase{MessageType_: "GameFightCharacterInformations", id_: 3578}}
}
func (m *GameFightCharacterInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterNamedInformations.Deserialize(input)
	m.Level = input.ReadVarUhShort()
	m.AlignmentInfos = NewActorAlignmentInformations()
	m.AlignmentInfos.Deserialize(input)
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
}

func (m *GameFightCharacterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightCharacteristicsI interface {
	Deserialize(input *DataWrapper)
}

type GameFightCharacteristics struct {
	MessageBase
	Characteristics   *CharacterCharacteristics
	Summoner          float64
	Summoned          bool
	InvisibilityState int8
}

func NewGameFightCharacteristics() *GameFightCharacteristics {
	return &GameFightCharacteristics{MessageBase: MessageBase{MessageType_: "GameFightCharacteristics", id_: 714}}
}
func (m *GameFightCharacteristics) Deserialize(input *DataWrapper) {
	m.Characteristics = NewCharacterCharacteristics()
	m.Characteristics.Deserialize(input)
	m.Summoner = input.ReadDouble()
	m.Summoned = input.ReadBoolean()
	m.InvisibilityState = input.ReadByte()
}

func (m *GameFightCharacteristics) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightEffectTriggerCount struct {
	MessageBase
	EffectId int
	TargetId float64
	Count    int16
}

func NewGameFightEffectTriggerCount() *GameFightEffectTriggerCount {
	return &GameFightEffectTriggerCount{MessageBase: MessageBase{MessageType_: "GameFightEffectTriggerCount", id_: 7405}}
}
func (m *GameFightEffectTriggerCount) Deserialize(input *DataWrapper) {
	m.EffectId = input.ReadVarUhInt()
	m.TargetId = input.ReadDouble()
	m.Count = input.ReadShort()
}

func (m *GameFightEffectTriggerCount) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightEndMessage struct {
	MessageBase
	Duration                int32
	RewardRate              int
	LootShareLimitMalus     int16
	Results                 *Vector[FightResultListEntryI]
	NamedPartyTeamsOutcomes *Vector[NamedPartyTeamWithOutcome]
}

func NewGameFightEndMessage() *GameFightEndMessage {
	return &GameFightEndMessage{MessageBase: MessageBase{MessageType_: "GameFightEndMessage", id_: 2386}}
}
func (m *GameFightEndMessage) Deserialize(input *DataWrapper) {
	m.Duration = input.ReadInt()
	m.RewardRate = input.ReadVarShort()
	m.LootShareLimitMalus = input.ReadShort()
	m.Results = NewVector[FightResultListEntryI]()
	resultsLen := int(input.ReadShort())
	for i := 0; i < resultsLen; i++ {
		foundFightResultListEntry := getDynamicType(input)
		if castedFightResultListEntry, ok := foundFightResultListEntry.(FightResultListEntryI); ok {
			castedFightResultListEntry.Deserialize(input)
			m.Results.Push(&castedFightResultListEntry)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement FightResultListEntryI, got: " + fmt.Sprintf("%T", foundFightResultListEntry))
		}
	}
	m.NamedPartyTeamsOutcomes = NewVector[NamedPartyTeamWithOutcome]()
	namedPartyTeamsOutcomesLen := int(input.ReadShort())
	for i := 0; i < namedPartyTeamsOutcomesLen; i++ {
		NamedPartyTeamWithOutcome := NewNamedPartyTeamWithOutcome()
		NamedPartyTeamWithOutcome.Deserialize(input)
		m.NamedPartyTeamsOutcomes.Push(NamedPartyTeamWithOutcome)
	}
}

func (m *GameFightEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightEntityInformation struct {
	MessageBase
	GameFightFighterInformations
	EntityModelId int8
	Level         int
	MasterId      float64
}

func NewGameFightEntityInformation() *GameFightEntityInformation {
	return &GameFightEntityInformation{MessageBase: MessageBase{MessageType_: "GameFightEntityInformation", id_: 4556}}
}
func (m *GameFightEntityInformation) Deserialize(input *DataWrapper) {
	m.GameFightFighterInformations.Deserialize(input)
	m.EntityModelId = input.ReadByte()
	m.Level = input.ReadVarUhShort()
	m.MasterId = input.ReadDouble()
}

func (m *GameFightEntityInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterEntityLightInformation struct {
	MessageBase
	GameFightFighterLightInformations
	EntityModelId int8
	MasterId      float64
}

func NewGameFightFighterEntityLightInformation() *GameFightFighterEntityLightInformation {
	return &GameFightFighterEntityLightInformation{MessageBase: MessageBase{MessageType_: "GameFightFighterEntityLightInformation", id_: 3181}}
}
func (m *GameFightFighterEntityLightInformation) Deserialize(input *DataWrapper) {
	m.GameFightFighterLightInformations.Deserialize(input)
	m.EntityModelId = input.ReadByte()
	m.MasterId = input.ReadDouble()
}

func (m *GameFightFighterEntityLightInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GameFightFighterInformations struct {
	MessageBase
	GameContextActorInformations
	SpawnInfo         GameContextBasicSpawnInformationI
	Wave              int8
	Stats             GameFightCharacteristicsI
	PreviousPositions *Vector[int]
}

func NewGameFightFighterInformations() *GameFightFighterInformations {
	return &GameFightFighterInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterInformations", id_: 5601}}
}
func (m *GameFightFighterInformations) Deserialize(input *DataWrapper) {
	m.GameContextActorInformations.Deserialize(input)
	m.SpawnInfo = NewGameContextBasicSpawnInformation()
	m.SpawnInfo.Deserialize(input)
	m.Wave = input.ReadByte()
	m.Stats = getDynamicType(input)
	m.Stats.Deserialize(input)
	m.PreviousPositions = NewVector[int]()
	previousPositionsLen := int(input.ReadShort())
	for i := 0; i < previousPositionsLen; i++ {
		val := input.ReadVarShort()
		m.PreviousPositions.Push(&val)
	}
}

func (m *GameFightFighterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterLightInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GameFightFighterLightInformations struct {
	MessageBase
	Id    float64
	Wave  int8
	Level int
	Breed int8
	Sex   bool
	Alive bool
}

func NewGameFightFighterLightInformations() *GameFightFighterLightInformations {
	return &GameFightFighterLightInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterLightInformations", id_: 4794}}
}
func (m *GameFightFighterLightInformations) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Sex = (byteBox0>>0)&1 != 0
	m.Alive = (byteBox0>>1)&1 != 0
	m.Id = input.ReadDouble()
	m.Wave = input.ReadByte()
	m.Level = input.ReadVarUhShort()
	m.Breed = input.ReadByte()
}

func (m *GameFightFighterLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterMonsterLightInformations struct {
	MessageBase
	GameFightFighterLightInformations
	CreatureGenericId int
}

func NewGameFightFighterMonsterLightInformations() *GameFightFighterMonsterLightInformations {
	return &GameFightFighterMonsterLightInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterMonsterLightInformations", id_: 3925}}
}
func (m *GameFightFighterMonsterLightInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterLightInformations.Deserialize(input)
	m.CreatureGenericId = input.ReadVarUhShort()
}

func (m *GameFightFighterMonsterLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterNamedInformations struct {
	MessageBase
	GameFightFighterInformations
	Name             string
	Status           PlayerStatusI
	LeagueId         int
	LadderPosition   int32
	HiddenInPrefight bool
}

func NewGameFightFighterNamedInformations() *GameFightFighterNamedInformations {
	return &GameFightFighterNamedInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterNamedInformations", id_: 4176}}
}
func (m *GameFightFighterNamedInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterInformations.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Status = NewPlayerStatus()
	m.Status.Deserialize(input)
	m.LeagueId = input.ReadVarShort()
	m.LadderPosition = input.ReadInt()
	m.HiddenInPrefight = input.ReadBoolean()
}

func (m *GameFightFighterNamedInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterNamedLightInformations struct {
	MessageBase
	GameFightFighterLightInformations
	Name string
}

func NewGameFightFighterNamedLightInformations() *GameFightFighterNamedLightInformations {
	return &GameFightFighterNamedLightInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterNamedLightInformations", id_: 5195}}
}
func (m *GameFightFighterNamedLightInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterLightInformations.Deserialize(input)
	m.Name = input.ReadUTF()
}

func (m *GameFightFighterNamedLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightFighterTaxCollectorLightInformations struct {
	MessageBase
	GameFightFighterLightInformations
	FirstNameId int
	LastNameId  int
}

func NewGameFightFighterTaxCollectorLightInformations() *GameFightFighterTaxCollectorLightInformations {
	return &GameFightFighterTaxCollectorLightInformations{MessageBase: MessageBase{MessageType_: "GameFightFighterTaxCollectorLightInformations", id_: 3310}}
}
func (m *GameFightFighterTaxCollectorLightInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterLightInformations.Deserialize(input)
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
}

func (m *GameFightFighterTaxCollectorLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightHumanReadyStateMessage struct {
	MessageBase
	CharacterId int64
	IsReady     bool
}

func NewGameFightHumanReadyStateMessage() *GameFightHumanReadyStateMessage {
	return &GameFightHumanReadyStateMessage{MessageBase: MessageBase{MessageType_: "GameFightHumanReadyStateMessage", id_: 109}}
}
func (m *GameFightHumanReadyStateMessage) Deserialize(input *DataWrapper) {
	m.CharacterId = input.ReadVarUhLong()
	m.IsReady = input.ReadBoolean()
}

func (m *GameFightHumanReadyStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightJoinMessage struct {
	MessageBase
	IsTeamPhase             bool
	CanBeCancelled          bool
	CanSayReady             bool
	IsFightStarted          bool
	TimeMaxBeforeFightStart int16
	FightType               int8
}

func NewGameFightJoinMessage() *GameFightJoinMessage {
	return &GameFightJoinMessage{MessageBase: MessageBase{MessageType_: "GameFightJoinMessage", id_: 8166}}
}
func (m *GameFightJoinMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.IsTeamPhase = (byteBox0>>0)&1 != 0
	m.CanBeCancelled = (byteBox0>>1)&1 != 0
	m.CanSayReady = (byteBox0>>2)&1 != 0
	m.IsFightStarted = (byteBox0>>3)&1 != 0
	m.TimeMaxBeforeFightStart = input.ReadShort()
	m.FightType = input.ReadByte()
}

func (m *GameFightJoinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightJoinRequestMessage struct {
	MessageBase
	FighterId float64
	FightId   int
}

func NewGameFightJoinRequestMessage() *GameFightJoinRequestMessage {
	return &GameFightJoinRequestMessage{MessageBase: MessageBase{MessageType_: "GameFightJoinRequestMessage", id_: 4010}}
}
func (m *GameFightJoinRequestMessage) Deserialize(input *DataWrapper) {
	m.FighterId = input.ReadDouble()
	m.FightId = input.ReadVarUhShort()
}

func (m *GameFightJoinRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightLeaveMessage struct {
	MessageBase
	CharId float64
}

func NewGameFightLeaveMessage() *GameFightLeaveMessage {
	return &GameFightLeaveMessage{MessageBase: MessageBase{MessageType_: "GameFightLeaveMessage", id_: 6974}}
}
func (m *GameFightLeaveMessage) Deserialize(input *DataWrapper) {
	m.CharId = input.ReadDouble()
}

func (m *GameFightLeaveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightMonsterInformations struct {
	MessageBase
	GameFightAIInformations
	CreatureGenericId int
	CreatureGrade     int8
	CreatureLevel     int16
}

func NewGameFightMonsterInformations() *GameFightMonsterInformations {
	return &GameFightMonsterInformations{MessageBase: MessageBase{MessageType_: "GameFightMonsterInformations", id_: 1792}}
}
func (m *GameFightMonsterInformations) Deserialize(input *DataWrapper) {
	m.GameFightAIInformations.Deserialize(input)
	m.CreatureGenericId = input.ReadVarUhShort()
	m.CreatureGrade = input.ReadByte()
	m.CreatureLevel = input.ReadShort()
}

func (m *GameFightMonsterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightMonsterWithAlignmentInformations struct {
	MessageBase
	GameFightMonsterInformations
	AlignmentInfos *ActorAlignmentInformations
}

func NewGameFightMonsterWithAlignmentInformations() *GameFightMonsterWithAlignmentInformations {
	return &GameFightMonsterWithAlignmentInformations{MessageBase: MessageBase{MessageType_: "GameFightMonsterWithAlignmentInformations", id_: 7656}}
}
func (m *GameFightMonsterWithAlignmentInformations) Deserialize(input *DataWrapper) {
	m.GameFightMonsterInformations.Deserialize(input)
	m.AlignmentInfos = NewActorAlignmentInformations()
	m.AlignmentInfos.Deserialize(input)
}

func (m *GameFightMonsterWithAlignmentInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightMutantInformations struct {
	MessageBase
	GameFightFighterNamedInformations
	PowerLevel int8
}

func NewGameFightMutantInformations() *GameFightMutantInformations {
	return &GameFightMutantInformations{MessageBase: MessageBase{MessageType_: "GameFightMutantInformations", id_: 419}}
}
func (m *GameFightMutantInformations) Deserialize(input *DataWrapper) {
	m.GameFightFighterNamedInformations.Deserialize(input)
	m.PowerLevel = input.ReadByte()
}

func (m *GameFightMutantInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightNewRoundMessage struct {
	MessageBase
	RoundNumber int
}

func NewGameFightNewRoundMessage() *GameFightNewRoundMessage {
	return &GameFightNewRoundMessage{MessageBase: MessageBase{MessageType_: "GameFightNewRoundMessage", id_: 8261}}
}
func (m *GameFightNewRoundMessage) Deserialize(input *DataWrapper) {
	m.RoundNumber = input.ReadVarUhInt()
}

func (m *GameFightNewRoundMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightNewWaveMessage struct {
	MessageBase
	Id                   int8
	TeamId               int8
	NbTurnBeforeNextWave int16
}

func NewGameFightNewWaveMessage() *GameFightNewWaveMessage {
	return &GameFightNewWaveMessage{MessageBase: MessageBase{MessageType_: "GameFightNewWaveMessage", id_: 4448}}
}
func (m *GameFightNewWaveMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadByte()
	m.TeamId = input.ReadByte()
	m.NbTurnBeforeNextWave = input.ReadShort()
}

func (m *GameFightNewWaveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightOptionStateUpdateMessage struct {
	MessageBase
	FightId int
	TeamId  int8
	Option  int8
	State   bool
}

func NewGameFightOptionStateUpdateMessage() *GameFightOptionStateUpdateMessage {
	return &GameFightOptionStateUpdateMessage{MessageBase: MessageBase{MessageType_: "GameFightOptionStateUpdateMessage", id_: 3172}}
}
func (m *GameFightOptionStateUpdateMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.TeamId = input.ReadByte()
	m.Option = input.ReadByte()
	m.State = input.ReadBoolean()
}

func (m *GameFightOptionStateUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightOptionToggleMessage struct {
	MessageBase
	Option int8
}

func NewGameFightOptionToggleMessage() *GameFightOptionToggleMessage {
	return &GameFightOptionToggleMessage{MessageBase: MessageBase{MessageType_: "GameFightOptionToggleMessage", id_: 5955}}
}
func (m *GameFightOptionToggleMessage) Deserialize(input *DataWrapper) {
	m.Option = input.ReadByte()
}

func (m *GameFightOptionToggleMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPauseMessage struct {
	MessageBase
	IsPaused bool
}

func NewGameFightPauseMessage() *GameFightPauseMessage {
	return &GameFightPauseMessage{MessageBase: MessageBase{MessageType_: "GameFightPauseMessage", id_: 1045}}
}
func (m *GameFightPauseMessage) Deserialize(input *DataWrapper) {
	m.IsPaused = input.ReadBoolean()
}

func (m *GameFightPauseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementPositionRequestMessage struct {
	MessageBase
	CellId int
}

func NewGameFightPlacementPositionRequestMessage() *GameFightPlacementPositionRequestMessage {
	return &GameFightPlacementPositionRequestMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementPositionRequestMessage", id_: 7043}}
}
func (m *GameFightPlacementPositionRequestMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
}

func (m *GameFightPlacementPositionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementPossiblePositionsMessage struct {
	MessageBase
	PositionsForChallengers *Vector[int]
	PositionsForDefenders   *Vector[int]
	TeamNumber              int8
}

func NewGameFightPlacementPossiblePositionsMessage() *GameFightPlacementPossiblePositionsMessage {
	return &GameFightPlacementPossiblePositionsMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementPossiblePositionsMessage", id_: 282}}
}
func (m *GameFightPlacementPossiblePositionsMessage) Deserialize(input *DataWrapper) {
	m.PositionsForChallengers = NewVector[int]()
	positionsForChallengersLen := int(input.ReadShort())
	for i := 0; i < positionsForChallengersLen; i++ {
		val := input.ReadVarShort()
		m.PositionsForChallengers.Push(&val)
	}
	m.PositionsForDefenders = NewVector[int]()
	positionsForDefendersLen := int(input.ReadShort())
	for i := 0; i < positionsForDefendersLen; i++ {
		val := input.ReadVarShort()
		m.PositionsForDefenders.Push(&val)
	}
	m.TeamNumber = input.ReadByte()
}

func (m *GameFightPlacementPossiblePositionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsAcceptMessage struct {
	MessageBase
	RequestId int32
}

func NewGameFightPlacementSwapPositionsAcceptMessage() *GameFightPlacementSwapPositionsAcceptMessage {
	return &GameFightPlacementSwapPositionsAcceptMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsAcceptMessage", id_: 870}}
}
func (m *GameFightPlacementSwapPositionsAcceptMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadInt()
}

func (m *GameFightPlacementSwapPositionsAcceptMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsCancelMessage struct {
	MessageBase
	RequestId int32
}

func NewGameFightPlacementSwapPositionsCancelMessage() *GameFightPlacementSwapPositionsCancelMessage {
	return &GameFightPlacementSwapPositionsCancelMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsCancelMessage", id_: 5173}}
}
func (m *GameFightPlacementSwapPositionsCancelMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadInt()
}

func (m *GameFightPlacementSwapPositionsCancelMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsCancelledMessage struct {
	MessageBase
	RequestId   int32
	CancellerId float64
}

func NewGameFightPlacementSwapPositionsCancelledMessage() *GameFightPlacementSwapPositionsCancelledMessage {
	return &GameFightPlacementSwapPositionsCancelledMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsCancelledMessage", id_: 1579}}
}
func (m *GameFightPlacementSwapPositionsCancelledMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadInt()
	m.CancellerId = input.ReadDouble()
}

func (m *GameFightPlacementSwapPositionsCancelledMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsErrorMessage struct {
	MessageBase
}

func NewGameFightPlacementSwapPositionsErrorMessage() *GameFightPlacementSwapPositionsErrorMessage {
	return &GameFightPlacementSwapPositionsErrorMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsErrorMessage", id_: 6325}}
}
func (m *GameFightPlacementSwapPositionsErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *GameFightPlacementSwapPositionsErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsMessage struct {
	MessageBase
	Dispositions *Vector[IdentifiedEntityDispositionInformations]
}

func NewGameFightPlacementSwapPositionsMessage() *GameFightPlacementSwapPositionsMessage {
	return &GameFightPlacementSwapPositionsMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsMessage", id_: 5606}}
}
func (m *GameFightPlacementSwapPositionsMessage) Deserialize(input *DataWrapper) {
	// deserialize not ready for 'Dispositions' (vector type: &{SubType:IdentifiedEntityDispositionInformations LengthType: SubTypeType: IsDynamicType:false})
}

func (m *GameFightPlacementSwapPositionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsOfferMessage struct {
	MessageBase
	RequestId       int32
	RequesterId     float64
	RequesterCellId int
	RequestedId     float64
	RequestedCellId int
}

func NewGameFightPlacementSwapPositionsOfferMessage() *GameFightPlacementSwapPositionsOfferMessage {
	return &GameFightPlacementSwapPositionsOfferMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsOfferMessage", id_: 5124}}
}
func (m *GameFightPlacementSwapPositionsOfferMessage) Deserialize(input *DataWrapper) {
	m.RequestId = input.ReadInt()
	m.RequesterId = input.ReadDouble()
	m.RequesterCellId = input.ReadVarUhShort()
	m.RequestedId = input.ReadDouble()
	m.RequestedCellId = input.ReadVarUhShort()
}

func (m *GameFightPlacementSwapPositionsOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightPlacementSwapPositionsRequestMessage struct {
	MessageBase
	GameFightPlacementPositionRequestMessage
	RequestedId float64
}

func NewGameFightPlacementSwapPositionsRequestMessage() *GameFightPlacementSwapPositionsRequestMessage {
	return &GameFightPlacementSwapPositionsRequestMessage{MessageBase: MessageBase{MessageType_: "GameFightPlacementSwapPositionsRequestMessage", id_: 501}}
}
func (m *GameFightPlacementSwapPositionsRequestMessage) Deserialize(input *DataWrapper) {
	m.GameFightPlacementPositionRequestMessage.Deserialize(input)
	m.RequestedId = input.ReadDouble()
}

func (m *GameFightPlacementSwapPositionsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightReadyMessage struct {
	MessageBase
	IsReady bool
}

func NewGameFightReadyMessage() *GameFightReadyMessage {
	return &GameFightReadyMessage{MessageBase: MessageBase{MessageType_: "GameFightReadyMessage", id_: 4840}}
}
func (m *GameFightReadyMessage) Deserialize(input *DataWrapper) {
	m.IsReady = input.ReadBoolean()
}

func (m *GameFightReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightRefreshFighterMessage struct {
	MessageBase
	Informations GameContextActorInformationsI
}

func NewGameFightRefreshFighterMessage() *GameFightRefreshFighterMessage {
	return &GameFightRefreshFighterMessage{MessageBase: MessageBase{MessageType_: "GameFightRefreshFighterMessage", id_: 3786}}
}
func (m *GameFightRefreshFighterMessage) Deserialize(input *DataWrapper) {
	m.Informations = getDynamicType(input)
	m.Informations.Deserialize(input)
}

func (m *GameFightRefreshFighterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightRemoveTeamMemberMessage struct {
	MessageBase
	FightId int
	TeamId  int8
	CharId  float64
}

func NewGameFightRemoveTeamMemberMessage() *GameFightRemoveTeamMemberMessage {
	return &GameFightRemoveTeamMemberMessage{MessageBase: MessageBase{MessageType_: "GameFightRemoveTeamMemberMessage", id_: 7301}}
}
func (m *GameFightRemoveTeamMemberMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.TeamId = input.ReadByte()
	m.CharId = input.ReadDouble()
}

func (m *GameFightRemoveTeamMemberMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightResumeMessage struct {
	MessageBase
	GameFightSpectateMessage
	SpellCooldowns *Vector[GameFightSpellCooldown]
	SummonCount    int8
	BombCount      int8
}

func NewGameFightResumeMessage() *GameFightResumeMessage {
	return &GameFightResumeMessage{MessageBase: MessageBase{MessageType_: "GameFightResumeMessage", id_: 2675}}
}
func (m *GameFightResumeMessage) Deserialize(input *DataWrapper) {
	m.GameFightSpectateMessage.Deserialize(input)
	m.SpellCooldowns = NewVector[GameFightSpellCooldown]()
	spellCooldownsLen := int(input.ReadShort())
	for i := 0; i < spellCooldownsLen; i++ {
		GameFightSpellCooldown := NewGameFightSpellCooldown()
		GameFightSpellCooldown.Deserialize(input)
		m.SpellCooldowns.Push(GameFightSpellCooldown)
	}
	m.SummonCount = input.ReadByte()
	m.BombCount = input.ReadByte()
}

func (m *GameFightResumeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightResumeSlaveInfo struct {
	MessageBase
	SlaveId        float64
	SpellCooldowns *Vector[GameFightSpellCooldown]
	SummonCount    int8
	BombCount      int8
}

func NewGameFightResumeSlaveInfo() *GameFightResumeSlaveInfo {
	return &GameFightResumeSlaveInfo{MessageBase: MessageBase{MessageType_: "GameFightResumeSlaveInfo", id_: 6502}}
}
func (m *GameFightResumeSlaveInfo) Deserialize(input *DataWrapper) {
	m.SlaveId = input.ReadDouble()
	m.SpellCooldowns = NewVector[GameFightSpellCooldown]()
	spellCooldownsLen := int(input.ReadShort())
	for i := 0; i < spellCooldownsLen; i++ {
		GameFightSpellCooldown := NewGameFightSpellCooldown()
		GameFightSpellCooldown.Deserialize(input)
		m.SpellCooldowns.Push(GameFightSpellCooldown)
	}
	m.SummonCount = input.ReadByte()
	m.BombCount = input.ReadByte()
}

func (m *GameFightResumeSlaveInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightResumeWithSlavesMessage struct {
	MessageBase
	GameFightResumeMessage
	SlavesInfo *Vector[GameFightResumeSlaveInfo]
}

func NewGameFightResumeWithSlavesMessage() *GameFightResumeWithSlavesMessage {
	return &GameFightResumeWithSlavesMessage{MessageBase: MessageBase{MessageType_: "GameFightResumeWithSlavesMessage", id_: 5652}}
}
func (m *GameFightResumeWithSlavesMessage) Deserialize(input *DataWrapper) {
	m.GameFightResumeMessage.Deserialize(input)
	m.SlavesInfo = NewVector[GameFightResumeSlaveInfo]()
	slavesInfoLen := int(input.ReadShort())
	for i := 0; i < slavesInfoLen; i++ {
		GameFightResumeSlaveInfo := NewGameFightResumeSlaveInfo()
		GameFightResumeSlaveInfo.Deserialize(input)
		m.SlavesInfo.Push(GameFightResumeSlaveInfo)
	}
}

func (m *GameFightResumeWithSlavesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightShowFighterMessage struct {
	MessageBase
	Informations GameFightFighterInformationsI
}

func NewGameFightShowFighterMessage() *GameFightShowFighterMessage {
	return &GameFightShowFighterMessage{MessageBase: MessageBase{MessageType_: "GameFightShowFighterMessage", id_: 5747}}
}
func (m *GameFightShowFighterMessage) Deserialize(input *DataWrapper) {
	m.Informations = getDynamicType(input)
	m.Informations.Deserialize(input)
}

func (m *GameFightShowFighterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightShowFighterRandomStaticPoseMessage struct {
	MessageBase
	GameFightShowFighterMessage
}

func NewGameFightShowFighterRandomStaticPoseMessage() *GameFightShowFighterRandomStaticPoseMessage {
	return &GameFightShowFighterRandomStaticPoseMessage{MessageBase: MessageBase{MessageType_: "GameFightShowFighterRandomStaticPoseMessage", id_: 7583}}
}
func (m *GameFightShowFighterRandomStaticPoseMessage) Deserialize(input *DataWrapper) {
	m.GameFightShowFighterMessage.Deserialize(input)
}

func (m *GameFightShowFighterRandomStaticPoseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightSpectateMessage struct {
	MessageBase
	Effects         *Vector[FightDispellableEffectExtendedInformations]
	Marks           *Vector[GameActionMark]
	GameTurn        int
	FightStart      int32
	FxTriggerCounts *Vector[GameFightEffectTriggerCount]
}

func NewGameFightSpectateMessage() *GameFightSpectateMessage {
	return &GameFightSpectateMessage{MessageBase: MessageBase{MessageType_: "GameFightSpectateMessage", id_: 6318}}
}
func (m *GameFightSpectateMessage) Deserialize(input *DataWrapper) {
	m.Effects = NewVector[FightDispellableEffectExtendedInformations]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		FightDispellableEffectExtendedInformations := NewFightDispellableEffectExtendedInformations()
		FightDispellableEffectExtendedInformations.Deserialize(input)
		m.Effects.Push(FightDispellableEffectExtendedInformations)
	}
	m.Marks = NewVector[GameActionMark]()
	marksLen := int(input.ReadShort())
	for i := 0; i < marksLen; i++ {
		GameActionMark := NewGameActionMark()
		GameActionMark.Deserialize(input)
		m.Marks.Push(GameActionMark)
	}
	m.GameTurn = input.ReadVarUhShort()
	m.FightStart = input.ReadInt()
	m.FxTriggerCounts = NewVector[GameFightEffectTriggerCount]()
	fxTriggerCountsLen := int(input.ReadShort())
	for i := 0; i < fxTriggerCountsLen; i++ {
		GameFightEffectTriggerCount := NewGameFightEffectTriggerCount()
		GameFightEffectTriggerCount.Deserialize(input)
		m.FxTriggerCounts.Push(GameFightEffectTriggerCount)
	}
}

func (m *GameFightSpectateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightSpectatePlayerRequestMessage struct {
	MessageBase
	PlayerId int64
}

func NewGameFightSpectatePlayerRequestMessage() *GameFightSpectatePlayerRequestMessage {
	return &GameFightSpectatePlayerRequestMessage{MessageBase: MessageBase{MessageType_: "GameFightSpectatePlayerRequestMessage", id_: 8994}}
}
func (m *GameFightSpectatePlayerRequestMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
}

func (m *GameFightSpectatePlayerRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightSpectatorJoinMessage struct {
	MessageBase
	GameFightJoinMessage
	NamedPartyTeams *Vector[NamedPartyTeam]
}

func NewGameFightSpectatorJoinMessage() *GameFightSpectatorJoinMessage {
	return &GameFightSpectatorJoinMessage{MessageBase: MessageBase{MessageType_: "GameFightSpectatorJoinMessage", id_: 3924}}
}
func (m *GameFightSpectatorJoinMessage) Deserialize(input *DataWrapper) {
	m.GameFightJoinMessage.Deserialize(input)
	m.NamedPartyTeams = NewVector[NamedPartyTeam]()
	namedPartyTeamsLen := int(input.ReadShort())
	for i := 0; i < namedPartyTeamsLen; i++ {
		NamedPartyTeam := NewNamedPartyTeam()
		NamedPartyTeam.Deserialize(input)
		m.NamedPartyTeams.Push(NamedPartyTeam)
	}
}

func (m *GameFightSpectatorJoinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightSpellCooldown struct {
	MessageBase
	SpellId  int32
	Cooldown int8
}

func NewGameFightSpellCooldown() *GameFightSpellCooldown {
	return &GameFightSpellCooldown{MessageBase: MessageBase{MessageType_: "GameFightSpellCooldown", id_: 9361}}
}
func (m *GameFightSpellCooldown) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadInt()
	m.Cooldown = input.ReadByte()
}

func (m *GameFightSpellCooldown) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightStartMessage struct {
	MessageBase
}

func NewGameFightStartMessage() *GameFightStartMessage {
	return &GameFightStartMessage{MessageBase: MessageBase{MessageType_: "GameFightStartMessage", id_: 9783}}
}
func (m *GameFightStartMessage) Deserialize(input *DataWrapper) {
}

func (m *GameFightStartMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightStartingMessage struct {
	MessageBase
	FightType    int8
	FightId      int
	AttackerId   float64
	DefenderId   float64
	ContainsBoss bool
	Monsters     *Vector[int32]
}

func NewGameFightStartingMessage() *GameFightStartingMessage {
	return &GameFightStartingMessage{MessageBase: MessageBase{MessageType_: "GameFightStartingMessage", id_: 6131}}
}
func (m *GameFightStartingMessage) Deserialize(input *DataWrapper) {
	m.FightType = input.ReadByte()
	m.FightId = input.ReadVarUhShort()
	m.AttackerId = input.ReadDouble()
	m.DefenderId = input.ReadDouble()
	m.ContainsBoss = input.ReadBoolean()
	m.Monsters = NewVector[int32]()
	monstersLen := int(input.ReadShort())
	for i := 0; i < monstersLen; i++ {
		val := input.ReadInt()
		m.Monsters.Push(&val)
	}
}

func (m *GameFightStartingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightSynchronizeMessage struct {
	MessageBase
	Fighters *Vector[GameFightFighterInformationsI]
}

func NewGameFightSynchronizeMessage() *GameFightSynchronizeMessage {
	return &GameFightSynchronizeMessage{MessageBase: MessageBase{MessageType_: "GameFightSynchronizeMessage", id_: 8985}}
}
func (m *GameFightSynchronizeMessage) Deserialize(input *DataWrapper) {
	m.Fighters = NewVector[GameFightFighterInformationsI]()
	fightersLen := int(input.ReadShort())
	for i := 0; i < fightersLen; i++ {
		foundGameFightFighterInformations := getDynamicType(input)
		if castedGameFightFighterInformations, ok := foundGameFightFighterInformations.(GameFightFighterInformationsI); ok {
			castedGameFightFighterInformations.Deserialize(input)
			m.Fighters.Push(&castedGameFightFighterInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameFightFighterInformationsI, got: " + fmt.Sprintf("%T", foundGameFightFighterInformations))
		}
	}
}

func (m *GameFightSynchronizeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTaxCollectorInformations struct {
	MessageBase
	GameFightAIInformations
	FirstNameId int
	LastNameId  int
}

func NewGameFightTaxCollectorInformations() *GameFightTaxCollectorInformations {
	return &GameFightTaxCollectorInformations{MessageBase: MessageBase{MessageType_: "GameFightTaxCollectorInformations", id_: 7175}}
}
func (m *GameFightTaxCollectorInformations) Deserialize(input *DataWrapper) {
	m.GameFightAIInformations.Deserialize(input)
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
}

func (m *GameFightTaxCollectorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnEndMessage struct {
	MessageBase
	Id float64
}

func NewGameFightTurnEndMessage() *GameFightTurnEndMessage {
	return &GameFightTurnEndMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnEndMessage", id_: 7900}}
}
func (m *GameFightTurnEndMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
}

func (m *GameFightTurnEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnFinishMessage struct {
	MessageBase
	IsAfk bool
}

func NewGameFightTurnFinishMessage() *GameFightTurnFinishMessage {
	return &GameFightTurnFinishMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnFinishMessage", id_: 3915}}
}
func (m *GameFightTurnFinishMessage) Deserialize(input *DataWrapper) {
	m.IsAfk = input.ReadBoolean()
}

func (m *GameFightTurnFinishMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnListMessage struct {
	MessageBase
	Ids      *Vector[float64]
	DeadsIds *Vector[float64]
}

func NewGameFightTurnListMessage() *GameFightTurnListMessage {
	return &GameFightTurnListMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnListMessage", id_: 1243}}
}
func (m *GameFightTurnListMessage) Deserialize(input *DataWrapper) {
	m.Ids = NewVector[float64]()
	idsLen := int(input.ReadShort())
	for i := 0; i < idsLen; i++ {
		val := input.ReadDouble()
		m.Ids.Push(&val)
	}
	m.DeadsIds = NewVector[float64]()
	deadsIdsLen := int(input.ReadShort())
	for i := 0; i < deadsIdsLen; i++ {
		val := input.ReadDouble()
		m.DeadsIds.Push(&val)
	}
}

func (m *GameFightTurnListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnReadyMessage struct {
	MessageBase
	IsReady bool
}

func NewGameFightTurnReadyMessage() *GameFightTurnReadyMessage {
	return &GameFightTurnReadyMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnReadyMessage", id_: 9655}}
}
func (m *GameFightTurnReadyMessage) Deserialize(input *DataWrapper) {
	m.IsReady = input.ReadBoolean()
}

func (m *GameFightTurnReadyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnReadyRequestMessage struct {
	MessageBase
	Id float64
}

func NewGameFightTurnReadyRequestMessage() *GameFightTurnReadyRequestMessage {
	return &GameFightTurnReadyRequestMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnReadyRequestMessage", id_: 379}}
}
func (m *GameFightTurnReadyRequestMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
}

func (m *GameFightTurnReadyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnResumeMessage struct {
	MessageBase
	GameFightTurnStartMessage
	RemainingTime int
}

func NewGameFightTurnResumeMessage() *GameFightTurnResumeMessage {
	return &GameFightTurnResumeMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnResumeMessage", id_: 7389}}
}
func (m *GameFightTurnResumeMessage) Deserialize(input *DataWrapper) {
	m.GameFightTurnStartMessage.Deserialize(input)
	m.RemainingTime = input.ReadVarUhInt()
}

func (m *GameFightTurnResumeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnStartMessage struct {
	MessageBase
	Id       float64
	WaitTime int
}

func NewGameFightTurnStartMessage() *GameFightTurnStartMessage {
	return &GameFightTurnStartMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnStartMessage", id_: 217}}
}
func (m *GameFightTurnStartMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.WaitTime = input.ReadVarUhInt()
}

func (m *GameFightTurnStartMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightTurnStartPlayingMessage struct {
	MessageBase
}

func NewGameFightTurnStartPlayingMessage() *GameFightTurnStartPlayingMessage {
	return &GameFightTurnStartPlayingMessage{MessageBase: MessageBase{MessageType_: "GameFightTurnStartPlayingMessage", id_: 3867}}
}
func (m *GameFightTurnStartPlayingMessage) Deserialize(input *DataWrapper) {
}

func (m *GameFightTurnStartPlayingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameFightUpdateTeamMessage struct {
	MessageBase
	FightId int
	Team    FightTeamInformationsI
}

func NewGameFightUpdateTeamMessage() *GameFightUpdateTeamMessage {
	return &GameFightUpdateTeamMessage{MessageBase: MessageBase{MessageType_: "GameFightUpdateTeamMessage", id_: 3874}}
}
func (m *GameFightUpdateTeamMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.Team = NewFightTeamInformations()
	m.Team.Deserialize(input)
}

func (m *GameFightUpdateTeamMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapChangeOrientationMessage struct {
	MessageBase
	Orientation *ActorOrientation
}

func NewGameMapChangeOrientationMessage() *GameMapChangeOrientationMessage {
	return &GameMapChangeOrientationMessage{MessageBase: MessageBase{MessageType_: "GameMapChangeOrientationMessage", id_: 8741}}
}
func (m *GameMapChangeOrientationMessage) Deserialize(input *DataWrapper) {
	m.Orientation = NewActorOrientation()
	m.Orientation.Deserialize(input)
}

func (m *GameMapChangeOrientationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapChangeOrientationRequestMessage struct {
	MessageBase
	Direction int8
}

func NewGameMapChangeOrientationRequestMessage() *GameMapChangeOrientationRequestMessage {
	return &GameMapChangeOrientationRequestMessage{MessageBase: MessageBase{MessageType_: "GameMapChangeOrientationRequestMessage", id_: 1190}}
}
func (m *GameMapChangeOrientationRequestMessage) Deserialize(input *DataWrapper) {
	m.Direction = input.ReadByte()
}

func (m *GameMapChangeOrientationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapChangeOrientationsMessage struct {
	MessageBase
	Orientations *Vector[ActorOrientation]
}

func NewGameMapChangeOrientationsMessage() *GameMapChangeOrientationsMessage {
	return &GameMapChangeOrientationsMessage{MessageBase: MessageBase{MessageType_: "GameMapChangeOrientationsMessage", id_: 3256}}
}
func (m *GameMapChangeOrientationsMessage) Deserialize(input *DataWrapper) {
	m.Orientations = NewVector[ActorOrientation]()
	orientationsLen := int(input.ReadShort())
	for i := 0; i < orientationsLen; i++ {
		ActorOrientation := NewActorOrientation()
		ActorOrientation.Deserialize(input)
		m.Orientations.Push(ActorOrientation)
	}
}

func (m *GameMapChangeOrientationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapMovementCancelMessage struct {
	MessageBase
	CellId int
}

func NewGameMapMovementCancelMessage() *GameMapMovementCancelMessage {
	return &GameMapMovementCancelMessage{MessageBase: MessageBase{MessageType_: "GameMapMovementCancelMessage", id_: 2486}}
}
func (m *GameMapMovementCancelMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
}

func (m *GameMapMovementCancelMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapMovementConfirmMessage struct {
	MessageBase
}

func NewGameMapMovementConfirmMessage() *GameMapMovementConfirmMessage {
	return &GameMapMovementConfirmMessage{MessageBase: MessageBase{MessageType_: "GameMapMovementConfirmMessage", id_: 3317}}
}
func (m *GameMapMovementConfirmMessage) Deserialize(input *DataWrapper) {
}

func (m *GameMapMovementConfirmMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapMovementMessage struct {
	MessageBase
	KeyMovements    *Vector[int16]
	ForcedDirection int16
	ActorId         float64
}

func NewGameMapMovementMessage() *GameMapMovementMessage {
	return &GameMapMovementMessage{MessageBase: MessageBase{MessageType_: "GameMapMovementMessage", id_: 6493}}
}
func (m *GameMapMovementMessage) Deserialize(input *DataWrapper) {
	m.KeyMovements = NewVector[int16]()
	keyMovementsLen := int(input.ReadShort())
	for i := 0; i < keyMovementsLen; i++ {
		val := input.ReadShort()
		m.KeyMovements.Push(&val)
	}
	m.ForcedDirection = input.ReadShort()
	m.ActorId = input.ReadDouble()
}

func (m *GameMapMovementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapMovementRequestMessage struct {
	MessageBase
	KeyMovements *Vector[int16]
	MapId        float64
}

func NewGameMapMovementRequestMessage() *GameMapMovementRequestMessage {
	return &GameMapMovementRequestMessage{MessageBase: MessageBase{MessageType_: "GameMapMovementRequestMessage", id_: 4548}}
}
func (m *GameMapMovementRequestMessage) Deserialize(input *DataWrapper) {
	m.KeyMovements = NewVector[int16]()
	keyMovementsLen := int(input.ReadShort())
	for i := 0; i < keyMovementsLen; i++ {
		val := input.ReadShort()
		m.KeyMovements.Push(&val)
	}
	m.MapId = input.ReadDouble()
}

func (m *GameMapMovementRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameMapNoMovementMessage struct {
	MessageBase
	CellX int16
	CellY int16
}

func NewGameMapNoMovementMessage() *GameMapNoMovementMessage {
	return &GameMapNoMovementMessage{MessageBase: MessageBase{MessageType_: "GameMapNoMovementMessage", id_: 6322}}
}
func (m *GameMapNoMovementMessage) Deserialize(input *DataWrapper) {
	m.CellX = input.ReadShort()
	m.CellY = input.ReadShort()
}

func (m *GameMapNoMovementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRefreshMonsterBoostsMessage struct {
	MessageBase
	MonsterBoosts *Vector[MonsterBoosts]
	FamilyBoosts  *Vector[MonsterBoosts]
}

func NewGameRefreshMonsterBoostsMessage() *GameRefreshMonsterBoostsMessage {
	return &GameRefreshMonsterBoostsMessage{MessageBase: MessageBase{MessageType_: "GameRefreshMonsterBoostsMessage", id_: 3997}}
}
func (m *GameRefreshMonsterBoostsMessage) Deserialize(input *DataWrapper) {
	m.MonsterBoosts = NewVector[MonsterBoosts]()
	monsterBoostsLen := int(input.ReadShort())
	for i := 0; i < monsterBoostsLen; i++ {
		MonsterBoosts := NewMonsterBoosts()
		MonsterBoosts.Deserialize(input)
		m.MonsterBoosts.Push(MonsterBoosts)
	}
	m.FamilyBoosts = NewVector[MonsterBoosts]()
	familyBoostsLen := int(input.ReadShort())
	for i := 0; i < familyBoostsLen; i++ {
		MonsterBoosts := NewMonsterBoosts()
		MonsterBoosts.Deserialize(input)
		m.FamilyBoosts.Push(MonsterBoosts)
	}
}

func (m *GameRefreshMonsterBoostsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayActorInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GameRolePlayActorInformations struct {
	MessageBase
	GameContextActorInformations
}

func NewGameRolePlayActorInformations() *GameRolePlayActorInformations {
	return &GameRolePlayActorInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayActorInformations", id_: 8764}}
}
func (m *GameRolePlayActorInformations) Deserialize(input *DataWrapper) {
	m.GameContextActorInformations.Deserialize(input)
}

func (m *GameRolePlayActorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayAggressionMessage struct {
	MessageBase
	AttackerId int64
	DefenderId int64
}

func NewGameRolePlayAggressionMessage() *GameRolePlayAggressionMessage {
	return &GameRolePlayAggressionMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayAggressionMessage", id_: 6235}}
}
func (m *GameRolePlayAggressionMessage) Deserialize(input *DataWrapper) {
	m.AttackerId = input.ReadVarUhLong()
	m.DefenderId = input.ReadVarUhLong()
}

func (m *GameRolePlayAggressionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaFightAnswerMessage struct {
	MessageBase
	FightId int
	Accept  bool
}

func NewGameRolePlayArenaFightAnswerMessage() *GameRolePlayArenaFightAnswerMessage {
	return &GameRolePlayArenaFightAnswerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaFightAnswerMessage", id_: 7230}}
}
func (m *GameRolePlayArenaFightAnswerMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.Accept = input.ReadBoolean()
}

func (m *GameRolePlayArenaFightAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaFightPropositionMessage struct {
	MessageBase
	FightId  int
	AlliesId *Vector[float64]
	Duration int
}

func NewGameRolePlayArenaFightPropositionMessage() *GameRolePlayArenaFightPropositionMessage {
	return &GameRolePlayArenaFightPropositionMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaFightPropositionMessage", id_: 5667}}
}
func (m *GameRolePlayArenaFightPropositionMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.AlliesId = NewVector[float64]()
	alliesIdLen := int(input.ReadShort())
	for i := 0; i < alliesIdLen; i++ {
		val := input.ReadDouble()
		m.AlliesId.Push(&val)
	}
	m.Duration = input.ReadVarUhShort()
}

func (m *GameRolePlayArenaFightPropositionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaFighterStatusMessage struct {
	MessageBase
	FightId  int
	PlayerId int64
	Accepted bool
}

func NewGameRolePlayArenaFighterStatusMessage() *GameRolePlayArenaFighterStatusMessage {
	return &GameRolePlayArenaFighterStatusMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaFighterStatusMessage", id_: 3114}}
}
func (m *GameRolePlayArenaFighterStatusMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.PlayerId = input.ReadVarUhLong()
	m.Accepted = input.ReadBoolean()
}

func (m *GameRolePlayArenaFighterStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaInvitationCandidatesAnswerMessage struct {
	MessageBase
	Candidates *Vector[LeagueFriendInformations]
}

func NewGameRolePlayArenaInvitationCandidatesAnswerMessage() *GameRolePlayArenaInvitationCandidatesAnswerMessage {
	return &GameRolePlayArenaInvitationCandidatesAnswerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaInvitationCandidatesAnswerMessage", id_: 953}}
}
func (m *GameRolePlayArenaInvitationCandidatesAnswerMessage) Deserialize(input *DataWrapper) {
	m.Candidates = NewVector[LeagueFriendInformations]()
	candidatesLen := int(input.ReadShort())
	for i := 0; i < candidatesLen; i++ {
		LeagueFriendInformations := NewLeagueFriendInformations()
		LeagueFriendInformations.Deserialize(input)
		m.Candidates.Push(LeagueFriendInformations)
	}
}

func (m *GameRolePlayArenaInvitationCandidatesAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaLeagueRewardsMessage struct {
	MessageBase
	SeasonId        int
	LeagueId        int
	LadderPosition  int32
	EndSeasonReward bool
}

func NewGameRolePlayArenaLeagueRewardsMessage() *GameRolePlayArenaLeagueRewardsMessage {
	return &GameRolePlayArenaLeagueRewardsMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaLeagueRewardsMessage", id_: 7599}}
}
func (m *GameRolePlayArenaLeagueRewardsMessage) Deserialize(input *DataWrapper) {
	m.SeasonId = input.ReadVarUhShort()
	m.LeagueId = input.ReadVarUhShort()
	m.LadderPosition = input.ReadInt()
	m.EndSeasonReward = input.ReadBoolean()
}

func (m *GameRolePlayArenaLeagueRewardsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaPlayerBehavioursMessage struct {
	MessageBase
	Flags       *Vector[string]
	Sanctions   *Vector[string]
	BanDuration int32
}

func NewGameRolePlayArenaPlayerBehavioursMessage() *GameRolePlayArenaPlayerBehavioursMessage {
	return &GameRolePlayArenaPlayerBehavioursMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaPlayerBehavioursMessage", id_: 1302}}
}
func (m *GameRolePlayArenaPlayerBehavioursMessage) Deserialize(input *DataWrapper) {
	m.Flags = NewVector[string]()
	flagsLen := int(input.ReadShort())
	for i := 0; i < flagsLen; i++ {
		val := input.ReadUTF()
		m.Flags.Push(&val)
	}
	m.Sanctions = NewVector[string]()
	sanctionsLen := int(input.ReadShort())
	for i := 0; i < sanctionsLen; i++ {
		val := input.ReadUTF()
		m.Sanctions.Push(&val)
	}
	m.BanDuration = input.ReadInt()
}

func (m *GameRolePlayArenaPlayerBehavioursMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaRegisterMessage struct {
	MessageBase
	ArenaType int32
}

func NewGameRolePlayArenaRegisterMessage() *GameRolePlayArenaRegisterMessage {
	return &GameRolePlayArenaRegisterMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaRegisterMessage", id_: 2855}}
}
func (m *GameRolePlayArenaRegisterMessage) Deserialize(input *DataWrapper) {
	m.ArenaType = input.ReadInt()
}

func (m *GameRolePlayArenaRegisterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaRegistrationStatusMessage struct {
	MessageBase
	Registered bool
	Step       int8
	BattleMode int32
}

func NewGameRolePlayArenaRegistrationStatusMessage() *GameRolePlayArenaRegistrationStatusMessage {
	return &GameRolePlayArenaRegistrationStatusMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaRegistrationStatusMessage", id_: 4586}}
}
func (m *GameRolePlayArenaRegistrationStatusMessage) Deserialize(input *DataWrapper) {
	m.Registered = input.ReadBoolean()
	m.Step = input.ReadByte()
	m.BattleMode = input.ReadInt()
}

func (m *GameRolePlayArenaRegistrationStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaRegistrationWarningMessage struct {
	MessageBase
	BattleMode int32
}

func NewGameRolePlayArenaRegistrationWarningMessage() *GameRolePlayArenaRegistrationWarningMessage {
	return &GameRolePlayArenaRegistrationWarningMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaRegistrationWarningMessage", id_: 8542}}
}
func (m *GameRolePlayArenaRegistrationWarningMessage) Deserialize(input *DataWrapper) {
	m.BattleMode = input.ReadInt()
}

func (m *GameRolePlayArenaRegistrationWarningMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaSwitchToFightServerMessage struct {
	MessageBase
	Address string
	Ports   *Vector[int]
	Token   string
}

func NewGameRolePlayArenaSwitchToFightServerMessage() *GameRolePlayArenaSwitchToFightServerMessage {
	return &GameRolePlayArenaSwitchToFightServerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaSwitchToFightServerMessage", id_: 4751}}
}
func (m *GameRolePlayArenaSwitchToFightServerMessage) Deserialize(input *DataWrapper) {
	m.Address = input.ReadUTF()
	m.Ports = NewVector[int]()
	portsLen := int(input.ReadShort())
	for i := 0; i < portsLen; i++ {
		val := input.ReadVarShort()
		m.Ports.Push(&val)
	}
	m.Token = input.ReadUTF()
}

func (m *GameRolePlayArenaSwitchToFightServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaSwitchToGameServerMessage struct {
	MessageBase
	ValidToken   bool
	Token        string
	HomeServerId int16
}

func NewGameRolePlayArenaSwitchToGameServerMessage() *GameRolePlayArenaSwitchToGameServerMessage {
	return &GameRolePlayArenaSwitchToGameServerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaSwitchToGameServerMessage", id_: 6763}}
}
func (m *GameRolePlayArenaSwitchToGameServerMessage) Deserialize(input *DataWrapper) {
	m.ValidToken = input.ReadBoolean()
	m.Token = input.ReadUTF()
	m.HomeServerId = input.ReadShort()
}

func (m *GameRolePlayArenaSwitchToGameServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaUnregisterMessage struct {
	MessageBase
}

func NewGameRolePlayArenaUnregisterMessage() *GameRolePlayArenaUnregisterMessage {
	return &GameRolePlayArenaUnregisterMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaUnregisterMessage", id_: 326}}
}
func (m *GameRolePlayArenaUnregisterMessage) Deserialize(input *DataWrapper) {
}

func (m *GameRolePlayArenaUnregisterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayArenaUpdatePlayerInfosMessage struct {
	MessageBase
	ArenaRanks *Vector[ArenaRankInfos]
	BanEndDate float64
}

func NewGameRolePlayArenaUpdatePlayerInfosMessage() *GameRolePlayArenaUpdatePlayerInfosMessage {
	return &GameRolePlayArenaUpdatePlayerInfosMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayArenaUpdatePlayerInfosMessage", id_: 1665}}
}
func (m *GameRolePlayArenaUpdatePlayerInfosMessage) Deserialize(input *DataWrapper) {
	m.ArenaRanks = NewVector[ArenaRankInfos]()
	arenaRanksLen := int(input.ReadShort())
	for i := 0; i < arenaRanksLen; i++ {
		ArenaRankInfos := NewArenaRankInfos()
		ArenaRankInfos.Deserialize(input)
		m.ArenaRanks.Push(ArenaRankInfos)
	}
	m.BanEndDate = input.ReadDouble()
}

func (m *GameRolePlayArenaUpdatePlayerInfosMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayAttackMonsterRequestMessage struct {
	MessageBase
	MonsterGroupId float64
}

func NewGameRolePlayAttackMonsterRequestMessage() *GameRolePlayAttackMonsterRequestMessage {
	return &GameRolePlayAttackMonsterRequestMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayAttackMonsterRequestMessage", id_: 9329}}
}
func (m *GameRolePlayAttackMonsterRequestMessage) Deserialize(input *DataWrapper) {
	m.MonsterGroupId = input.ReadDouble()
}

func (m *GameRolePlayAttackMonsterRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayCharacterInformations struct {
	MessageBase
	GameRolePlayHumanoidInformations
	AlignmentInfos *ActorAlignmentInformations
}

func NewGameRolePlayCharacterInformations() *GameRolePlayCharacterInformations {
	return &GameRolePlayCharacterInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayCharacterInformations", id_: 9304}}
}
func (m *GameRolePlayCharacterInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayHumanoidInformations.Deserialize(input)
	m.AlignmentInfos = NewActorAlignmentInformations()
	m.AlignmentInfos.Deserialize(input)
}

func (m *GameRolePlayCharacterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayDelayedActionFinishedMessage struct {
	MessageBase
	DelayedCharacterId float64
	DelayTypeId        int8
}

func NewGameRolePlayDelayedActionFinishedMessage() *GameRolePlayDelayedActionFinishedMessage {
	return &GameRolePlayDelayedActionFinishedMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayDelayedActionFinishedMessage", id_: 7896}}
}
func (m *GameRolePlayDelayedActionFinishedMessage) Deserialize(input *DataWrapper) {
	m.DelayedCharacterId = input.ReadDouble()
	m.DelayTypeId = input.ReadByte()
}

func (m *GameRolePlayDelayedActionFinishedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayDelayedActionMessage struct {
	MessageBase
	DelayedCharacterId float64
	DelayTypeId        int8
	DelayEndTime       float64
}

func NewGameRolePlayDelayedActionMessage() *GameRolePlayDelayedActionMessage {
	return &GameRolePlayDelayedActionMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayDelayedActionMessage", id_: 4358}}
}
func (m *GameRolePlayDelayedActionMessage) Deserialize(input *DataWrapper) {
	m.DelayedCharacterId = input.ReadDouble()
	m.DelayTypeId = input.ReadByte()
	m.DelayEndTime = input.ReadDouble()
}

func (m *GameRolePlayDelayedActionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayDelayedObjectUseMessage struct {
	MessageBase
	GameRolePlayDelayedActionMessage
	ObjectGID int
}

func NewGameRolePlayDelayedObjectUseMessage() *GameRolePlayDelayedObjectUseMessage {
	return &GameRolePlayDelayedObjectUseMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayDelayedObjectUseMessage", id_: 3110}}
}
func (m *GameRolePlayDelayedObjectUseMessage) Deserialize(input *DataWrapper) {
	m.GameRolePlayDelayedActionMessage.Deserialize(input)
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *GameRolePlayDelayedObjectUseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayFightRequestCanceledMessage struct {
	MessageBase
	FightId  int
	SourceId float64
	TargetId float64
}

func NewGameRolePlayFightRequestCanceledMessage() *GameRolePlayFightRequestCanceledMessage {
	return &GameRolePlayFightRequestCanceledMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayFightRequestCanceledMessage", id_: 5826}}
}
func (m *GameRolePlayFightRequestCanceledMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.SourceId = input.ReadDouble()
	m.TargetId = input.ReadDouble()
}

func (m *GameRolePlayFightRequestCanceledMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayFreeSoulRequestMessage struct {
	MessageBase
}

func NewGameRolePlayFreeSoulRequestMessage() *GameRolePlayFreeSoulRequestMessage {
	return &GameRolePlayFreeSoulRequestMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayFreeSoulRequestMessage", id_: 3818}}
}
func (m *GameRolePlayFreeSoulRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GameRolePlayFreeSoulRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayGameOverMessage struct {
	MessageBase
}

func NewGameRolePlayGameOverMessage() *GameRolePlayGameOverMessage {
	return &GameRolePlayGameOverMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayGameOverMessage", id_: 3824}}
}
func (m *GameRolePlayGameOverMessage) Deserialize(input *DataWrapper) {
}

func (m *GameRolePlayGameOverMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayGroupMonsterInformations struct {
	MessageBase
	GameRolePlayActorInformations
	StaticInfos     GroupMonsterStaticInformationsI
	LootShare       int8
	AlignmentSide   int8
	HasHardcoreDrop bool
}

func NewGameRolePlayGroupMonsterInformations() *GameRolePlayGroupMonsterInformations {
	return &GameRolePlayGroupMonsterInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayGroupMonsterInformations", id_: 7360}}
}
func (m *GameRolePlayGroupMonsterInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.StaticInfos = getDynamicType(input)
	m.StaticInfos.Deserialize(input)
	m.LootShare = input.ReadByte()
	m.AlignmentSide = input.ReadByte()
	m.HasHardcoreDrop = input.ReadBoolean()
}

func (m *GameRolePlayGroupMonsterInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayGroupMonsterWaveInformations struct {
	MessageBase
	GameRolePlayGroupMonsterInformations
	NbWaves      int8
	Alternatives *Vector[GroupMonsterStaticInformationsI]
}

func NewGameRolePlayGroupMonsterWaveInformations() *GameRolePlayGroupMonsterWaveInformations {
	return &GameRolePlayGroupMonsterWaveInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayGroupMonsterWaveInformations", id_: 6822}}
}
func (m *GameRolePlayGroupMonsterWaveInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayGroupMonsterInformations.Deserialize(input)
	m.NbWaves = input.ReadByte()
	m.Alternatives = NewVector[GroupMonsterStaticInformationsI]()
	alternativesLen := int(input.ReadShort())
	for i := 0; i < alternativesLen; i++ {
		foundGroupMonsterStaticInformations := getDynamicType(input)
		if castedGroupMonsterStaticInformations, ok := foundGroupMonsterStaticInformations.(GroupMonsterStaticInformationsI); ok {
			castedGroupMonsterStaticInformations.Deserialize(input)
			m.Alternatives.Push(&castedGroupMonsterStaticInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GroupMonsterStaticInformationsI, got: " + fmt.Sprintf("%T", foundGroupMonsterStaticInformations))
		}
	}
}

func (m *GameRolePlayGroupMonsterWaveInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayHumanoidInformations struct {
	MessageBase
	GameRolePlayNamedActorInformations
	HumanoidInfo HumanInformationsI
	AccountId    int32
}

func NewGameRolePlayHumanoidInformations() *GameRolePlayHumanoidInformations {
	return &GameRolePlayHumanoidInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayHumanoidInformations", id_: 9318}}
}
func (m *GameRolePlayHumanoidInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayNamedActorInformations.Deserialize(input)
	m.HumanoidInfo = getDynamicType(input)
	m.HumanoidInfo.Deserialize(input)
	m.AccountId = input.ReadInt()
}

func (m *GameRolePlayHumanoidInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayMonsterAngryAtPlayerMessage struct {
	MessageBase
	PlayerId       int64
	MonsterGroupId float64
	AngryStartTime float64
	AttackTime     float64
}

func NewGameRolePlayMonsterAngryAtPlayerMessage() *GameRolePlayMonsterAngryAtPlayerMessage {
	return &GameRolePlayMonsterAngryAtPlayerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayMonsterAngryAtPlayerMessage", id_: 9879}}
}
func (m *GameRolePlayMonsterAngryAtPlayerMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.MonsterGroupId = input.ReadDouble()
	m.AngryStartTime = input.ReadDouble()
	m.AttackTime = input.ReadDouble()
}

func (m *GameRolePlayMonsterAngryAtPlayerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayMonsterNotAngryAtPlayerMessage struct {
	MessageBase
	PlayerId       int64
	MonsterGroupId float64
}

func NewGameRolePlayMonsterNotAngryAtPlayerMessage() *GameRolePlayMonsterNotAngryAtPlayerMessage {
	return &GameRolePlayMonsterNotAngryAtPlayerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayMonsterNotAngryAtPlayerMessage", id_: 5585}}
}
func (m *GameRolePlayMonsterNotAngryAtPlayerMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.MonsterGroupId = input.ReadDouble()
}

func (m *GameRolePlayMonsterNotAngryAtPlayerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayMountInformations struct {
	MessageBase
	GameRolePlayNamedActorInformations
	OwnerName string
	Level     uint8
}

func NewGameRolePlayMountInformations() *GameRolePlayMountInformations {
	return &GameRolePlayMountInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayMountInformations", id_: 9212}}
}
func (m *GameRolePlayMountInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayNamedActorInformations.Deserialize(input)
	m.OwnerName = input.ReadUTF()
	m.Level = input.ReadUnsignedByte()
}

func (m *GameRolePlayMountInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayMutantInformations struct {
	MessageBase
	GameRolePlayHumanoidInformations
	MonsterId  int
	PowerLevel int8
}

func NewGameRolePlayMutantInformations() *GameRolePlayMutantInformations {
	return &GameRolePlayMutantInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayMutantInformations", id_: 2574}}
}
func (m *GameRolePlayMutantInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayHumanoidInformations.Deserialize(input)
	m.MonsterId = input.ReadVarUhShort()
	m.PowerLevel = input.ReadByte()
}

func (m *GameRolePlayMutantInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayNamedActorInformations struct {
	MessageBase
	GameRolePlayActorInformations
	Name string
}

func NewGameRolePlayNamedActorInformations() *GameRolePlayNamedActorInformations {
	return &GameRolePlayNamedActorInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayNamedActorInformations", id_: 2808}}
}
func (m *GameRolePlayNamedActorInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.Name = input.ReadUTF()
}

func (m *GameRolePlayNamedActorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayNpcInformations struct {
	MessageBase
	GameRolePlayActorInformations
	NpcId            int
	Sex              bool
	SpecialArtworkId int
}

func NewGameRolePlayNpcInformations() *GameRolePlayNpcInformations {
	return &GameRolePlayNpcInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayNpcInformations", id_: 8347}}
}
func (m *GameRolePlayNpcInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.NpcId = input.ReadVarUhShort()
	m.Sex = input.ReadBoolean()
	m.SpecialArtworkId = input.ReadVarUhShort()
}

func (m *GameRolePlayNpcInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayNpcQuestFlag struct {
	MessageBase
	QuestsToValidId *Vector[int]
	QuestsToStartId *Vector[int]
}

func NewGameRolePlayNpcQuestFlag() *GameRolePlayNpcQuestFlag {
	return &GameRolePlayNpcQuestFlag{MessageBase: MessageBase{MessageType_: "GameRolePlayNpcQuestFlag", id_: 6478}}
}
func (m *GameRolePlayNpcQuestFlag) Deserialize(input *DataWrapper) {
	m.QuestsToValidId = NewVector[int]()
	questsToValidIdLen := int(input.ReadShort())
	for i := 0; i < questsToValidIdLen; i++ {
		val := input.ReadVarShort()
		m.QuestsToValidId.Push(&val)
	}
	m.QuestsToStartId = NewVector[int]()
	questsToStartIdLen := int(input.ReadShort())
	for i := 0; i < questsToStartIdLen; i++ {
		val := input.ReadVarShort()
		m.QuestsToStartId.Push(&val)
	}
}

func (m *GameRolePlayNpcQuestFlag) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayNpcWithQuestInformations struct {
	MessageBase
	GameRolePlayNpcInformations
	QuestFlag *GameRolePlayNpcQuestFlag
}

func NewGameRolePlayNpcWithQuestInformations() *GameRolePlayNpcWithQuestInformations {
	return &GameRolePlayNpcWithQuestInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayNpcWithQuestInformations", id_: 7588}}
}
func (m *GameRolePlayNpcWithQuestInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayNpcInformations.Deserialize(input)
	m.QuestFlag = NewGameRolePlayNpcQuestFlag()
	m.QuestFlag.Deserialize(input)
}

func (m *GameRolePlayNpcWithQuestInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPlayerFightFriendlyAnswerMessage struct {
	MessageBase
	FightId int
	Accept  bool
}

func NewGameRolePlayPlayerFightFriendlyAnswerMessage() *GameRolePlayPlayerFightFriendlyAnswerMessage {
	return &GameRolePlayPlayerFightFriendlyAnswerMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayPlayerFightFriendlyAnswerMessage", id_: 1704}}
}
func (m *GameRolePlayPlayerFightFriendlyAnswerMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.Accept = input.ReadBoolean()
}

func (m *GameRolePlayPlayerFightFriendlyAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPlayerFightFriendlyAnsweredMessage struct {
	MessageBase
	FightId  int
	SourceId int64
	TargetId int64
	Accept   bool
}

func NewGameRolePlayPlayerFightFriendlyAnsweredMessage() *GameRolePlayPlayerFightFriendlyAnsweredMessage {
	return &GameRolePlayPlayerFightFriendlyAnsweredMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayPlayerFightFriendlyAnsweredMessage", id_: 1668}}
}
func (m *GameRolePlayPlayerFightFriendlyAnsweredMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.SourceId = input.ReadVarUhLong()
	m.TargetId = input.ReadVarUhLong()
	m.Accept = input.ReadBoolean()
}

func (m *GameRolePlayPlayerFightFriendlyAnsweredMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPlayerFightFriendlyRequestedMessage struct {
	MessageBase
	FightId  int
	SourceId int64
	TargetId int64
}

func NewGameRolePlayPlayerFightFriendlyRequestedMessage() *GameRolePlayPlayerFightFriendlyRequestedMessage {
	return &GameRolePlayPlayerFightFriendlyRequestedMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayPlayerFightFriendlyRequestedMessage", id_: 4626}}
}
func (m *GameRolePlayPlayerFightFriendlyRequestedMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.SourceId = input.ReadVarUhLong()
	m.TargetId = input.ReadVarUhLong()
}

func (m *GameRolePlayPlayerFightFriendlyRequestedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPlayerFightRequestMessage struct {
	MessageBase
	TargetId     int64
	TargetCellId int16
	Friendly     bool
}

func NewGameRolePlayPlayerFightRequestMessage() *GameRolePlayPlayerFightRequestMessage {
	return &GameRolePlayPlayerFightRequestMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayPlayerFightRequestMessage", id_: 6628}}
}
func (m *GameRolePlayPlayerFightRequestMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadVarUhLong()
	m.TargetCellId = input.ReadShort()
	m.Friendly = input.ReadBoolean()
}

func (m *GameRolePlayPlayerFightRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPlayerLifeStatusMessage struct {
	MessageBase
	State       int8
	PhenixMapId float64
}

func NewGameRolePlayPlayerLifeStatusMessage() *GameRolePlayPlayerLifeStatusMessage {
	return &GameRolePlayPlayerLifeStatusMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayPlayerLifeStatusMessage", id_: 8693}}
}
func (m *GameRolePlayPlayerLifeStatusMessage) Deserialize(input *DataWrapper) {
	m.State = input.ReadByte()
	m.PhenixMapId = input.ReadDouble()
}

func (m *GameRolePlayPlayerLifeStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPortalInformations struct {
	MessageBase
	GameRolePlayActorInformations
	Portal PortalInformationI
}

func NewGameRolePlayPortalInformations() *GameRolePlayPortalInformations {
	return &GameRolePlayPortalInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayPortalInformations", id_: 9999}}
}
func (m *GameRolePlayPortalInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.Portal = getDynamicType(input)
	m.Portal.Deserialize(input)
}

func (m *GameRolePlayPortalInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayPrismInformations struct {
	MessageBase
	GameRolePlayActorInformations
	Prism PrismInformationI
}

func NewGameRolePlayPrismInformations() *GameRolePlayPrismInformations {
	return &GameRolePlayPrismInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayPrismInformations", id_: 7369}}
}
func (m *GameRolePlayPrismInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.Prism = getDynamicType(input)
	m.Prism.Deserialize(input)
}

func (m *GameRolePlayPrismInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayRemoveChallengeMessage struct {
	MessageBase
	FightId int
}

func NewGameRolePlayRemoveChallengeMessage() *GameRolePlayRemoveChallengeMessage {
	return &GameRolePlayRemoveChallengeMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayRemoveChallengeMessage", id_: 3370}}
}
func (m *GameRolePlayRemoveChallengeMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
}

func (m *GameRolePlayRemoveChallengeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayShowActorMessage struct {
	MessageBase
	Informations GameRolePlayActorInformationsI
}

func NewGameRolePlayShowActorMessage() *GameRolePlayShowActorMessage {
	return &GameRolePlayShowActorMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayShowActorMessage", id_: 1818}}
}
func (m *GameRolePlayShowActorMessage) Deserialize(input *DataWrapper) {
	m.Informations = getDynamicType(input)
	m.Informations.Deserialize(input)
}

func (m *GameRolePlayShowActorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayShowActorWithEventMessage struct {
	MessageBase
	GameRolePlayShowActorMessage
	ActorEventId int8
}

func NewGameRolePlayShowActorWithEventMessage() *GameRolePlayShowActorWithEventMessage {
	return &GameRolePlayShowActorWithEventMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayShowActorWithEventMessage", id_: 5}}
}
func (m *GameRolePlayShowActorWithEventMessage) Deserialize(input *DataWrapper) {
	m.GameRolePlayShowActorMessage.Deserialize(input)
	m.ActorEventId = input.ReadByte()
}

func (m *GameRolePlayShowActorWithEventMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayShowChallengeMessage struct {
	MessageBase
	CommonsInfos *FightCommonInformations
}

func NewGameRolePlayShowChallengeMessage() *GameRolePlayShowChallengeMessage {
	return &GameRolePlayShowChallengeMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayShowChallengeMessage", id_: 7254}}
}
func (m *GameRolePlayShowChallengeMessage) Deserialize(input *DataWrapper) {
	m.CommonsInfos = NewFightCommonInformations()
	m.CommonsInfos.Deserialize(input)
}

func (m *GameRolePlayShowChallengeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayShowMultipleActorsMessage struct {
	MessageBase
	InformationsList *Vector[GameRolePlayActorInformationsI]
}

func NewGameRolePlayShowMultipleActorsMessage() *GameRolePlayShowMultipleActorsMessage {
	return &GameRolePlayShowMultipleActorsMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayShowMultipleActorsMessage", id_: 323}}
}
func (m *GameRolePlayShowMultipleActorsMessage) Deserialize(input *DataWrapper) {
	m.InformationsList = NewVector[GameRolePlayActorInformationsI]()
	informationsListLen := int(input.ReadShort())
	for i := 0; i < informationsListLen; i++ {
		foundGameRolePlayActorInformations := getDynamicType(input)
		if castedGameRolePlayActorInformations, ok := foundGameRolePlayActorInformations.(GameRolePlayActorInformationsI); ok {
			castedGameRolePlayActorInformations.Deserialize(input)
			m.InformationsList.Push(&castedGameRolePlayActorInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameRolePlayActorInformationsI, got: " + fmt.Sprintf("%T", foundGameRolePlayActorInformations))
		}
	}
}

func (m *GameRolePlayShowMultipleActorsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlaySpellAnimMessage struct {
	MessageBase
	CasterId     int64
	TargetCellId int
	SpellId      int
	SpellLevel   int16
	Direction    int16
}

func NewGameRolePlaySpellAnimMessage() *GameRolePlaySpellAnimMessage {
	return &GameRolePlaySpellAnimMessage{MessageBase: MessageBase{MessageType_: "GameRolePlaySpellAnimMessage", id_: 1173}}
}
func (m *GameRolePlaySpellAnimMessage) Deserialize(input *DataWrapper) {
	m.CasterId = input.ReadVarUhLong()
	m.TargetCellId = input.ReadVarUhShort()
	m.SpellId = input.ReadVarUhShort()
	m.SpellLevel = input.ReadShort()
	m.Direction = input.ReadShort()
}

func (m *GameRolePlaySpellAnimMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayTaxCollectorFightRequestMessage struct {
	MessageBase
}

func NewGameRolePlayTaxCollectorFightRequestMessage() *GameRolePlayTaxCollectorFightRequestMessage {
	return &GameRolePlayTaxCollectorFightRequestMessage{MessageBase: MessageBase{MessageType_: "GameRolePlayTaxCollectorFightRequestMessage", id_: 1944}}
}
func (m *GameRolePlayTaxCollectorFightRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GameRolePlayTaxCollectorFightRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayTaxCollectorInformations struct {
	MessageBase
	GameRolePlayActorInformations
	Identification     TaxCollectorStaticInformationsI
	TaxCollectorAttack int32
}

func NewGameRolePlayTaxCollectorInformations() *GameRolePlayTaxCollectorInformations {
	return &GameRolePlayTaxCollectorInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayTaxCollectorInformations", id_: 4101}}
}
func (m *GameRolePlayTaxCollectorInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.Identification = getDynamicType(input)
	m.Identification.Deserialize(input)
	m.TaxCollectorAttack = input.ReadInt()
}

func (m *GameRolePlayTaxCollectorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameRolePlayTreasureHintInformations struct {
	MessageBase
	GameRolePlayActorInformations
	NpcId int
}

func NewGameRolePlayTreasureHintInformations() *GameRolePlayTreasureHintInformations {
	return &GameRolePlayTreasureHintInformations{MessageBase: MessageBase{MessageType_: "GameRolePlayTreasureHintInformations", id_: 9279}}
}
func (m *GameRolePlayTreasureHintInformations) Deserialize(input *DataWrapper) {
	m.GameRolePlayActorInformations.Deserialize(input)
	m.NpcId = input.ReadVarUhShort()
}

func (m *GameRolePlayTreasureHintInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GameServerInformations struct {
	MessageBase
	Id              int
	Type            int8
	IsMonoAccount   bool
	Status          int8
	Completion      int8
	IsSelectable    bool
	CharactersCount int8
	CharactersSlots int8
	Date            float64
}

func NewGameServerInformations() *GameServerInformations {
	return &GameServerInformations{MessageBase: MessageBase{MessageType_: "GameServerInformations", id_: 4792}}
}
func (m *GameServerInformations) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.IsMonoAccount = (byteBox0>>0)&1 != 0
	m.IsSelectable = (byteBox0>>1)&1 != 0
	m.Id = input.ReadVarUhShort()
	m.Type = input.ReadByte()
	m.Status = input.ReadByte()
	m.Completion = input.ReadByte()
	m.CharactersCount = input.ReadByte()
	m.CharactersSlots = input.ReadByte()
	m.Date = input.ReadDouble()
}

func (m *GameServerInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GoldAddedMessage struct {
	MessageBase
	Gold *GoldItem
}

func NewGoldAddedMessage() *GoldAddedMessage {
	return &GoldAddedMessage{MessageBase: MessageBase{MessageType_: "GoldAddedMessage", id_: 1521}}
}
func (m *GoldAddedMessage) Deserialize(input *DataWrapper) {
	m.Gold = NewGoldItem()
	m.Gold.Deserialize(input)
}

func (m *GoldAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GoldItem struct {
	MessageBase
	Item
	Sum int64
}

func NewGoldItem() *GoldItem {
	return &GoldItem{MessageBase: MessageBase{MessageType_: "GoldItem", id_: 8076}}
}
func (m *GoldItem) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.Sum = input.ReadVarUhLong()
}

func (m *GoldItem) IsDeserializeFunctionComplete() bool {
	return true
}

type GroupMonsterStaticInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GroupMonsterStaticInformations struct {
	MessageBase
	MainCreatureLightInfos *MonsterInGroupLightInformations
	Underlings             *Vector[MonsterInGroupInformations]
}

func NewGroupMonsterStaticInformations() *GroupMonsterStaticInformations {
	return &GroupMonsterStaticInformations{MessageBase: MessageBase{MessageType_: "GroupMonsterStaticInformations", id_: 5953}}
}
func (m *GroupMonsterStaticInformations) Deserialize(input *DataWrapper) {
	m.MainCreatureLightInfos = NewMonsterInGroupLightInformations()
	m.MainCreatureLightInfos.Deserialize(input)
	m.Underlings = NewVector[MonsterInGroupInformations]()
	underlingsLen := int(input.ReadShort())
	for i := 0; i < underlingsLen; i++ {
		MonsterInGroupInformations := NewMonsterInGroupInformations()
		MonsterInGroupInformations.Deserialize(input)
		m.Underlings.Push(MonsterInGroupInformations)
	}
}

func (m *GroupMonsterStaticInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GroupMonsterStaticInformationsWithAlternatives struct {
	MessageBase
	GroupMonsterStaticInformations
	Alternatives *Vector[AlternativeMonstersInGroupLightInformations]
}

func NewGroupMonsterStaticInformationsWithAlternatives() *GroupMonsterStaticInformationsWithAlternatives {
	return &GroupMonsterStaticInformationsWithAlternatives{MessageBase: MessageBase{MessageType_: "GroupMonsterStaticInformationsWithAlternatives", id_: 4829}}
}
func (m *GroupMonsterStaticInformationsWithAlternatives) Deserialize(input *DataWrapper) {
	m.GroupMonsterStaticInformations.Deserialize(input)
	m.Alternatives = NewVector[AlternativeMonstersInGroupLightInformations]()
	alternativesLen := int(input.ReadShort())
	for i := 0; i < alternativesLen; i++ {
		AlternativeMonstersInGroupLightInformations := NewAlternativeMonstersInGroupLightInformations()
		AlternativeMonstersInGroupLightInformations.Deserialize(input)
		m.Alternatives.Push(AlternativeMonstersInGroupLightInformations)
	}
}

func (m *GroupMonsterStaticInformationsWithAlternatives) IsDeserializeFunctionComplete() bool {
	return true
}

type GroupTeleportPlayerAnswerMessage struct {
	MessageBase
	Accept      bool
	RequesterId int64
}

func NewGroupTeleportPlayerAnswerMessage() *GroupTeleportPlayerAnswerMessage {
	return &GroupTeleportPlayerAnswerMessage{MessageBase: MessageBase{MessageType_: "GroupTeleportPlayerAnswerMessage", id_: 1816}}
}
func (m *GroupTeleportPlayerAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
	m.RequesterId = input.ReadVarUhLong()
}

func (m *GroupTeleportPlayerAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GroupTeleportPlayerCloseMessage struct {
	MessageBase
	MapId       float64
	RequesterId int64
}

func NewGroupTeleportPlayerCloseMessage() *GroupTeleportPlayerCloseMessage {
	return &GroupTeleportPlayerCloseMessage{MessageBase: MessageBase{MessageType_: "GroupTeleportPlayerCloseMessage", id_: 2716}}
}
func (m *GroupTeleportPlayerCloseMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.RequesterId = input.ReadVarUhLong()
}

func (m *GroupTeleportPlayerCloseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GroupTeleportPlayerOfferMessage struct {
	MessageBase
	MapId         float64
	WorldX        int16
	WorldY        int16
	TimeLeft      int
	RequesterId   int64
	RequesterName string
}

func NewGroupTeleportPlayerOfferMessage() *GroupTeleportPlayerOfferMessage {
	return &GroupTeleportPlayerOfferMessage{MessageBase: MessageBase{MessageType_: "GroupTeleportPlayerOfferMessage", id_: 3076}}
}
func (m *GroupTeleportPlayerOfferMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.TimeLeft = input.ReadVarUhInt()
	m.RequesterId = input.ReadVarUhLong()
	m.RequesterName = input.ReadUTF()
}

func (m *GroupTeleportPlayerOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuestLimitationMessage struct {
	MessageBase
	Reason int8
}

func NewGuestLimitationMessage() *GuestLimitationMessage {
	return &GuestLimitationMessage{MessageBase: MessageBase{MessageType_: "GuestLimitationMessage", id_: 7707}}
}
func (m *GuestLimitationMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *GuestLimitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuestModeMessage struct {
	MessageBase
	Active bool
}

func NewGuestModeMessage() *GuestModeMessage {
	return &GuestModeMessage{MessageBase: MessageBase{MessageType_: "GuestModeMessage", id_: 5810}}
}
func (m *GuestModeMessage) Deserialize(input *DataWrapper) {
	m.Active = input.ReadBoolean()
}

func (m *GuestModeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuidedModeQuitRequestMessage struct {
	MessageBase
}

func NewGuidedModeQuitRequestMessage() *GuidedModeQuitRequestMessage {
	return &GuidedModeQuitRequestMessage{MessageBase: MessageBase{MessageType_: "GuidedModeQuitRequestMessage", id_: 6433}}
}
func (m *GuidedModeQuitRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuidedModeQuitRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuidedModeReturnRequestMessage struct {
	MessageBase
}

func NewGuidedModeReturnRequestMessage() *GuidedModeReturnRequestMessage {
	return &GuidedModeReturnRequestMessage{MessageBase: MessageBase{MessageType_: "GuidedModeReturnRequestMessage", id_: 625}}
}
func (m *GuidedModeReturnRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuidedModeReturnRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationAnswerMessage struct {
	MessageBase
	Accepted bool
	PlayerId int64
}

func NewGuildApplicationAnswerMessage() *GuildApplicationAnswerMessage {
	return &GuildApplicationAnswerMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationAnswerMessage", id_: 3927}}
}
func (m *GuildApplicationAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accepted = input.ReadBoolean()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *GuildApplicationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationDeletedMessage struct {
	MessageBase
	Deleted bool
}

func NewGuildApplicationDeletedMessage() *GuildApplicationDeletedMessage {
	return &GuildApplicationDeletedMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationDeletedMessage", id_: 8782}}
}
func (m *GuildApplicationDeletedMessage) Deserialize(input *DataWrapper) {
	m.Deleted = input.ReadBoolean()
}

func (m *GuildApplicationDeletedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationIsAnsweredMessage struct {
	MessageBase
	Accepted         bool
	GuildInformation *GuildInformations
}

func NewGuildApplicationIsAnsweredMessage() *GuildApplicationIsAnsweredMessage {
	return &GuildApplicationIsAnsweredMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationIsAnsweredMessage", id_: 3637}}
}
func (m *GuildApplicationIsAnsweredMessage) Deserialize(input *DataWrapper) {
	m.Accepted = input.ReadBoolean()
	m.GuildInformation = NewGuildInformations()
	m.GuildInformation.Deserialize(input)
}

func (m *GuildApplicationIsAnsweredMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationListenMessage struct {
	MessageBase
	Listen bool
}

func NewGuildApplicationListenMessage() *GuildApplicationListenMessage {
	return &GuildApplicationListenMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationListenMessage", id_: 5367}}
}
func (m *GuildApplicationListenMessage) Deserialize(input *DataWrapper) {
	m.Listen = input.ReadBoolean()
}

func (m *GuildApplicationListenMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationPresenceMessage struct {
	MessageBase
	IsApplication bool
}

func NewGuildApplicationPresenceMessage() *GuildApplicationPresenceMessage {
	return &GuildApplicationPresenceMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationPresenceMessage", id_: 9885}}
}
func (m *GuildApplicationPresenceMessage) Deserialize(input *DataWrapper) {
	m.IsApplication = input.ReadBoolean()
}

func (m *GuildApplicationPresenceMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildApplicationReceivedMessage struct {
	MessageBase
	PlayerName string
	PlayerId   int64
}

func NewGuildApplicationReceivedMessage() *GuildApplicationReceivedMessage {
	return &GuildApplicationReceivedMessage{MessageBase: MessageBase{MessageType_: "GuildApplicationReceivedMessage", id_: 8148}}
}
func (m *GuildApplicationReceivedMessage) Deserialize(input *DataWrapper) {
	m.PlayerName = input.ReadUTF()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *GuildApplicationReceivedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildBulletinMessage struct {
	MessageBase
	BulletinMessage
}

func NewGuildBulletinMessage() *GuildBulletinMessage {
	return &GuildBulletinMessage{MessageBase: MessageBase{MessageType_: "GuildBulletinMessage", id_: 1996}}
}
func (m *GuildBulletinMessage) Deserialize(input *DataWrapper) {
	m.BulletinMessage.Deserialize(input)
}

func (m *GuildBulletinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildBulletinSetErrorMessage struct {
	MessageBase
	SocialNoticeSetErrorMessage
}

func NewGuildBulletinSetErrorMessage() *GuildBulletinSetErrorMessage {
	return &GuildBulletinSetErrorMessage{MessageBase: MessageBase{MessageType_: "GuildBulletinSetErrorMessage", id_: 8324}}
}
func (m *GuildBulletinSetErrorMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetErrorMessage.Deserialize(input)
}

func (m *GuildBulletinSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildBulletinSetRequestMessage struct {
	MessageBase
	SocialNoticeSetRequestMessage
	Content string
}

func NewGuildBulletinSetRequestMessage() *GuildBulletinSetRequestMessage {
	return &GuildBulletinSetRequestMessage{MessageBase: MessageBase{MessageType_: "GuildBulletinSetRequestMessage", id_: 5517}}
}
func (m *GuildBulletinSetRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetRequestMessage.Deserialize(input)
	m.Content = input.ReadUTF()
}

func (m *GuildBulletinSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildChangeMemberParametersMessage struct {
	MessageBase
	MemberId               int64
	RankId                 int
	ExperienceGivenPercent int8
}

func NewGuildChangeMemberParametersMessage() *GuildChangeMemberParametersMessage {
	return &GuildChangeMemberParametersMessage{MessageBase: MessageBase{MessageType_: "GuildChangeMemberParametersMessage", id_: 1951}}
}
func (m *GuildChangeMemberParametersMessage) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadVarUhLong()
	m.RankId = input.ReadVarUhInt()
	m.ExperienceGivenPercent = input.ReadByte()
}

func (m *GuildChangeMemberParametersMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildCharacsUpgradeRequestMessage struct {
	MessageBase
	CharaTypeTarget int8
}

func NewGuildCharacsUpgradeRequestMessage() *GuildCharacsUpgradeRequestMessage {
	return &GuildCharacsUpgradeRequestMessage{MessageBase: MessageBase{MessageType_: "GuildCharacsUpgradeRequestMessage", id_: 237}}
}
func (m *GuildCharacsUpgradeRequestMessage) Deserialize(input *DataWrapper) {
	m.CharaTypeTarget = input.ReadByte()
}

func (m *GuildCharacsUpgradeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildChestTabContributionMessage struct {
	MessageBase
	TabNumber                        int
	RequiredAmount                   int64
	CurrentAmount                    int64
	ChestContributionEnrollmentDelay float64
	ChestContributionDelay           float64
}

func NewGuildChestTabContributionMessage() *GuildChestTabContributionMessage {
	return &GuildChestTabContributionMessage{MessageBase: MessageBase{MessageType_: "GuildChestTabContributionMessage", id_: 8050}}
}
func (m *GuildChestTabContributionMessage) Deserialize(input *DataWrapper) {
	m.TabNumber = input.ReadVarUhInt()
	m.RequiredAmount = input.ReadVarUhLong()
	m.CurrentAmount = input.ReadVarUhLong()
	m.ChestContributionEnrollmentDelay = input.ReadDouble()
	m.ChestContributionDelay = input.ReadDouble()
}

func (m *GuildChestTabContributionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildChestTabContributionsMessage struct {
	MessageBase
	Contributions *Vector[Contribution]
}

func NewGuildChestTabContributionsMessage() *GuildChestTabContributionsMessage {
	return &GuildChestTabContributionsMessage{MessageBase: MessageBase{MessageType_: "GuildChestTabContributionsMessage", id_: 753}}
}
func (m *GuildChestTabContributionsMessage) Deserialize(input *DataWrapper) {
	m.Contributions = NewVector[Contribution]()
	contributionsLen := int(input.ReadShort())
	for i := 0; i < contributionsLen; i++ {
		Contribution := NewContribution()
		Contribution.Deserialize(input)
		m.Contributions.Push(Contribution)
	}
}

func (m *GuildChestTabContributionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildChestTabLastContributionMessage struct {
	MessageBase
	LastContributionDate float64
}

func NewGuildChestTabLastContributionMessage() *GuildChestTabLastContributionMessage {
	return &GuildChestTabLastContributionMessage{MessageBase: MessageBase{MessageType_: "GuildChestTabLastContributionMessage", id_: 683}}
}
func (m *GuildChestTabLastContributionMessage) Deserialize(input *DataWrapper) {
	m.LastContributionDate = input.ReadDouble()
}

func (m *GuildChestTabLastContributionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildCreationResultMessage struct {
	MessageBase
	Result int8
}

func NewGuildCreationResultMessage() *GuildCreationResultMessage {
	return &GuildCreationResultMessage{MessageBase: MessageBase{MessageType_: "GuildCreationResultMessage", id_: 4018}}
}
func (m *GuildCreationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *GuildCreationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildCreationStartedMessage struct {
	MessageBase
}

func NewGuildCreationStartedMessage() *GuildCreationStartedMessage {
	return &GuildCreationStartedMessage{MessageBase: MessageBase{MessageType_: "GuildCreationStartedMessage", id_: 5711}}
}
func (m *GuildCreationStartedMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildCreationStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildCreationValidMessage struct {
	MessageBase
	GuildName   string
	GuildEmblem *SocialEmblem
}

func NewGuildCreationValidMessage() *GuildCreationValidMessage {
	return &GuildCreationValidMessage{MessageBase: MessageBase{MessageType_: "GuildCreationValidMessage", id_: 1720}}
}
func (m *GuildCreationValidMessage) Deserialize(input *DataWrapper) {
	m.GuildName = input.ReadUTF()
	m.GuildEmblem = NewSocialEmblem()
	m.GuildEmblem.Deserialize(input)
}

func (m *GuildCreationValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildDeleteApplicationRequestMessage struct {
	MessageBase
}

func NewGuildDeleteApplicationRequestMessage() *GuildDeleteApplicationRequestMessage {
	return &GuildDeleteApplicationRequestMessage{MessageBase: MessageBase{MessageType_: "GuildDeleteApplicationRequestMessage", id_: 7132}}
}
func (m *GuildDeleteApplicationRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildDeleteApplicationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildFactSheetInformationsI interface {
	Deserialize(input *DataWrapper)
}

type GuildFactSheetInformations struct {
	MessageBase
	GuildInformations
	LeaderId        int64
	NbMembers       int
	LastActivityDay int16
	Recruitment     *GuildRecruitmentInformation
	NbPendingApply  int32
}

func NewGuildFactSheetInformations() *GuildFactSheetInformations {
	return &GuildFactSheetInformations{MessageBase: MessageBase{MessageType_: "GuildFactSheetInformations", id_: 643}}
}
func (m *GuildFactSheetInformations) Deserialize(input *DataWrapper) {
	m.GuildInformations.Deserialize(input)
	m.LeaderId = input.ReadVarUhLong()
	m.NbMembers = input.ReadVarUhShort()
	m.LastActivityDay = input.ReadShort()
	m.Recruitment = NewGuildRecruitmentInformation()
	m.Recruitment.Deserialize(input)
	m.NbPendingApply = input.ReadInt()
}

func (m *GuildFactSheetInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildFactsErrorMessage struct {
	MessageBase
	GuildId int
}

func NewGuildFactsErrorMessage() *GuildFactsErrorMessage {
	return &GuildFactsErrorMessage{MessageBase: MessageBase{MessageType_: "GuildFactsErrorMessage", id_: 7863}}
}
func (m *GuildFactsErrorMessage) Deserialize(input *DataWrapper) {
	m.GuildId = input.ReadVarUhInt()
}

func (m *GuildFactsErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildFactsMessage struct {
	MessageBase
	Infos        GuildFactSheetInformationsI
	CreationDate int32
	Members      *Vector[CharacterMinimalSocialPublicInformations]
}

func NewGuildFactsMessage() *GuildFactsMessage {
	return &GuildFactsMessage{MessageBase: MessageBase{MessageType_: "GuildFactsMessage", id_: 5626}}
}
func (m *GuildFactsMessage) Deserialize(input *DataWrapper) {
	m.Infos = getDynamicType(input)
	m.Infos.Deserialize(input)
	m.CreationDate = input.ReadInt()
	m.Members = NewVector[CharacterMinimalSocialPublicInformations]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		CharacterMinimalSocialPublicInformations := NewCharacterMinimalSocialPublicInformations()
		CharacterMinimalSocialPublicInformations.Deserialize(input)
		m.Members.Push(CharacterMinimalSocialPublicInformations)
	}
}

func (m *GuildFactsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildFactsRequestMessage struct {
	MessageBase
	GuildId int
}

func NewGuildFactsRequestMessage() *GuildFactsRequestMessage {
	return &GuildFactsRequestMessage{MessageBase: MessageBase{MessageType_: "GuildFactsRequestMessage", id_: 6650}}
}
func (m *GuildFactsRequestMessage) Deserialize(input *DataWrapper) {
	m.GuildId = input.ReadVarUhInt()
}

func (m *GuildFactsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildGetChestTabContributionsRequestMessage struct {
	MessageBase
}

func NewGuildGetChestTabContributionsRequestMessage() *GuildGetChestTabContributionsRequestMessage {
	return &GuildGetChestTabContributionsRequestMessage{MessageBase: MessageBase{MessageType_: "GuildGetChestTabContributionsRequestMessage", id_: 5518}}
}
func (m *GuildGetChestTabContributionsRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildGetChestTabContributionsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildGetInformationsMessage struct {
	MessageBase
	InfoType int8
}

func NewGuildGetInformationsMessage() *GuildGetInformationsMessage {
	return &GuildGetInformationsMessage{MessageBase: MessageBase{MessageType_: "GuildGetInformationsMessage", id_: 592}}
}
func (m *GuildGetInformationsMessage) Deserialize(input *DataWrapper) {
	m.InfoType = input.ReadByte()
}

func (m *GuildGetInformationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildGetPlayerApplicationMessage struct {
	MessageBase
}

func NewGuildGetPlayerApplicationMessage() *GuildGetPlayerApplicationMessage {
	return &GuildGetPlayerApplicationMessage{MessageBase: MessageBase{MessageType_: "GuildGetPlayerApplicationMessage", id_: 5398}}
}
func (m *GuildGetPlayerApplicationMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildGetPlayerApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildHouseRemoveMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	SecondHand bool
}

func NewGuildHouseRemoveMessage() *GuildHouseRemoveMessage {
	return &GuildHouseRemoveMessage{MessageBase: MessageBase{MessageType_: "GuildHouseRemoveMessage", id_: 4888}}
}
func (m *GuildHouseRemoveMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
}

func (m *GuildHouseRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildHouseUpdateInformationMessage struct {
	MessageBase
	HousesInformations *HouseInformationsForGuild
}

func NewGuildHouseUpdateInformationMessage() *GuildHouseUpdateInformationMessage {
	return &GuildHouseUpdateInformationMessage{MessageBase: MessageBase{MessageType_: "GuildHouseUpdateInformationMessage", id_: 1590}}
}
func (m *GuildHouseUpdateInformationMessage) Deserialize(input *DataWrapper) {
	m.HousesInformations = NewHouseInformationsForGuild()
	m.HousesInformations.Deserialize(input)
}

func (m *GuildHouseUpdateInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildHousesInformationMessage struct {
	MessageBase
	HousesInformations *Vector[HouseInformationsForGuild]
}

func NewGuildHousesInformationMessage() *GuildHousesInformationMessage {
	return &GuildHousesInformationMessage{MessageBase: MessageBase{MessageType_: "GuildHousesInformationMessage", id_: 5207}}
}
func (m *GuildHousesInformationMessage) Deserialize(input *DataWrapper) {
	m.HousesInformations = NewVector[HouseInformationsForGuild]()
	housesInformationsLen := int(input.ReadShort())
	for i := 0; i < housesInformationsLen; i++ {
		HouseInformationsForGuild := NewHouseInformationsForGuild()
		HouseInformationsForGuild.Deserialize(input)
		m.HousesInformations.Push(HouseInformationsForGuild)
	}
}

func (m *GuildHousesInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInformations struct {
	MessageBase
	BasicGuildInformations
	GuildEmblem *SocialEmblem
}

func NewGuildInformations() *GuildInformations {
	return &GuildInformations{MessageBase: MessageBase{MessageType_: "GuildInformations", id_: 7929}}
}
func (m *GuildInformations) Deserialize(input *DataWrapper) {
	m.BasicGuildInformations.Deserialize(input)
	m.GuildEmblem = NewSocialEmblem()
	m.GuildEmblem.Deserialize(input)
}

func (m *GuildInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInformationsGeneralMessage struct {
	MessageBase
	AbandonnedPaddock bool
	Level             uint8
	ExpLevelFloor     int64
	Experience        int64
	ExpNextLevelFloor int64
	CreationDate      int32
	Score             int32
}

func NewGuildInformationsGeneralMessage() *GuildInformationsGeneralMessage {
	return &GuildInformationsGeneralMessage{MessageBase: MessageBase{MessageType_: "GuildInformationsGeneralMessage", id_: 4406}}
}
func (m *GuildInformationsGeneralMessage) Deserialize(input *DataWrapper) {
	m.AbandonnedPaddock = input.ReadBoolean()
	m.Level = input.ReadUnsignedByte()
	m.ExpLevelFloor = input.ReadVarUhLong()
	m.Experience = input.ReadVarUhLong()
	m.ExpNextLevelFloor = input.ReadVarUhLong()
	m.CreationDate = input.ReadInt()
	m.Score = input.ReadInt()
}

func (m *GuildInformationsGeneralMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInformationsMemberUpdateMessage struct {
	MessageBase
	Member *GuildMemberInfo
}

func NewGuildInformationsMemberUpdateMessage() *GuildInformationsMemberUpdateMessage {
	return &GuildInformationsMemberUpdateMessage{MessageBase: MessageBase{MessageType_: "GuildInformationsMemberUpdateMessage", id_: 6708}}
}
func (m *GuildInformationsMemberUpdateMessage) Deserialize(input *DataWrapper) {
	m.Member = NewGuildMemberInfo()
	m.Member.Deserialize(input)
}

func (m *GuildInformationsMemberUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInformationsMembersMessage struct {
	MessageBase
	Members *Vector[GuildMemberInfo]
}

func NewGuildInformationsMembersMessage() *GuildInformationsMembersMessage {
	return &GuildInformationsMembersMessage{MessageBase: MessageBase{MessageType_: "GuildInformationsMembersMessage", id_: 6362}}
}
func (m *GuildInformationsMembersMessage) Deserialize(input *DataWrapper) {
	m.Members = NewVector[GuildMemberInfo]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		GuildMemberInfo := NewGuildMemberInfo()
		GuildMemberInfo.Deserialize(input)
		m.Members.Push(GuildMemberInfo)
	}
}

func (m *GuildInformationsMembersMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInformationsPaddocksMessage struct {
	MessageBase
	NbPaddockMax         int8
	PaddocksInformations *Vector[PaddockContentInformations]
}

func NewGuildInformationsPaddocksMessage() *GuildInformationsPaddocksMessage {
	return &GuildInformationsPaddocksMessage{MessageBase: MessageBase{MessageType_: "GuildInformationsPaddocksMessage", id_: 7168}}
}
func (m *GuildInformationsPaddocksMessage) Deserialize(input *DataWrapper) {
	m.NbPaddockMax = input.ReadByte()
	m.PaddocksInformations = NewVector[PaddockContentInformations]()
	paddocksInformationsLen := int(input.ReadShort())
	for i := 0; i < paddocksInformationsLen; i++ {
		PaddockContentInformations := NewPaddockContentInformations()
		PaddockContentInformations.Deserialize(input)
		m.PaddocksInformations.Push(PaddockContentInformations)
	}
}

func (m *GuildInformationsPaddocksMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInsiderFactSheetInformations struct {
	MessageBase
	GuildFactSheetInformations
	LeaderName string
}

func NewGuildInsiderFactSheetInformations() *GuildInsiderFactSheetInformations {
	return &GuildInsiderFactSheetInformations{MessageBase: MessageBase{MessageType_: "GuildInsiderFactSheetInformations", id_: 9836}}
}
func (m *GuildInsiderFactSheetInformations) Deserialize(input *DataWrapper) {
	m.GuildFactSheetInformations.Deserialize(input)
	m.LeaderName = input.ReadUTF()
}

func (m *GuildInsiderFactSheetInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInvitationAnswerMessage struct {
	MessageBase
	Accept bool
}

func NewGuildInvitationAnswerMessage() *GuildInvitationAnswerMessage {
	return &GuildInvitationAnswerMessage{MessageBase: MessageBase{MessageType_: "GuildInvitationAnswerMessage", id_: 5328}}
}
func (m *GuildInvitationAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
}

func (m *GuildInvitationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInvitationMessage struct {
	MessageBase
	TargetId int64
}

func NewGuildInvitationMessage() *GuildInvitationMessage {
	return &GuildInvitationMessage{MessageBase: MessageBase{MessageType_: "GuildInvitationMessage", id_: 8788}}
}
func (m *GuildInvitationMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadVarUhLong()
}

func (m *GuildInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInvitationStateRecrutedMessage struct {
	MessageBase
	InvitationState int8
}

func NewGuildInvitationStateRecrutedMessage() *GuildInvitationStateRecrutedMessage {
	return &GuildInvitationStateRecrutedMessage{MessageBase: MessageBase{MessageType_: "GuildInvitationStateRecrutedMessage", id_: 9851}}
}
func (m *GuildInvitationStateRecrutedMessage) Deserialize(input *DataWrapper) {
	m.InvitationState = input.ReadByte()
}

func (m *GuildInvitationStateRecrutedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInvitationStateRecruterMessage struct {
	MessageBase
	RecrutedName    string
	InvitationState int8
}

func NewGuildInvitationStateRecruterMessage() *GuildInvitationStateRecruterMessage {
	return &GuildInvitationStateRecruterMessage{MessageBase: MessageBase{MessageType_: "GuildInvitationStateRecruterMessage", id_: 2343}}
}
func (m *GuildInvitationStateRecruterMessage) Deserialize(input *DataWrapper) {
	m.RecrutedName = input.ReadUTF()
	m.InvitationState = input.ReadByte()
}

func (m *GuildInvitationStateRecruterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildInvitedMessage struct {
	MessageBase
	RecruterName string
	GuildInfo    *GuildInformations
}

func NewGuildInvitedMessage() *GuildInvitedMessage {
	return &GuildInvitedMessage{MessageBase: MessageBase{MessageType_: "GuildInvitedMessage", id_: 4003}}
}
func (m *GuildInvitedMessage) Deserialize(input *DataWrapper) {
	m.RecruterName = input.ReadUTF()
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
}

func (m *GuildInvitedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildIsThereAnyApplicationMessage struct {
	MessageBase
}

func NewGuildIsThereAnyApplicationMessage() *GuildIsThereAnyApplicationMessage {
	return &GuildIsThereAnyApplicationMessage{MessageBase: MessageBase{MessageType_: "GuildIsThereAnyApplicationMessage", id_: 5069}}
}
func (m *GuildIsThereAnyApplicationMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildIsThereAnyApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildJoinAutomaticallyRequestMessage struct {
	MessageBase
	GuildId int32
}

func NewGuildJoinAutomaticallyRequestMessage() *GuildJoinAutomaticallyRequestMessage {
	return &GuildJoinAutomaticallyRequestMessage{MessageBase: MessageBase{MessageType_: "GuildJoinAutomaticallyRequestMessage", id_: 2737}}
}
func (m *GuildJoinAutomaticallyRequestMessage) Deserialize(input *DataWrapper) {
	m.GuildId = input.ReadInt()
}

func (m *GuildJoinAutomaticallyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildJoinedMessage struct {
	MessageBase
	GuildInfo *GuildInformations
	RankId    int
}

func NewGuildJoinedMessage() *GuildJoinedMessage {
	return &GuildJoinedMessage{MessageBase: MessageBase{MessageType_: "GuildJoinedMessage", id_: 2814}}
}
func (m *GuildJoinedMessage) Deserialize(input *DataWrapper) {
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
	m.RankId = input.ReadVarUhInt()
}

func (m *GuildJoinedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildKickRequestMessage struct {
	MessageBase
	KickedId int64
}

func NewGuildKickRequestMessage() *GuildKickRequestMessage {
	return &GuildKickRequestMessage{MessageBase: MessageBase{MessageType_: "GuildKickRequestMessage", id_: 9738}}
}
func (m *GuildKickRequestMessage) Deserialize(input *DataWrapper) {
	m.KickedId = input.ReadVarUhLong()
}

func (m *GuildKickRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLeftMessage struct {
	MessageBase
}

func NewGuildLeftMessage() *GuildLeftMessage {
	return &GuildLeftMessage{MessageBase: MessageBase{MessageType_: "GuildLeftMessage", id_: 3266}}
}
func (m *GuildLeftMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildLeftMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLevelUpActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	NewGuildLevel uint8
}

func NewGuildLevelUpActivity() *GuildLevelUpActivity {
	return &GuildLevelUpActivity{MessageBase: MessageBase{MessageType_: "GuildLevelUpActivity", id_: 3398}}
}
func (m *GuildLevelUpActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.NewGuildLevel = input.ReadUnsignedByte()
}

func (m *GuildLevelUpActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLevelUpMessage struct {
	MessageBase
	NewLevel uint8
}

func NewGuildLevelUpMessage() *GuildLevelUpMessage {
	return &GuildLevelUpMessage{MessageBase: MessageBase{MessageType_: "GuildLevelUpMessage", id_: 5408}}
}
func (m *GuildLevelUpMessage) Deserialize(input *DataWrapper) {
	m.NewLevel = input.ReadUnsignedByte()
}

func (m *GuildLevelUpMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildListApplicationAnswerMessage struct {
	MessageBase
	PaginationAnswerAbstractMessage
	Applies *Vector[SocialApplicationInformation]
}

func NewGuildListApplicationAnswerMessage() *GuildListApplicationAnswerMessage {
	return &GuildListApplicationAnswerMessage{MessageBase: MessageBase{MessageType_: "GuildListApplicationAnswerMessage", id_: 948}}
}
func (m *GuildListApplicationAnswerMessage) Deserialize(input *DataWrapper) {
	m.PaginationAnswerAbstractMessage.Deserialize(input)
	m.Applies = NewVector[SocialApplicationInformation]()
	appliesLen := int(input.ReadShort())
	for i := 0; i < appliesLen; i++ {
		SocialApplicationInformation := NewSocialApplicationInformation()
		SocialApplicationInformation.Deserialize(input)
		m.Applies.Push(SocialApplicationInformation)
	}
}

func (m *GuildListApplicationAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildListApplicationModifiedMessage struct {
	MessageBase
	Apply    *SocialApplicationInformation
	State    int8
	PlayerId int64
}

func NewGuildListApplicationModifiedMessage() *GuildListApplicationModifiedMessage {
	return &GuildListApplicationModifiedMessage{MessageBase: MessageBase{MessageType_: "GuildListApplicationModifiedMessage", id_: 7224}}
}
func (m *GuildListApplicationModifiedMessage) Deserialize(input *DataWrapper) {
	m.Apply = NewSocialApplicationInformation()
	m.Apply.Deserialize(input)
	m.State = input.ReadByte()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *GuildListApplicationModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildListApplicationRequestMessage struct {
	MessageBase
	PaginationRequestAbstractMessage
}

func NewGuildListApplicationRequestMessage() *GuildListApplicationRequestMessage {
	return &GuildListApplicationRequestMessage{MessageBase: MessageBase{MessageType_: "GuildListApplicationRequestMessage", id_: 695}}
}
func (m *GuildListApplicationRequestMessage) Deserialize(input *DataWrapper) {
	m.PaginationRequestAbstractMessage.Deserialize(input)
}

func (m *GuildListApplicationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildListMessage struct {
	MessageBase
	Guilds *Vector[GuildInformations]
}

func NewGuildListMessage() *GuildListMessage {
	return &GuildListMessage{MessageBase: MessageBase{MessageType_: "GuildListMessage", id_: 669}}
}
func (m *GuildListMessage) Deserialize(input *DataWrapper) {
	m.Guilds = NewVector[GuildInformations]()
	guildsLen := int(input.ReadShort())
	for i := 0; i < guildsLen; i++ {
		GuildInformations := NewGuildInformations()
		GuildInformations.Deserialize(input)
		m.Guilds.Push(GuildInformations)
	}
}

func (m *GuildListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLogbookChestActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	PlayerId         int64
	PlayerName       string
	EventType        int8
	Quantity         int32
	Object           *ObjectItemNotInContainer
	SourceTabId      int32
	DestinationTabId int32
}

func NewGuildLogbookChestActivity() *GuildLogbookChestActivity {
	return &GuildLogbookChestActivity{MessageBase: MessageBase{MessageType_: "GuildLogbookChestActivity", id_: 9067}}
}
func (m *GuildLogbookChestActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.EventType = input.ReadByte()
	m.Quantity = input.ReadInt()
	m.Object = NewObjectItemNotInContainer()
	m.Object.Deserialize(input)
	m.SourceTabId = input.ReadInt()
	m.DestinationTabId = input.ReadInt()
}

func (m *GuildLogbookChestActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLogbookEntryBasicInformationI interface {
	Deserialize(input *DataWrapper)
}

type GuildLogbookEntryBasicInformation struct {
	MessageBase
	Id   int
	Date float64
}

func NewGuildLogbookEntryBasicInformation() *GuildLogbookEntryBasicInformation {
	return &GuildLogbookEntryBasicInformation{MessageBase: MessageBase{MessageType_: "GuildLogbookEntryBasicInformation", id_: 8590}}
}
func (m *GuildLogbookEntryBasicInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.Date = input.ReadDouble()
}

func (m *GuildLogbookEntryBasicInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLogbookInformationMessage struct {
	MessageBase
	GlobalActivities *Vector[GuildLogbookEntryBasicInformationI]
	ChestActivities  *Vector[GuildLogbookEntryBasicInformationI]
}

func NewGuildLogbookInformationMessage() *GuildLogbookInformationMessage {
	return &GuildLogbookInformationMessage{MessageBase: MessageBase{MessageType_: "GuildLogbookInformationMessage", id_: 7376}}
}
func (m *GuildLogbookInformationMessage) Deserialize(input *DataWrapper) {
	m.GlobalActivities = NewVector[GuildLogbookEntryBasicInformationI]()
	globalActivitiesLen := int(input.ReadShort())
	for i := 0; i < globalActivitiesLen; i++ {
		foundGuildLogbookEntryBasicInformation := getDynamicType(input)
		if castedGuildLogbookEntryBasicInformation, ok := foundGuildLogbookEntryBasicInformation.(GuildLogbookEntryBasicInformationI); ok {
			castedGuildLogbookEntryBasicInformation.Deserialize(input)
			m.GlobalActivities.Push(&castedGuildLogbookEntryBasicInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GuildLogbookEntryBasicInformationI, got: " + fmt.Sprintf("%T", foundGuildLogbookEntryBasicInformation))
		}
	}
	m.ChestActivities = NewVector[GuildLogbookEntryBasicInformationI]()
	chestActivitiesLen := int(input.ReadShort())
	for i := 0; i < chestActivitiesLen; i++ {
		foundGuildLogbookEntryBasicInformation := getDynamicType(input)
		if castedGuildLogbookEntryBasicInformation, ok := foundGuildLogbookEntryBasicInformation.(GuildLogbookEntryBasicInformationI); ok {
			castedGuildLogbookEntryBasicInformation.Deserialize(input)
			m.ChestActivities.Push(&castedGuildLogbookEntryBasicInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GuildLogbookEntryBasicInformationI, got: " + fmt.Sprintf("%T", foundGuildLogbookEntryBasicInformation))
		}
	}
}

func (m *GuildLogbookInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildLogbookInformationRequestMessage struct {
	MessageBase
}

func NewGuildLogbookInformationRequestMessage() *GuildLogbookInformationRequestMessage {
	return &GuildLogbookInformationRequestMessage{MessageBase: MessageBase{MessageType_: "GuildLogbookInformationRequestMessage", id_: 319}}
}
func (m *GuildLogbookInformationRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildLogbookInformationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMemberInfo struct {
	MessageBase
	SocialMember
	GivenExperience        int64
	ExperienceGivenPercent int8
	AlignmentSide          int8
	MoodSmileyId           int
	AchievementPoints      int32
	HavenBagShared         bool
	Note                   *PlayerNote
}

func NewGuildMemberInfo() *GuildMemberInfo {
	return &GuildMemberInfo{MessageBase: MessageBase{MessageType_: "GuildMemberInfo", id_: 4949}}
}
func (m *GuildMemberInfo) Deserialize(input *DataWrapper) {
	m.SocialMember.Deserialize(input)
	m.GivenExperience = input.ReadVarUhLong()
	m.ExperienceGivenPercent = input.ReadByte()
	m.AlignmentSide = input.ReadByte()
	m.MoodSmileyId = input.ReadVarUhShort()
	m.AchievementPoints = input.ReadInt()
	m.HavenBagShared = input.ReadBoolean()
	m.Note = NewPlayerNote()
	m.Note.Deserialize(input)
}

func (m *GuildMemberInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMemberLeavingMessage struct {
	MessageBase
	Kicked   bool
	MemberId int64
}

func NewGuildMemberLeavingMessage() *GuildMemberLeavingMessage {
	return &GuildMemberLeavingMessage{MessageBase: MessageBase{MessageType_: "GuildMemberLeavingMessage", id_: 7246}}
}
func (m *GuildMemberLeavingMessage) Deserialize(input *DataWrapper) {
	m.Kicked = input.ReadBoolean()
	m.MemberId = input.ReadVarUhLong()
}

func (m *GuildMemberLeavingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMemberOnlineStatusMessage struct {
	MessageBase
	MemberId int64
	Online   bool
}

func NewGuildMemberOnlineStatusMessage() *GuildMemberOnlineStatusMessage {
	return &GuildMemberOnlineStatusMessage{MessageBase: MessageBase{MessageType_: "GuildMemberOnlineStatusMessage", id_: 8750}}
}
func (m *GuildMemberOnlineStatusMessage) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadVarUhLong()
	m.Online = input.ReadBoolean()
}

func (m *GuildMemberOnlineStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMemberStartWarnOnConnectionMessage struct {
	MessageBase
}

func NewGuildMemberStartWarnOnConnectionMessage() *GuildMemberStartWarnOnConnectionMessage {
	return &GuildMemberStartWarnOnConnectionMessage{MessageBase: MessageBase{MessageType_: "GuildMemberStartWarnOnConnectionMessage", id_: 6143}}
}
func (m *GuildMemberStartWarnOnConnectionMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildMemberStartWarnOnConnectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMemberStopWarnOnConnectionMessage struct {
	MessageBase
}

func NewGuildMemberStopWarnOnConnectionMessage() *GuildMemberStopWarnOnConnectionMessage {
	return &GuildMemberStopWarnOnConnectionMessage{MessageBase: MessageBase{MessageType_: "GuildMemberStopWarnOnConnectionMessage", id_: 8625}}
}
func (m *GuildMemberStopWarnOnConnectionMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildMemberStopWarnOnConnectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMembershipMessage struct {
	MessageBase
	GuildJoinedMessage
}

func NewGuildMembershipMessage() *GuildMembershipMessage {
	return &GuildMembershipMessage{MessageBase: MessageBase{MessageType_: "GuildMembershipMessage", id_: 2644}}
}
func (m *GuildMembershipMessage) Deserialize(input *DataWrapper) {
	m.GuildJoinedMessage.Deserialize(input)
}

func (m *GuildMembershipMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildModificationEmblemValidMessage struct {
	MessageBase
	GuildEmblem *SocialEmblem
}

func NewGuildModificationEmblemValidMessage() *GuildModificationEmblemValidMessage {
	return &GuildModificationEmblemValidMessage{MessageBase: MessageBase{MessageType_: "GuildModificationEmblemValidMessage", id_: 4735}}
}
func (m *GuildModificationEmblemValidMessage) Deserialize(input *DataWrapper) {
	m.GuildEmblem = NewSocialEmblem()
	m.GuildEmblem.Deserialize(input)
}

func (m *GuildModificationEmblemValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildModificationNameValidMessage struct {
	MessageBase
	GuildName string
}

func NewGuildModificationNameValidMessage() *GuildModificationNameValidMessage {
	return &GuildModificationNameValidMessage{MessageBase: MessageBase{MessageType_: "GuildModificationNameValidMessage", id_: 5733}}
}
func (m *GuildModificationNameValidMessage) Deserialize(input *DataWrapper) {
	m.GuildName = input.ReadUTF()
}

func (m *GuildModificationNameValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildModificationResultMessage struct {
	MessageBase
	Result int8
}

func NewGuildModificationResultMessage() *GuildModificationResultMessage {
	return &GuildModificationResultMessage{MessageBase: MessageBase{MessageType_: "GuildModificationResultMessage", id_: 775}}
}
func (m *GuildModificationResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *GuildModificationResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildModificationStartedMessage struct {
	MessageBase
	CanChangeName   bool
	CanChangeEmblem bool
}

func NewGuildModificationStartedMessage() *GuildModificationStartedMessage {
	return &GuildModificationStartedMessage{MessageBase: MessageBase{MessageType_: "GuildModificationStartedMessage", id_: 515}}
}
func (m *GuildModificationStartedMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.CanChangeName = (byteBox0>>0)&1 != 0
	m.CanChangeEmblem = (byteBox0>>1)&1 != 0
}

func (m *GuildModificationStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildModificationValidMessage struct {
	MessageBase
	GuildName   string
	GuildEmblem *SocialEmblem
}

func NewGuildModificationValidMessage() *GuildModificationValidMessage {
	return &GuildModificationValidMessage{MessageBase: MessageBase{MessageType_: "GuildModificationValidMessage", id_: 4686}}
}
func (m *GuildModificationValidMessage) Deserialize(input *DataWrapper) {
	m.GuildName = input.ReadUTF()
	m.GuildEmblem = NewSocialEmblem()
	m.GuildEmblem.Deserialize(input)
}

func (m *GuildModificationValidMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMotdMessage struct {
	MessageBase
	SocialNoticeMessage
}

func NewGuildMotdMessage() *GuildMotdMessage {
	return &GuildMotdMessage{MessageBase: MessageBase{MessageType_: "GuildMotdMessage", id_: 4318}}
}
func (m *GuildMotdMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeMessage.Deserialize(input)
}

func (m *GuildMotdMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMotdSetErrorMessage struct {
	MessageBase
	SocialNoticeSetErrorMessage
}

func NewGuildMotdSetErrorMessage() *GuildMotdSetErrorMessage {
	return &GuildMotdSetErrorMessage{MessageBase: MessageBase{MessageType_: "GuildMotdSetErrorMessage", id_: 6422}}
}
func (m *GuildMotdSetErrorMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetErrorMessage.Deserialize(input)
}

func (m *GuildMotdSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildMotdSetRequestMessage struct {
	MessageBase
	SocialNoticeSetRequestMessage
	Content string
}

func NewGuildMotdSetRequestMessage() *GuildMotdSetRequestMessage {
	return &GuildMotdSetRequestMessage{MessageBase: MessageBase{MessageType_: "GuildMotdSetRequestMessage", id_: 3388}}
}
func (m *GuildMotdSetRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialNoticeSetRequestMessage.Deserialize(input)
	m.Content = input.ReadUTF()
}

func (m *GuildMotdSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPaddockActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	PlayerId           int64
	PlayerName         string
	PaddockCoordinates *MapCoordinatesExtended
	FarmId             float64
	PaddockEventType   int8
}

func NewGuildPaddockActivity() *GuildPaddockActivity {
	return &GuildPaddockActivity{MessageBase: MessageBase{MessageType_: "GuildPaddockActivity", id_: 3935}}
}
func (m *GuildPaddockActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.PaddockCoordinates = NewMapCoordinatesExtended()
	m.PaddockCoordinates.Deserialize(input)
	m.FarmId = input.ReadDouble()
	m.PaddockEventType = input.ReadByte()
}

func (m *GuildPaddockActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPaddockBoughtMessage struct {
	MessageBase
	PaddockInfo *PaddockContentInformations
}

func NewGuildPaddockBoughtMessage() *GuildPaddockBoughtMessage {
	return &GuildPaddockBoughtMessage{MessageBase: MessageBase{MessageType_: "GuildPaddockBoughtMessage", id_: 4625}}
}
func (m *GuildPaddockBoughtMessage) Deserialize(input *DataWrapper) {
	m.PaddockInfo = NewPaddockContentInformations()
	m.PaddockInfo.Deserialize(input)
}

func (m *GuildPaddockBoughtMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPaddockRemovedMessage struct {
	MessageBase
	PaddockId float64
}

func NewGuildPaddockRemovedMessage() *GuildPaddockRemovedMessage {
	return &GuildPaddockRemovedMessage{MessageBase: MessageBase{MessageType_: "GuildPaddockRemovedMessage", id_: 1415}}
}
func (m *GuildPaddockRemovedMessage) Deserialize(input *DataWrapper) {
	m.PaddockId = input.ReadDouble()
}

func (m *GuildPaddockRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPaddockTeleportRequestMessage struct {
	MessageBase
	PaddockId float64
}

func NewGuildPaddockTeleportRequestMessage() *GuildPaddockTeleportRequestMessage {
	return &GuildPaddockTeleportRequestMessage{MessageBase: MessageBase{MessageType_: "GuildPaddockTeleportRequestMessage", id_: 8533}}
}
func (m *GuildPaddockTeleportRequestMessage) Deserialize(input *DataWrapper) {
	m.PaddockId = input.ReadDouble()
}

func (m *GuildPaddockTeleportRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPlayerApplicationAbstractMessage struct {
	MessageBase
}

func NewGuildPlayerApplicationAbstractMessage() *GuildPlayerApplicationAbstractMessage {
	return &GuildPlayerApplicationAbstractMessage{MessageBase: MessageBase{MessageType_: "GuildPlayerApplicationAbstractMessage", id_: 4745}}
}
func (m *GuildPlayerApplicationAbstractMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildPlayerApplicationAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPlayerApplicationInformationMessage struct {
	MessageBase
	GuildPlayerApplicationAbstractMessage
	GuildInformation *GuildInformations
	Apply            *SocialApplicationInformation
}

func NewGuildPlayerApplicationInformationMessage() *GuildPlayerApplicationInformationMessage {
	return &GuildPlayerApplicationInformationMessage{MessageBase: MessageBase{MessageType_: "GuildPlayerApplicationInformationMessage", id_: 656}}
}
func (m *GuildPlayerApplicationInformationMessage) Deserialize(input *DataWrapper) {
	m.GuildPlayerApplicationAbstractMessage.Deserialize(input)
	m.GuildInformation = NewGuildInformations()
	m.GuildInformation.Deserialize(input)
	m.Apply = NewSocialApplicationInformation()
	m.Apply.Deserialize(input)
}

func (m *GuildPlayerApplicationInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPlayerFlowActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	PlayerId            int64
	PlayerName          string
	PlayerFlowEventType int8
}

func NewGuildPlayerFlowActivity() *GuildPlayerFlowActivity {
	return &GuildPlayerFlowActivity{MessageBase: MessageBase{MessageType_: "GuildPlayerFlowActivity", id_: 2970}}
}
func (m *GuildPlayerFlowActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.PlayerFlowEventType = input.ReadByte()
}

func (m *GuildPlayerFlowActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPlayerNoApplicationInformationMessage struct {
	MessageBase
	GuildPlayerApplicationAbstractMessage
}

func NewGuildPlayerNoApplicationInformationMessage() *GuildPlayerNoApplicationInformationMessage {
	return &GuildPlayerNoApplicationInformationMessage{MessageBase: MessageBase{MessageType_: "GuildPlayerNoApplicationInformationMessage", id_: 6961}}
}
func (m *GuildPlayerNoApplicationInformationMessage) Deserialize(input *DataWrapper) {
	m.GuildPlayerApplicationAbstractMessage.Deserialize(input)
}

func (m *GuildPlayerNoApplicationInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildPlayerRankUpdateActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	GuildRankMinimalInfos *RankMinimalInformation
	SourcePlayerId        int64
	TargetPlayerId        int64
	SourcePlayerName      string
	TargetPlayerName      string
}

func NewGuildPlayerRankUpdateActivity() *GuildPlayerRankUpdateActivity {
	return &GuildPlayerRankUpdateActivity{MessageBase: MessageBase{MessageType_: "GuildPlayerRankUpdateActivity", id_: 8680}}
}
func (m *GuildPlayerRankUpdateActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.GuildRankMinimalInfos = NewRankMinimalInformation()
	m.GuildRankMinimalInfos.Deserialize(input)
	m.SourcePlayerId = input.ReadVarUhLong()
	m.TargetPlayerId = input.ReadVarUhLong()
	m.SourcePlayerName = input.ReadUTF()
	m.TargetPlayerName = input.ReadUTF()
}

func (m *GuildPlayerRankUpdateActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildRankActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
	RankActivityType      int8
	GuildRankMinimalInfos *RankMinimalInformation
}

func NewGuildRankActivity() *GuildRankActivity {
	return &GuildRankActivity{MessageBase: MessageBase{MessageType_: "GuildRankActivity", id_: 3270}}
}
func (m *GuildRankActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
	m.RankActivityType = input.ReadByte()
	m.GuildRankMinimalInfos = NewRankMinimalInformation()
	m.GuildRankMinimalInfos.Deserialize(input)
}

func (m *GuildRankActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildRanksMessage struct {
	MessageBase
	Ranks *Vector[RankInformation]
}

func NewGuildRanksMessage() *GuildRanksMessage {
	return &GuildRanksMessage{MessageBase: MessageBase{MessageType_: "GuildRanksMessage", id_: 3908}}
}
func (m *GuildRanksMessage) Deserialize(input *DataWrapper) {
	m.Ranks = NewVector[RankInformation]()
	ranksLen := int(input.ReadShort())
	for i := 0; i < ranksLen; i++ {
		RankInformation := NewRankInformation()
		RankInformation.Deserialize(input)
		m.Ranks.Push(RankInformation)
	}
}

func (m *GuildRanksMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildRanksRequestMessage struct {
	MessageBase
}

func NewGuildRanksRequestMessage() *GuildRanksRequestMessage {
	return &GuildRanksRequestMessage{MessageBase: MessageBase{MessageType_: "GuildRanksRequestMessage", id_: 5381}}
}
func (m *GuildRanksRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildRanksRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildRecruitmentInformation struct {
	MessageBase
	SocialRecruitmentInformation
	MinSuccess            int
	MinSuccessFacultative bool
}

func NewGuildRecruitmentInformation() *GuildRecruitmentInformation {
	return &GuildRecruitmentInformation{MessageBase: MessageBase{MessageType_: "GuildRecruitmentInformation", id_: 5578}}
}
func (m *GuildRecruitmentInformation) Deserialize(input *DataWrapper) {
	m.SocialRecruitmentInformation.Deserialize(input)
	m.MinSuccess = input.ReadVarUhInt()
	m.MinSuccessFacultative = input.ReadBoolean()
}

func (m *GuildRecruitmentInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildRecruitmentInvalidateMessage struct {
	MessageBase
}

func NewGuildRecruitmentInvalidateMessage() *GuildRecruitmentInvalidateMessage {
	return &GuildRecruitmentInvalidateMessage{MessageBase: MessageBase{MessageType_: "GuildRecruitmentInvalidateMessage", id_: 5184}}
}
func (m *GuildRecruitmentInvalidateMessage) Deserialize(input *DataWrapper) {
}

func (m *GuildRecruitmentInvalidateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildSelectChestTabRequestMessage struct {
	MessageBase
	TabNumber int
}

func NewGuildSelectChestTabRequestMessage() *GuildSelectChestTabRequestMessage {
	return &GuildSelectChestTabRequestMessage{MessageBase: MessageBase{MessageType_: "GuildSelectChestTabRequestMessage", id_: 7367}}
}
func (m *GuildSelectChestTabRequestMessage) Deserialize(input *DataWrapper) {
	m.TabNumber = input.ReadVarUhInt()
}

func (m *GuildSelectChestTabRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildSpellUpgradeRequestMessage struct {
	MessageBase
	SpellId int32
}

func NewGuildSpellUpgradeRequestMessage() *GuildSpellUpgradeRequestMessage {
	return &GuildSpellUpgradeRequestMessage{MessageBase: MessageBase{MessageType_: "GuildSpellUpgradeRequestMessage", id_: 5991}}
}
func (m *GuildSpellUpgradeRequestMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadInt()
}

func (m *GuildSpellUpgradeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildSubmitApplicationMessage struct {
	MessageBase
	ApplyText                  string
	GuildId                    int
	TimeSpent                  int
	FilterLanguage             string
	FilterAmbiance             string
	FilterPlaytime             string
	FilterInterest             string
	FilterMinMaxGuildLevel     string
	FilterRecruitmentType      string
	FilterMinMaxCharacterLevel string
	FilterMinMaxAchievement    string
	FilterSearchName           string
	FilterLastSort             string
}

func NewGuildSubmitApplicationMessage() *GuildSubmitApplicationMessage {
	return &GuildSubmitApplicationMessage{MessageBase: MessageBase{MessageType_: "GuildSubmitApplicationMessage", id_: 2378}}
}
func (m *GuildSubmitApplicationMessage) Deserialize(input *DataWrapper) {
	m.ApplyText = input.ReadUTF()
	m.GuildId = input.ReadVarUhInt()
	m.TimeSpent = input.ReadVarUhInt()
	m.FilterLanguage = input.ReadUTF()
	m.FilterAmbiance = input.ReadUTF()
	m.FilterPlaytime = input.ReadUTF()
	m.FilterInterest = input.ReadUTF()
	m.FilterMinMaxGuildLevel = input.ReadUTF()
	m.FilterRecruitmentType = input.ReadUTF()
	m.FilterMinMaxCharacterLevel = input.ReadUTF()
	m.FilterMinMaxAchievement = input.ReadUTF()
	m.FilterSearchName = input.ReadUTF()
	m.FilterLastSort = input.ReadUTF()
}

func (m *GuildSubmitApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildSummaryMessage struct {
	MessageBase
	PaginationAnswerAbstractMessage
	Guilds *Vector[GuildFactSheetInformations]
}

func NewGuildSummaryMessage() *GuildSummaryMessage {
	return &GuildSummaryMessage{MessageBase: MessageBase{MessageType_: "GuildSummaryMessage", id_: 156}}
}
func (m *GuildSummaryMessage) Deserialize(input *DataWrapper) {
	m.PaginationAnswerAbstractMessage.Deserialize(input)
	m.Guilds = NewVector[GuildFactSheetInformations]()
	guildsLen := int(input.ReadShort())
	for i := 0; i < guildsLen; i++ {
		GuildFactSheetInformations := NewGuildFactSheetInformations()
		GuildFactSheetInformations.Deserialize(input)
		m.Guilds.Push(GuildFactSheetInformations)
	}
}

func (m *GuildSummaryMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildSummaryRequestMessage struct {
	MessageBase
	PaginationRequestAbstractMessage
	NameFilter             string
	HideFullFilter         bool
	FollowingGuildCriteria bool
	CriterionFilter        *Vector[int]
	LanguagesFilter        *Vector[int]
	RecruitmentTypeFilter  *Vector[int8]
	MinLevelFilter         int16
	MaxLevelFilter         int16
	MinPlayerLevelFilter   int16
	MaxPlayerLevelFilter   int16
	MinSuccessFilter       int
	MaxSuccessFilter       int
	SortType               int8
	SortDescending         bool
}

func NewGuildSummaryRequestMessage() *GuildSummaryRequestMessage {
	return &GuildSummaryRequestMessage{MessageBase: MessageBase{MessageType_: "GuildSummaryRequestMessage", id_: 1163}}
}
func (m *GuildSummaryRequestMessage) Deserialize(input *DataWrapper) {
	m.PaginationRequestAbstractMessage.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.HideFullFilter = (byteBox0>>0)&1 != 0
	m.FollowingGuildCriteria = (byteBox0>>1)&1 != 0
	m.SortDescending = (byteBox0>>2)&1 != 0
	m.NameFilter = input.ReadUTF()
	m.CriterionFilter = NewVector[int]()
	criterionFilterLen := int(input.ReadShort())
	for i := 0; i < criterionFilterLen; i++ {
		val := input.ReadVarInt()
		m.CriterionFilter.Push(&val)
	}
	m.LanguagesFilter = NewVector[int]()
	languagesFilterLen := int(input.ReadShort())
	for i := 0; i < languagesFilterLen; i++ {
		val := input.ReadVarInt()
		m.LanguagesFilter.Push(&val)
	}
	m.RecruitmentTypeFilter = NewVector[int8]()
	recruitmentTypeFilterLen := int(input.ReadShort())
	for i := 0; i < recruitmentTypeFilterLen; i++ {
		val := input.ReadByte()
		m.RecruitmentTypeFilter.Push(&val)
	}
	m.MinLevelFilter = input.ReadShort()
	m.MaxLevelFilter = input.ReadShort()
	m.MinPlayerLevelFilter = input.ReadShort()
	m.MaxPlayerLevelFilter = input.ReadShort()
	m.MinSuccessFilter = input.ReadVarUhInt()
	m.MaxSuccessFilter = input.ReadVarUhInt()
	m.SortType = input.ReadByte()
}

func (m *GuildSummaryRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildUnlockNewTabActivity struct {
	MessageBase
	GuildLogbookEntryBasicInformation
}

func NewGuildUnlockNewTabActivity() *GuildUnlockNewTabActivity {
	return &GuildUnlockNewTabActivity{MessageBase: MessageBase{MessageType_: "GuildUnlockNewTabActivity", id_: 7681}}
}
func (m *GuildUnlockNewTabActivity) Deserialize(input *DataWrapper) {
	m.GuildLogbookEntryBasicInformation.Deserialize(input)
}

func (m *GuildUnlockNewTabActivity) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildUpdateApplicationMessage struct {
	MessageBase
	ApplyText string
	GuildId   int
}

func NewGuildUpdateApplicationMessage() *GuildUpdateApplicationMessage {
	return &GuildUpdateApplicationMessage{MessageBase: MessageBase{MessageType_: "GuildUpdateApplicationMessage", id_: 7570}}
}
func (m *GuildUpdateApplicationMessage) Deserialize(input *DataWrapper) {
	m.ApplyText = input.ReadUTF()
	m.GuildId = input.ReadVarUhInt()
}

func (m *GuildUpdateApplicationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildUpdateChestTabRequestMessage struct {
	MessageBase
	Tab *UpdatedStorageTabInformation
}

func NewGuildUpdateChestTabRequestMessage() *GuildUpdateChestTabRequestMessage {
	return &GuildUpdateChestTabRequestMessage{MessageBase: MessageBase{MessageType_: "GuildUpdateChestTabRequestMessage", id_: 6464}}
}
func (m *GuildUpdateChestTabRequestMessage) Deserialize(input *DataWrapper) {
	m.Tab = NewUpdatedStorageTabInformation()
	m.Tab.Deserialize(input)
}

func (m *GuildUpdateChestTabRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type GuildUpdateNoteMessage struct {
	MessageBase
	MemberId int64
	Note     string
}

func NewGuildUpdateNoteMessage() *GuildUpdateNoteMessage {
	return &GuildUpdateNoteMessage{MessageBase: MessageBase{MessageType_: "GuildUpdateNoteMessage", id_: 7051}}
}
func (m *GuildUpdateNoteMessage) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadVarUhLong()
	m.Note = input.ReadUTF()
}

func (m *GuildUpdateNoteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiApiKeyMessage struct {
	MessageBase
	Token string
}

func NewHaapiApiKeyMessage() *HaapiApiKeyMessage {
	return &HaapiApiKeyMessage{MessageBase: MessageBase{MessageType_: "HaapiApiKeyMessage", id_: 4765}}
}
func (m *HaapiApiKeyMessage) Deserialize(input *DataWrapper) {
	m.Token = input.ReadUTF()
}

func (m *HaapiApiKeyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiApiKeyRequestMessage struct {
	MessageBase
}

func NewHaapiApiKeyRequestMessage() *HaapiApiKeyRequestMessage {
	return &HaapiApiKeyRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiApiKeyRequestMessage", id_: 9219}}
}
func (m *HaapiApiKeyRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *HaapiApiKeyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiAuthErrorMessage struct {
	MessageBase
	Type int8
}

func NewHaapiAuthErrorMessage() *HaapiAuthErrorMessage {
	return &HaapiAuthErrorMessage{MessageBase: MessageBase{MessageType_: "HaapiAuthErrorMessage", id_: 349}}
}
func (m *HaapiAuthErrorMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
}

func (m *HaapiAuthErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiBufferListMessage struct {
	MessageBase
	Buffers *Vector[BufferInformation]
}

func NewHaapiBufferListMessage() *HaapiBufferListMessage {
	return &HaapiBufferListMessage{MessageBase: MessageBase{MessageType_: "HaapiBufferListMessage", id_: 3}}
}
func (m *HaapiBufferListMessage) Deserialize(input *DataWrapper) {
	m.Buffers = NewVector[BufferInformation]()
	buffersLen := int(input.ReadShort())
	for i := 0; i < buffersLen; i++ {
		BufferInformation := NewBufferInformation()
		BufferInformation.Deserialize(input)
		m.Buffers.Push(BufferInformation)
	}
}

func (m *HaapiBufferListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiBufferListRequestMessage struct {
	MessageBase
}

func NewHaapiBufferListRequestMessage() *HaapiBufferListRequestMessage {
	return &HaapiBufferListRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiBufferListRequestMessage", id_: 4581}}
}
func (m *HaapiBufferListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *HaapiBufferListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiBuyValidationMessage struct {
	MessageBase
	HaapiValidationMessage
	Amount int64
	Email  string
}

func NewHaapiBuyValidationMessage() *HaapiBuyValidationMessage {
	return &HaapiBuyValidationMessage{MessageBase: MessageBase{MessageType_: "HaapiBuyValidationMessage", id_: 1448}}
}
func (m *HaapiBuyValidationMessage) Deserialize(input *DataWrapper) {
	m.HaapiValidationMessage.Deserialize(input)
	m.Amount = input.ReadVarUhLong()
	m.Email = input.ReadUTF()
}

func (m *HaapiBuyValidationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiCancelBidRequestMessage struct {
	MessageBase
	Id   int64
	Type int8
}

func NewHaapiCancelBidRequestMessage() *HaapiCancelBidRequestMessage {
	return &HaapiCancelBidRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiCancelBidRequestMessage", id_: 6447}}
}
func (m *HaapiCancelBidRequestMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
	m.Type = input.ReadByte()
}

func (m *HaapiCancelBidRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiConfirmationMessage struct {
	MessageBase
	Kamas       int64
	Amount      int64
	Rate        int
	Action      int8
	Transaction string
}

func NewHaapiConfirmationMessage() *HaapiConfirmationMessage {
	return &HaapiConfirmationMessage{MessageBase: MessageBase{MessageType_: "HaapiConfirmationMessage", id_: 5031}}
}
func (m *HaapiConfirmationMessage) Deserialize(input *DataWrapper) {
	m.Kamas = input.ReadVarUhLong()
	m.Amount = input.ReadVarUhLong()
	m.Rate = input.ReadVarUhShort()
	m.Action = input.ReadByte()
	m.Transaction = input.ReadUTF()
}

func (m *HaapiConfirmationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiConfirmationRequestMessage struct {
	MessageBase
	Kamas   int64
	Ogrines int64
	Rate    int
	Action  int8
}

func NewHaapiConfirmationRequestMessage() *HaapiConfirmationRequestMessage {
	return &HaapiConfirmationRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiConfirmationRequestMessage", id_: 7674}}
}
func (m *HaapiConfirmationRequestMessage) Deserialize(input *DataWrapper) {
	m.Kamas = input.ReadVarUhLong()
	m.Ogrines = input.ReadVarUhLong()
	m.Rate = input.ReadVarUhShort()
	m.Action = input.ReadByte()
}

func (m *HaapiConfirmationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiConsumeBufferRequestMessage struct {
	MessageBase
}

func NewHaapiConsumeBufferRequestMessage() *HaapiConsumeBufferRequestMessage {
	return &HaapiConsumeBufferRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiConsumeBufferRequestMessage", id_: 2127}}
}
func (m *HaapiConsumeBufferRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *HaapiConsumeBufferRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiSessionMessage struct {
	MessageBase
	Key  string
	Type int8
}

func NewHaapiSessionMessage() *HaapiSessionMessage {
	return &HaapiSessionMessage{MessageBase: MessageBase{MessageType_: "HaapiSessionMessage", id_: 4199}}
}
func (m *HaapiSessionMessage) Deserialize(input *DataWrapper) {
	m.Key = input.ReadUTF()
	m.Type = input.ReadByte()
}

func (m *HaapiSessionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiShopApiKeyMessage struct {
	MessageBase
	Token string
}

func NewHaapiShopApiKeyMessage() *HaapiShopApiKeyMessage {
	return &HaapiShopApiKeyMessage{MessageBase: MessageBase{MessageType_: "HaapiShopApiKeyMessage", id_: 1934}}
}
func (m *HaapiShopApiKeyMessage) Deserialize(input *DataWrapper) {
	m.Token = input.ReadUTF()
}

func (m *HaapiShopApiKeyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiShopApiKeyRequestMessage struct {
	MessageBase
}

func NewHaapiShopApiKeyRequestMessage() *HaapiShopApiKeyRequestMessage {
	return &HaapiShopApiKeyRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiShopApiKeyRequestMessage", id_: 9104}}
}
func (m *HaapiShopApiKeyRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *HaapiShopApiKeyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiTokenMessage struct {
	MessageBase
	Token string
}

func NewHaapiTokenMessage() *HaapiTokenMessage {
	return &HaapiTokenMessage{MessageBase: MessageBase{MessageType_: "HaapiTokenMessage", id_: 4627}}
}
func (m *HaapiTokenMessage) Deserialize(input *DataWrapper) {
	m.Token = input.ReadUTF()
}

func (m *HaapiTokenMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiTokenRequestMessage struct {
	MessageBase
}

func NewHaapiTokenRequestMessage() *HaapiTokenRequestMessage {
	return &HaapiTokenRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiTokenRequestMessage", id_: 5934}}
}
func (m *HaapiTokenRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *HaapiTokenRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiValidationMessage struct {
	MessageBase
	Action int8
	Code   int8
}

func NewHaapiValidationMessage() *HaapiValidationMessage {
	return &HaapiValidationMessage{MessageBase: MessageBase{MessageType_: "HaapiValidationMessage", id_: 7090}}
}
func (m *HaapiValidationMessage) Deserialize(input *DataWrapper) {
	m.Action = input.ReadByte()
	m.Code = input.ReadByte()
}

func (m *HaapiValidationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HaapiValidationRequestMessage struct {
	MessageBase
	Transaction string
}

func NewHaapiValidationRequestMessage() *HaapiValidationRequestMessage {
	return &HaapiValidationRequestMessage{MessageBase: MessageBase{MessageType_: "HaapiValidationRequestMessage", id_: 2930}}
}
func (m *HaapiValidationRequestMessage) Deserialize(input *DataWrapper) {
	m.Transaction = input.ReadUTF()
}

func (m *HaapiValidationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagDailyLoteryMessage struct {
	MessageBase
	ReturnType   int8
	GameActionId string
}

func NewHavenBagDailyLoteryMessage() *HavenBagDailyLoteryMessage {
	return &HavenBagDailyLoteryMessage{MessageBase: MessageBase{MessageType_: "HavenBagDailyLoteryMessage", id_: 9352}}
}
func (m *HavenBagDailyLoteryMessage) Deserialize(input *DataWrapper) {
	m.ReturnType = input.ReadByte()
	m.GameActionId = input.ReadUTF()
}

func (m *HavenBagDailyLoteryMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagFurnitureInformation struct {
	MessageBase
	CellId      int
	FunitureId  int32
	Orientation int8
}

func NewHavenBagFurnitureInformation() *HavenBagFurnitureInformation {
	return &HavenBagFurnitureInformation{MessageBase: MessageBase{MessageType_: "HavenBagFurnitureInformation", id_: 3250}}
}
func (m *HavenBagFurnitureInformation) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
	m.FunitureId = input.ReadInt()
	m.Orientation = input.ReadByte()
}

func (m *HavenBagFurnitureInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagFurnituresMessage struct {
	MessageBase
	FurnituresInfos *Vector[HavenBagFurnitureInformation]
}

func NewHavenBagFurnituresMessage() *HavenBagFurnituresMessage {
	return &HavenBagFurnituresMessage{MessageBase: MessageBase{MessageType_: "HavenBagFurnituresMessage", id_: 135}}
}
func (m *HavenBagFurnituresMessage) Deserialize(input *DataWrapper) {
	m.FurnituresInfos = NewVector[HavenBagFurnitureInformation]()
	furnituresInfosLen := int(input.ReadShort())
	for i := 0; i < furnituresInfosLen; i++ {
		HavenBagFurnitureInformation := NewHavenBagFurnitureInformation()
		HavenBagFurnitureInformation.Deserialize(input)
		m.FurnituresInfos.Push(HavenBagFurnitureInformation)
	}
}

func (m *HavenBagFurnituresMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagFurnituresRequestMessage struct {
	MessageBase
	CellIds      *Vector[int]
	FunitureIds  *Vector[int32]
	Orientations *Vector[int8]
}

func NewHavenBagFurnituresRequestMessage() *HavenBagFurnituresRequestMessage {
	return &HavenBagFurnituresRequestMessage{MessageBase: MessageBase{MessageType_: "HavenBagFurnituresRequestMessage", id_: 5127}}
}
func (m *HavenBagFurnituresRequestMessage) Deserialize(input *DataWrapper) {
	m.CellIds = NewVector[int]()
	cellIdsLen := int(input.ReadShort())
	for i := 0; i < cellIdsLen; i++ {
		val := input.ReadVarShort()
		m.CellIds.Push(&val)
	}
	m.FunitureIds = NewVector[int32]()
	funitureIdsLen := int(input.ReadShort())
	for i := 0; i < funitureIdsLen; i++ {
		val := input.ReadInt()
		m.FunitureIds.Push(&val)
	}
	m.Orientations = NewVector[int8]()
	orientationsLen := int(input.ReadShort())
	for i := 0; i < orientationsLen; i++ {
		val := input.ReadByte()
		m.Orientations.Push(&val)
	}
}

func (m *HavenBagFurnituresRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagPackListMessage struct {
	MessageBase
	PackIds *Vector[int8]
}

func NewHavenBagPackListMessage() *HavenBagPackListMessage {
	return &HavenBagPackListMessage{MessageBase: MessageBase{MessageType_: "HavenBagPackListMessage", id_: 9897}}
}
func (m *HavenBagPackListMessage) Deserialize(input *DataWrapper) {
	m.PackIds = NewVector[int8]()
	packIdsLen := int(input.ReadShort())
	for i := 0; i < packIdsLen; i++ {
		val := input.ReadByte()
		m.PackIds.Push(&val)
	}
}

func (m *HavenBagPackListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagPermissionsUpdateMessage struct {
	MessageBase
	Permissions int32
}

func NewHavenBagPermissionsUpdateMessage() *HavenBagPermissionsUpdateMessage {
	return &HavenBagPermissionsUpdateMessage{MessageBase: MessageBase{MessageType_: "HavenBagPermissionsUpdateMessage", id_: 7957}}
}
func (m *HavenBagPermissionsUpdateMessage) Deserialize(input *DataWrapper) {
	m.Permissions = input.ReadInt()
}

func (m *HavenBagPermissionsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagPermissionsUpdateRequestMessage struct {
	MessageBase
	Permissions int32
}

func NewHavenBagPermissionsUpdateRequestMessage() *HavenBagPermissionsUpdateRequestMessage {
	return &HavenBagPermissionsUpdateRequestMessage{MessageBase: MessageBase{MessageType_: "HavenBagPermissionsUpdateRequestMessage", id_: 958}}
}
func (m *HavenBagPermissionsUpdateRequestMessage) Deserialize(input *DataWrapper) {
	m.Permissions = input.ReadInt()
}

func (m *HavenBagPermissionsUpdateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagRoomPreviewInformation struct {
	MessageBase
	RoomId  uint8
	ThemeId int8
}

func NewHavenBagRoomPreviewInformation() *HavenBagRoomPreviewInformation {
	return &HavenBagRoomPreviewInformation{MessageBase: MessageBase{MessageType_: "HavenBagRoomPreviewInformation", id_: 8049}}
}
func (m *HavenBagRoomPreviewInformation) Deserialize(input *DataWrapper) {
	m.RoomId = input.ReadUnsignedByte()
	m.ThemeId = input.ReadByte()
}

func (m *HavenBagRoomPreviewInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type HavenBagRoomUpdateMessage struct {
	MessageBase
	Action       int8
	RoomsPreview *Vector[HavenBagRoomPreviewInformation]
}

func NewHavenBagRoomUpdateMessage() *HavenBagRoomUpdateMessage {
	return &HavenBagRoomUpdateMessage{MessageBase: MessageBase{MessageType_: "HavenBagRoomUpdateMessage", id_: 5461}}
}
func (m *HavenBagRoomUpdateMessage) Deserialize(input *DataWrapper) {
	m.Action = input.ReadByte()
	m.RoomsPreview = NewVector[HavenBagRoomPreviewInformation]()
	roomsPreviewLen := int(input.ReadShort())
	for i := 0; i < roomsPreviewLen; i++ {
		HavenBagRoomPreviewInformation := NewHavenBagRoomPreviewInformation()
		HavenBagRoomPreviewInformation.Deserialize(input)
		m.RoomsPreview.Push(HavenBagRoomPreviewInformation)
	}
}

func (m *HavenBagRoomUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HelloConnectMessage struct {
	MessageBase
	Salt string
	Key  *Vector[int8]
}

func NewHelloConnectMessage() *HelloConnectMessage {
	return &HelloConnectMessage{MessageBase: MessageBase{MessageType_: "HelloConnectMessage", id_: 5586}}
}
func (m *HelloConnectMessage) Deserialize(input *DataWrapper) {
	m.Salt = input.ReadUTF()
	m.Key = NewVector[int8]()
	keyLen := int(input.ReadVarInt())
	for i := 0; i < keyLen; i++ {
		val := input.ReadByte()
		m.Key.Push(&val)
	}
}

func (m *HelloConnectMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HelloGameMessage struct {
	MessageBase
}

func NewHelloGameMessage() *HelloGameMessage {
	return &HelloGameMessage{MessageBase: MessageBase{MessageType_: "HelloGameMessage", id_: 708}}
}
func (m *HelloGameMessage) Deserialize(input *DataWrapper) {
}

func (m *HelloGameMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseBuyRequestMessage struct {
	MessageBase
	ProposedPrice int64
}

func NewHouseBuyRequestMessage() *HouseBuyRequestMessage {
	return &HouseBuyRequestMessage{MessageBase: MessageBase{MessageType_: "HouseBuyRequestMessage", id_: 5849}}
}
func (m *HouseBuyRequestMessage) Deserialize(input *DataWrapper) {
	m.ProposedPrice = input.ReadVarUhLong()
}

func (m *HouseBuyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseBuyResultMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	SecondHand bool
	Bought     bool
	RealPrice  int64
}

func NewHouseBuyResultMessage() *HouseBuyResultMessage {
	return &HouseBuyResultMessage{MessageBase: MessageBase{MessageType_: "HouseBuyResultMessage", id_: 4284}}
}
func (m *HouseBuyResultMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.SecondHand = (byteBox0>>0)&1 != 0
	m.Bought = (byteBox0>>1)&1 != 0
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.RealPrice = input.ReadVarUhLong()
}

func (m *HouseBuyResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseGuildNoneMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	SecondHand bool
}

func NewHouseGuildNoneMessage() *HouseGuildNoneMessage {
	return &HouseGuildNoneMessage{MessageBase: MessageBase{MessageType_: "HouseGuildNoneMessage", id_: 7676}}
}
func (m *HouseGuildNoneMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
}

func (m *HouseGuildNoneMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseGuildRightsMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	SecondHand bool
	GuildInfo  *GuildInformations
	Rights     int
}

func NewHouseGuildRightsMessage() *HouseGuildRightsMessage {
	return &HouseGuildRightsMessage{MessageBase: MessageBase{MessageType_: "HouseGuildRightsMessage", id_: 8722}}
}
func (m *HouseGuildRightsMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
	m.Rights = input.ReadVarUhInt()
}

func (m *HouseGuildRightsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseGuildRightsViewMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
}

func NewHouseGuildRightsViewMessage() *HouseGuildRightsViewMessage {
	return &HouseGuildRightsViewMessage{MessageBase: MessageBase{MessageType_: "HouseGuildRightsViewMessage", id_: 9956}}
}
func (m *HouseGuildRightsViewMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
}

func (m *HouseGuildRightsViewMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseGuildShareRequestMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	Enable     bool
	Rights     int
}

func NewHouseGuildShareRequestMessage() *HouseGuildShareRequestMessage {
	return &HouseGuildShareRequestMessage{MessageBase: MessageBase{MessageType_: "HouseGuildShareRequestMessage", id_: 5369}}
}
func (m *HouseGuildShareRequestMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.Enable = input.ReadBoolean()
	m.Rights = input.ReadVarUhInt()
}

func (m *HouseGuildShareRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseGuildedInformations struct {
	MessageBase
	HouseInstanceInformations
	GuildInfo *GuildInformations
}

func NewHouseGuildedInformations() *HouseGuildedInformations {
	return &HouseGuildedInformations{MessageBase: MessageBase{MessageType_: "HouseGuildedInformations", id_: 4071}}
}
func (m *HouseGuildedInformations) Deserialize(input *DataWrapper) {
	m.HouseInstanceInformations.Deserialize(input)
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
}

func (m *HouseGuildedInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseInformationsI interface {
	Deserialize(input *DataWrapper)
}

type HouseInformations struct {
	MessageBase
	HouseId int
	ModelId int
}

func NewHouseInformations() *HouseInformations {
	return &HouseInformations{MessageBase: MessageBase{MessageType_: "HouseInformations", id_: 2374}}
}
func (m *HouseInformations) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.ModelId = input.ReadVarUhShort()
}

func (m *HouseInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseInformationsForGuild struct {
	MessageBase
	HouseInformations
	InstanceId       int32
	SecondHand       bool
	OwnerTag         *AccountTagInformation
	WorldX           int16
	WorldY           int16
	MapId            float64
	SubAreaId        int
	SkillListIds     *Vector[int32]
	GuildshareParams int
}

func NewHouseInformationsForGuild() *HouseInformationsForGuild {
	return &HouseInformationsForGuild{MessageBase: MessageBase{MessageType_: "HouseInformationsForGuild", id_: 409}}
}
func (m *HouseInformationsForGuild) Deserialize(input *DataWrapper) {
	m.HouseInformations.Deserialize(input)
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
	m.OwnerTag = NewAccountTagInformation()
	m.OwnerTag.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.SkillListIds = NewVector[int32]()
	skillListIdsLen := int(input.ReadShort())
	for i := 0; i < skillListIdsLen; i++ {
		val := input.ReadInt()
		m.SkillListIds.Push(&val)
	}
	m.GuildshareParams = input.ReadVarUhInt()
}

func (m *HouseInformationsForGuild) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseInformationsForSell struct {
	MessageBase
	InstanceId         int32
	SecondHand         bool
	ModelId            int
	OwnerTag           *AccountTagInformation
	HasOwner           bool
	OwnerCharacterName string
	WorldX             int16
	WorldY             int16
	SubAreaId          int
	NbRoom             int8
	NbChest            int8
	SkillListIds       *Vector[int32]
	IsLocked           bool
	Price              int64
}

func NewHouseInformationsForSell() *HouseInformationsForSell {
	return &HouseInformationsForSell{MessageBase: MessageBase{MessageType_: "HouseInformationsForSell", id_: 6977}}
}
func (m *HouseInformationsForSell) Deserialize(input *DataWrapper) {
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
	m.ModelId = input.ReadVarUhInt()
	m.OwnerTag = NewAccountTagInformation()
	m.OwnerTag.Deserialize(input)
	m.HasOwner = input.ReadBoolean()
	m.OwnerCharacterName = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.SubAreaId = input.ReadVarUhShort()
	m.NbRoom = input.ReadByte()
	m.NbChest = input.ReadByte()
	m.SkillListIds = NewVector[int32]()
	skillListIdsLen := int(input.ReadShort())
	for i := 0; i < skillListIdsLen; i++ {
		val := input.ReadInt()
		m.SkillListIds.Push(&val)
	}
	m.IsLocked = input.ReadBoolean()
	m.Price = input.ReadVarUhLong()
}

func (m *HouseInformationsForSell) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseInformationsInside struct {
	MessageBase
	HouseInformations
	HouseInfos HouseInstanceInformationsI
	WorldX     int16
	WorldY     int16
}

func NewHouseInformationsInside() *HouseInformationsInside {
	return &HouseInformationsInside{MessageBase: MessageBase{MessageType_: "HouseInformationsInside", id_: 2801}}
}
func (m *HouseInformationsInside) Deserialize(input *DataWrapper) {
	m.HouseInformations.Deserialize(input)
	m.HouseInfos = getDynamicType(input)
	m.HouseInfos.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
}

func (m *HouseInformationsInside) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseInstanceInformationsI interface {
	Deserialize(input *DataWrapper)
}

type HouseInstanceInformations struct {
	MessageBase
	InstanceId    int32
	SecondHand    bool
	IsLocked      bool
	OwnerTag      *AccountTagInformation
	HasOwner      bool
	Price         int64
	IsSaleLocked  bool
	IsAdminLocked bool
}

func NewHouseInstanceInformations() *HouseInstanceInformations {
	return &HouseInstanceInformations{MessageBase: MessageBase{MessageType_: "HouseInstanceInformations", id_: 3219}}
}
func (m *HouseInstanceInformations) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.SecondHand = (byteBox0>>0)&1 != 0
	m.IsLocked = (byteBox0>>1)&1 != 0
	m.HasOwner = (byteBox0>>2)&1 != 0
	m.IsSaleLocked = (byteBox0>>3)&1 != 0
	m.IsAdminLocked = (byteBox0>>4)&1 != 0
	m.InstanceId = input.ReadInt()
	m.OwnerTag = NewAccountTagInformation()
	m.OwnerTag.Deserialize(input)
	m.Price = input.ReadVarLong()
}

func (m *HouseInstanceInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseKickRequestMessage struct {
	MessageBase
	Id int64
}

func NewHouseKickRequestMessage() *HouseKickRequestMessage {
	return &HouseKickRequestMessage{MessageBase: MessageBase{MessageType_: "HouseKickRequestMessage", id_: 7559}}
}
func (m *HouseKickRequestMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhLong()
}

func (m *HouseKickRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseLockFromInsideRequestMessage struct {
	MessageBase
	LockableChangeCodeMessage
}

func NewHouseLockFromInsideRequestMessage() *HouseLockFromInsideRequestMessage {
	return &HouseLockFromInsideRequestMessage{MessageBase: MessageBase{MessageType_: "HouseLockFromInsideRequestMessage", id_: 9529}}
}
func (m *HouseLockFromInsideRequestMessage) Deserialize(input *DataWrapper) {
	m.LockableChangeCodeMessage.Deserialize(input)
}

func (m *HouseLockFromInsideRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseOnMapInformations struct {
	MessageBase
	HouseInformations
	DoorsOnMap     *Vector[int32]
	HouseInstances *Vector[HouseInstanceInformations]
}

func NewHouseOnMapInformations() *HouseOnMapInformations {
	return &HouseOnMapInformations{MessageBase: MessageBase{MessageType_: "HouseOnMapInformations", id_: 5255}}
}
func (m *HouseOnMapInformations) Deserialize(input *DataWrapper) {
	m.HouseInformations.Deserialize(input)
	m.DoorsOnMap = NewVector[int32]()
	doorsOnMapLen := int(input.ReadShort())
	for i := 0; i < doorsOnMapLen; i++ {
		val := input.ReadInt()
		m.DoorsOnMap.Push(&val)
	}
	m.HouseInstances = NewVector[HouseInstanceInformations]()
	houseInstancesLen := int(input.ReadShort())
	for i := 0; i < houseInstancesLen; i++ {
		HouseInstanceInformations := NewHouseInstanceInformations()
		HouseInstanceInformations.Deserialize(input)
		m.HouseInstances.Push(HouseInstanceInformations)
	}
}

func (m *HouseOnMapInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type HousePropertiesMessage struct {
	MessageBase
	HouseId    int
	DoorsOnMap *Vector[int32]
	Properties HouseInstanceInformationsI
}

func NewHousePropertiesMessage() *HousePropertiesMessage {
	return &HousePropertiesMessage{MessageBase: MessageBase{MessageType_: "HousePropertiesMessage", id_: 3385}}
}
func (m *HousePropertiesMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.DoorsOnMap = NewVector[int32]()
	doorsOnMapLen := int(input.ReadShort())
	for i := 0; i < doorsOnMapLen; i++ {
		val := input.ReadInt()
		m.DoorsOnMap.Push(&val)
	}
	m.Properties = getDynamicType(input)
	m.Properties.Deserialize(input)
}

func (m *HousePropertiesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseSellFromInsideRequestMessage struct {
	MessageBase
	HouseSellRequestMessage
}

func NewHouseSellFromInsideRequestMessage() *HouseSellFromInsideRequestMessage {
	return &HouseSellFromInsideRequestMessage{MessageBase: MessageBase{MessageType_: "HouseSellFromInsideRequestMessage", id_: 6061}}
}
func (m *HouseSellFromInsideRequestMessage) Deserialize(input *DataWrapper) {
	m.HouseSellRequestMessage.Deserialize(input)
}

func (m *HouseSellFromInsideRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseSellRequestMessage struct {
	MessageBase
	InstanceId int32
	Amount     int64
	ForSale    bool
}

func NewHouseSellRequestMessage() *HouseSellRequestMessage {
	return &HouseSellRequestMessage{MessageBase: MessageBase{MessageType_: "HouseSellRequestMessage", id_: 1606}}
}
func (m *HouseSellRequestMessage) Deserialize(input *DataWrapper) {
	m.InstanceId = input.ReadInt()
	m.Amount = input.ReadVarUhLong()
	m.ForSale = input.ReadBoolean()
}

func (m *HouseSellRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseSellingUpdateMessage struct {
	MessageBase
	HouseId    int
	InstanceId int32
	SecondHand bool
	RealPrice  int64
	BuyerTag   *AccountTagInformation
}

func NewHouseSellingUpdateMessage() *HouseSellingUpdateMessage {
	return &HouseSellingUpdateMessage{MessageBase: MessageBase{MessageType_: "HouseSellingUpdateMessage", id_: 6800}}
}
func (m *HouseSellingUpdateMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
	m.RealPrice = input.ReadVarUhLong()
	m.BuyerTag = NewAccountTagInformation()
	m.BuyerTag.Deserialize(input)
}

func (m *HouseSellingUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseTeleportRequestMessage struct {
	MessageBase
	HouseId         int
	HouseInstanceId int32
}

func NewHouseTeleportRequestMessage() *HouseTeleportRequestMessage {
	return &HouseTeleportRequestMessage{MessageBase: MessageBase{MessageType_: "HouseTeleportRequestMessage", id_: 3189}}
}
func (m *HouseTeleportRequestMessage) Deserialize(input *DataWrapper) {
	m.HouseId = input.ReadVarUhInt()
	m.HouseInstanceId = input.ReadInt()
}

func (m *HouseTeleportRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseToSellFilterMessage struct {
	MessageBase
	AreaId         int32
	AtLeastNbRoom  int8
	AtLeastNbChest int8
	SkillRequested int
	MaxPrice       int64
	OrderBy        int8
}

func NewHouseToSellFilterMessage() *HouseToSellFilterMessage {
	return &HouseToSellFilterMessage{MessageBase: MessageBase{MessageType_: "HouseToSellFilterMessage", id_: 9188}}
}
func (m *HouseToSellFilterMessage) Deserialize(input *DataWrapper) {
	m.AreaId = input.ReadInt()
	m.AtLeastNbRoom = input.ReadByte()
	m.AtLeastNbChest = input.ReadByte()
	m.SkillRequested = input.ReadVarUhShort()
	m.MaxPrice = input.ReadVarUhLong()
	m.OrderBy = input.ReadByte()
}

func (m *HouseToSellFilterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseToSellListMessage struct {
	MessageBase
	PageIndex int
	TotalPage int
	HouseList *Vector[HouseInformationsForSell]
}

func NewHouseToSellListMessage() *HouseToSellListMessage {
	return &HouseToSellListMessage{MessageBase: MessageBase{MessageType_: "HouseToSellListMessage", id_: 8317}}
}
func (m *HouseToSellListMessage) Deserialize(input *DataWrapper) {
	m.PageIndex = input.ReadVarUhShort()
	m.TotalPage = input.ReadVarUhShort()
	m.HouseList = NewVector[HouseInformationsForSell]()
	houseListLen := int(input.ReadShort())
	for i := 0; i < houseListLen; i++ {
		HouseInformationsForSell := NewHouseInformationsForSell()
		HouseInformationsForSell.Deserialize(input)
		m.HouseList.Push(HouseInformationsForSell)
	}
}

func (m *HouseToSellListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HouseToSellListRequestMessage struct {
	MessageBase
	PageIndex int
}

func NewHouseToSellListRequestMessage() *HouseToSellListRequestMessage {
	return &HouseToSellListRequestMessage{MessageBase: MessageBase{MessageType_: "HouseToSellListRequestMessage", id_: 6950}}
}
func (m *HouseToSellListRequestMessage) Deserialize(input *DataWrapper) {
	m.PageIndex = input.ReadVarUhShort()
}

func (m *HouseToSellListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanInformationsI interface {
	Deserialize(input *DataWrapper)
}

type HumanInformations struct {
	MessageBase
	Restrictions *ActorRestrictionsInformations
	Sex          bool
	Options      *Vector[HumanOptionI]
}

func NewHumanInformations() *HumanInformations {
	return &HumanInformations{MessageBase: MessageBase{MessageType_: "HumanInformations", id_: 495}}
}
func (m *HumanInformations) Deserialize(input *DataWrapper) {
	m.Restrictions = NewActorRestrictionsInformations()
	m.Restrictions.Deserialize(input)
	m.Sex = input.ReadBoolean()
	m.Options = NewVector[HumanOptionI]()
	optionsLen := int(input.ReadShort())
	for i := 0; i < optionsLen; i++ {
		foundHumanOption := getDynamicType(input)
		if castedHumanOption, ok := foundHumanOption.(HumanOptionI); ok {
			castedHumanOption.Deserialize(input)
			m.Options.Push(&castedHumanOption)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement HumanOptionI, got: " + fmt.Sprintf("%T", foundHumanOption))
		}
	}
}

func (m *HumanInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionI interface {
	Deserialize(input *DataWrapper)
}

type HumanOption struct {
	MessageBase
}

func NewHumanOption() *HumanOption {
	return &HumanOption{MessageBase: MessageBase{MessageType_: "HumanOption", id_: 7701}}
}
func (m *HumanOption) Deserialize(input *DataWrapper) {
}

func (m *HumanOption) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionAlliance struct {
	MessageBase
	HumanOption
	AllianceInformation *AllianceInformation
	Aggressable         int8
}

func NewHumanOptionAlliance() *HumanOptionAlliance {
	return &HumanOptionAlliance{MessageBase: MessageBase{MessageType_: "HumanOptionAlliance", id_: 7953}}
}
func (m *HumanOptionAlliance) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.AllianceInformation = NewAllianceInformation()
	m.AllianceInformation.Deserialize(input)
	m.Aggressable = input.ReadByte()
}

func (m *HumanOptionAlliance) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionEmote struct {
	MessageBase
	HumanOption
	EmoteId        uint16
	EmoteStartTime float64
}

func NewHumanOptionEmote() *HumanOptionEmote {
	return &HumanOptionEmote{MessageBase: MessageBase{MessageType_: "HumanOptionEmote", id_: 7646}}
}
func (m *HumanOptionEmote) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.EmoteId = input.ReadUnsignedShort()
	m.EmoteStartTime = input.ReadDouble()
}

func (m *HumanOptionEmote) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionFollowers struct {
	MessageBase
	HumanOption
	FollowingCharactersLook *Vector[IndexedEntityLook]
}

func NewHumanOptionFollowers() *HumanOptionFollowers {
	return &HumanOptionFollowers{MessageBase: MessageBase{MessageType_: "HumanOptionFollowers", id_: 8287}}
}
func (m *HumanOptionFollowers) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.FollowingCharactersLook = NewVector[IndexedEntityLook]()
	followingCharactersLookLen := int(input.ReadShort())
	for i := 0; i < followingCharactersLookLen; i++ {
		IndexedEntityLook := NewIndexedEntityLook()
		IndexedEntityLook.Deserialize(input)
		m.FollowingCharactersLook.Push(IndexedEntityLook)
	}
}

func (m *HumanOptionFollowers) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionGuild struct {
	MessageBase
	HumanOption
	GuildInformations *GuildInformations
}

func NewHumanOptionGuild() *HumanOptionGuild {
	return &HumanOptionGuild{MessageBase: MessageBase{MessageType_: "HumanOptionGuild", id_: 1132}}
}
func (m *HumanOptionGuild) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.GuildInformations = NewGuildInformations()
	m.GuildInformations.Deserialize(input)
}

func (m *HumanOptionGuild) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionObjectUse struct {
	MessageBase
	HumanOption
	DelayTypeId  int8
	DelayEndTime float64
	ObjectGID    int
}

func NewHumanOptionObjectUse() *HumanOptionObjectUse {
	return &HumanOptionObjectUse{MessageBase: MessageBase{MessageType_: "HumanOptionObjectUse", id_: 446}}
}
func (m *HumanOptionObjectUse) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.DelayTypeId = input.ReadByte()
	m.DelayEndTime = input.ReadDouble()
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *HumanOptionObjectUse) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionOrnament struct {
	MessageBase
	HumanOption
	OrnamentId     int
	Level          int
	LeagueId       int
	LadderPosition int32
}

func NewHumanOptionOrnament() *HumanOptionOrnament {
	return &HumanOptionOrnament{MessageBase: MessageBase{MessageType_: "HumanOptionOrnament", id_: 5782}}
}
func (m *HumanOptionOrnament) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.OrnamentId = input.ReadVarUhShort()
	m.Level = input.ReadVarUhShort()
	m.LeagueId = input.ReadVarShort()
	m.LadderPosition = input.ReadInt()
}

func (m *HumanOptionOrnament) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionSkillUse struct {
	MessageBase
	HumanOption
	ElementId    int
	SkillId      int
	SkillEndTime float64
}

func NewHumanOptionSkillUse() *HumanOptionSkillUse {
	return &HumanOptionSkillUse{MessageBase: MessageBase{MessageType_: "HumanOptionSkillUse", id_: 2036}}
}
func (m *HumanOptionSkillUse) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.ElementId = input.ReadVarUhInt()
	m.SkillId = input.ReadVarUhShort()
	m.SkillEndTime = input.ReadDouble()
}

func (m *HumanOptionSkillUse) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionSpeedMultiplier struct {
	MessageBase
	HumanOption
	SpeedMultiplier int
}

func NewHumanOptionSpeedMultiplier() *HumanOptionSpeedMultiplier {
	return &HumanOptionSpeedMultiplier{MessageBase: MessageBase{MessageType_: "HumanOptionSpeedMultiplier", id_: 4364}}
}
func (m *HumanOptionSpeedMultiplier) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.SpeedMultiplier = input.ReadVarUhInt()
}

func (m *HumanOptionSpeedMultiplier) IsDeserializeFunctionComplete() bool {
	return true
}

type HumanOptionTitle struct {
	MessageBase
	HumanOption
	TitleId    int
	TitleParam string
}

func NewHumanOptionTitle() *HumanOptionTitle {
	return &HumanOptionTitle{MessageBase: MessageBase{MessageType_: "HumanOptionTitle", id_: 2189}}
}
func (m *HumanOptionTitle) Deserialize(input *DataWrapper) {
	m.HumanOption.Deserialize(input)
	m.TitleId = input.ReadVarUhShort()
	m.TitleParam = input.ReadUTF()
}

func (m *HumanOptionTitle) IsDeserializeFunctionComplete() bool {
	return true
}

type IconNamedPreset struct {
	MessageBase
	PresetsContainerPreset
	IconId int16
	Name   string
}

func NewIconNamedPreset() *IconNamedPreset {
	return &IconNamedPreset{MessageBase: MessageBase{MessageType_: "IconNamedPreset", id_: 2553}}
}
func (m *IconNamedPreset) Deserialize(input *DataWrapper) {
	m.PresetsContainerPreset.Deserialize(input)
	m.IconId = input.ReadShort()
	m.Name = input.ReadUTF()
}

func (m *IconNamedPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type IconNamedPresetSaveRequestMessage struct {
	MessageBase
	IconPresetSaveRequestMessage
	Name string
	Type int8
}

func NewIconNamedPresetSaveRequestMessage() *IconNamedPresetSaveRequestMessage {
	return &IconNamedPresetSaveRequestMessage{MessageBase: MessageBase{MessageType_: "IconNamedPresetSaveRequestMessage", id_: 6922}}
}
func (m *IconNamedPresetSaveRequestMessage) Deserialize(input *DataWrapper) {
	m.IconPresetSaveRequestMessage.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Type = input.ReadByte()
}

func (m *IconNamedPresetSaveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IconPresetSaveRequestMessage struct {
	MessageBase
	PresetId   int16
	SymbolId   int8
	UpdateData bool
}

func NewIconPresetSaveRequestMessage() *IconPresetSaveRequestMessage {
	return &IconPresetSaveRequestMessage{MessageBase: MessageBase{MessageType_: "IconPresetSaveRequestMessage", id_: 6591}}
}
func (m *IconPresetSaveRequestMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.SymbolId = input.ReadByte()
	m.UpdateData = input.ReadBoolean()
}

func (m *IconPresetSaveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationFailedBannedMessage struct {
	MessageBase
	IdentificationFailedMessage
	BanEndDate float64
}

func NewIdentificationFailedBannedMessage() *IdentificationFailedBannedMessage {
	return &IdentificationFailedBannedMessage{MessageBase: MessageBase{MessageType_: "IdentificationFailedBannedMessage", id_: 8668}}
}
func (m *IdentificationFailedBannedMessage) Deserialize(input *DataWrapper) {
	m.IdentificationFailedMessage.Deserialize(input)
	m.BanEndDate = input.ReadDouble()
}

func (m *IdentificationFailedBannedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationFailedForBadVersionMessage struct {
	MessageBase
	IdentificationFailedMessage
	RequiredVersion *Version
}

func NewIdentificationFailedForBadVersionMessage() *IdentificationFailedForBadVersionMessage {
	return &IdentificationFailedForBadVersionMessage{MessageBase: MessageBase{MessageType_: "IdentificationFailedForBadVersionMessage", id_: 4124}}
}
func (m *IdentificationFailedForBadVersionMessage) Deserialize(input *DataWrapper) {
	m.IdentificationFailedMessage.Deserialize(input)
	m.RequiredVersion = NewVersion()
	m.RequiredVersion.Deserialize(input)
}

func (m *IdentificationFailedForBadVersionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationFailedMessage struct {
	MessageBase
	Reason int8
}

func NewIdentificationFailedMessage() *IdentificationFailedMessage {
	return &IdentificationFailedMessage{MessageBase: MessageBase{MessageType_: "IdentificationFailedMessage", id_: 4567}}
}
func (m *IdentificationFailedMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *IdentificationFailedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationMessage struct {
	MessageBase
	Version             *Version
	Lang                string
	Credentials         *Vector[int8]
	ServerId            int16
	Autoconnect         bool
	UseCertificate      bool
	UseLoginToken       bool
	SessionOptionalSalt int64
	FailedAttempts      *Vector[int]
}

func NewIdentificationMessage() *IdentificationMessage {
	return &IdentificationMessage{MessageBase: MessageBase{MessageType_: "IdentificationMessage", id_: 9262}}
}
func (m *IdentificationMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Autoconnect = (byteBox0>>0)&1 != 0
	m.UseCertificate = (byteBox0>>1)&1 != 0
	m.UseLoginToken = (byteBox0>>2)&1 != 0
	m.Version = NewVersion()
	m.Version.Deserialize(input)
	m.Lang = input.ReadUTF()
	m.Credentials = NewVector[int8]()
	credentialsLen := int(input.ReadVarInt())
	for i := 0; i < credentialsLen; i++ {
		val := input.ReadByte()
		m.Credentials.Push(&val)
	}
	m.ServerId = input.ReadShort()
	m.SessionOptionalSalt = input.ReadVarLong()
	m.FailedAttempts = NewVector[int]()
	failedAttemptsLen := int(input.ReadShort())
	for i := 0; i < failedAttemptsLen; i++ {
		val := input.ReadVarShort()
		m.FailedAttempts.Push(&val)
	}
}

func (m *IdentificationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationSuccessMessage struct {
	MessageBase
	Login                 string
	AccountTag            *AccountTagInformation
	AccountId             int32
	CommunityId           int8
	HasRights             bool
	HasReportRight        bool
	HasForceRight         bool
	AccountCreation       float64
	SubscriptionEndDate   float64
	WasAlreadyConnected   bool
	HavenbagAvailableRoom uint8
}

func NewIdentificationSuccessMessage() *IdentificationSuccessMessage {
	return &IdentificationSuccessMessage{MessageBase: MessageBase{MessageType_: "IdentificationSuccessMessage", id_: 6104}}
}
func (m *IdentificationSuccessMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.HasRights = (byteBox0>>0)&1 != 0
	m.HasReportRight = (byteBox0>>1)&1 != 0
	m.HasForceRight = (byteBox0>>2)&1 != 0
	m.WasAlreadyConnected = (byteBox0>>3)&1 != 0
	m.Login = input.ReadUTF()
	m.AccountTag = NewAccountTagInformation()
	m.AccountTag.Deserialize(input)
	m.AccountId = input.ReadInt()
	m.CommunityId = input.ReadByte()
	m.AccountCreation = input.ReadDouble()
	m.SubscriptionEndDate = input.ReadDouble()
	m.HavenbagAvailableRoom = input.ReadUnsignedByte()
}

func (m *IdentificationSuccessMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentificationSuccessWithLoginTokenMessage struct {
	MessageBase
	IdentificationSuccessMessage
	LoginToken string
}

func NewIdentificationSuccessWithLoginTokenMessage() *IdentificationSuccessWithLoginTokenMessage {
	return &IdentificationSuccessWithLoginTokenMessage{MessageBase: MessageBase{MessageType_: "IdentificationSuccessWithLoginTokenMessage", id_: 3224}}
}
func (m *IdentificationSuccessWithLoginTokenMessage) Deserialize(input *DataWrapper) {
	m.IdentificationSuccessMessage.Deserialize(input)
	m.LoginToken = input.ReadUTF()
}

func (m *IdentificationSuccessWithLoginTokenMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IdentifiedEntityDispositionInformations struct {
	MessageBase
	EntityDispositionInformations
	Id float64
}

func NewIdentifiedEntityDispositionInformations() *IdentifiedEntityDispositionInformations {
	return &IdentifiedEntityDispositionInformations{MessageBase: MessageBase{MessageType_: "IdentifiedEntityDispositionInformations", id_: 619}}
}
func (m *IdentifiedEntityDispositionInformations) Deserialize(input *DataWrapper) {
	m.EntityDispositionInformations.Deserialize(input)
	m.Id = input.ReadDouble()
}

func (m *IdentifiedEntityDispositionInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredAddFailureMessage struct {
	MessageBase
	Reason int8
}

func NewIgnoredAddFailureMessage() *IgnoredAddFailureMessage {
	return &IgnoredAddFailureMessage{MessageBase: MessageBase{MessageType_: "IgnoredAddFailureMessage", id_: 7186}}
}
func (m *IgnoredAddFailureMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *IgnoredAddFailureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredAddRequestMessage struct {
	MessageBase
	Target  AbstractPlayerSearchInformationI
	Session bool
}

func NewIgnoredAddRequestMessage() *IgnoredAddRequestMessage {
	return &IgnoredAddRequestMessage{MessageBase: MessageBase{MessageType_: "IgnoredAddRequestMessage", id_: 5112}}
}
func (m *IgnoredAddRequestMessage) Deserialize(input *DataWrapper) {
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
	m.Session = input.ReadBoolean()
}

func (m *IgnoredAddRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredAddedMessage struct {
	MessageBase
	IgnoreAdded IgnoredInformationsI
	Session     bool
}

func NewIgnoredAddedMessage() *IgnoredAddedMessage {
	return &IgnoredAddedMessage{MessageBase: MessageBase{MessageType_: "IgnoredAddedMessage", id_: 3797}}
}
func (m *IgnoredAddedMessage) Deserialize(input *DataWrapper) {
	m.IgnoreAdded = getDynamicType(input)
	m.IgnoreAdded.Deserialize(input)
	m.Session = input.ReadBoolean()
}

func (m *IgnoredAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredDeleteRequestMessage struct {
	MessageBase
	AccountId int32
	Session   bool
}

func NewIgnoredDeleteRequestMessage() *IgnoredDeleteRequestMessage {
	return &IgnoredDeleteRequestMessage{MessageBase: MessageBase{MessageType_: "IgnoredDeleteRequestMessage", id_: 7645}}
}
func (m *IgnoredDeleteRequestMessage) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
	m.Session = input.ReadBoolean()
}

func (m *IgnoredDeleteRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredDeleteResultMessage struct {
	MessageBase
	Success bool
	Tag     *AccountTagInformation
	Session bool
}

func NewIgnoredDeleteResultMessage() *IgnoredDeleteResultMessage {
	return &IgnoredDeleteResultMessage{MessageBase: MessageBase{MessageType_: "IgnoredDeleteResultMessage", id_: 2365}}
}
func (m *IgnoredDeleteResultMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Success = (byteBox0>>0)&1 != 0
	m.Session = (byteBox0>>1)&1 != 0
	m.Tag = NewAccountTagInformation()
	m.Tag.Deserialize(input)
}

func (m *IgnoredDeleteResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredGetListMessage struct {
	MessageBase
}

func NewIgnoredGetListMessage() *IgnoredGetListMessage {
	return &IgnoredGetListMessage{MessageBase: MessageBase{MessageType_: "IgnoredGetListMessage", id_: 8068}}
}
func (m *IgnoredGetListMessage) Deserialize(input *DataWrapper) {
}

func (m *IgnoredGetListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredInformationsI interface {
	Deserialize(input *DataWrapper)
}

type IgnoredInformations struct {
	MessageBase
	AbstractContactInformations
}

func NewIgnoredInformations() *IgnoredInformations {
	return &IgnoredInformations{MessageBase: MessageBase{MessageType_: "IgnoredInformations", id_: 2099}}
}
func (m *IgnoredInformations) Deserialize(input *DataWrapper) {
	m.AbstractContactInformations.Deserialize(input)
}

func (m *IgnoredInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredListMessage struct {
	MessageBase
	IgnoredList *Vector[IgnoredInformationsI]
}

func NewIgnoredListMessage() *IgnoredListMessage {
	return &IgnoredListMessage{MessageBase: MessageBase{MessageType_: "IgnoredListMessage", id_: 8123}}
}
func (m *IgnoredListMessage) Deserialize(input *DataWrapper) {
	m.IgnoredList = NewVector[IgnoredInformationsI]()
	ignoredListLen := int(input.ReadShort())
	for i := 0; i < ignoredListLen; i++ {
		foundIgnoredInformations := getDynamicType(input)
		if castedIgnoredInformations, ok := foundIgnoredInformations.(IgnoredInformationsI); ok {
			castedIgnoredInformations.Deserialize(input)
			m.IgnoredList.Push(&castedIgnoredInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement IgnoredInformationsI, got: " + fmt.Sprintf("%T", foundIgnoredInformations))
		}
	}
}

func (m *IgnoredListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type IgnoredOnlineInformations struct {
	MessageBase
	IgnoredInformations
	PlayerId   int64
	PlayerName string
	Breed      int8
	Sex        bool
}

func NewIgnoredOnlineInformations() *IgnoredOnlineInformations {
	return &IgnoredOnlineInformations{MessageBase: MessageBase{MessageType_: "IgnoredOnlineInformations", id_: 941}}
}
func (m *IgnoredOnlineInformations) Deserialize(input *DataWrapper) {
	m.IgnoredInformations.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
}

func (m *IgnoredOnlineInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type IndexedEntityLook struct {
	MessageBase
	Look  *EntityLook
	Index int8
}

func NewIndexedEntityLook() *IndexedEntityLook {
	return &IndexedEntityLook{MessageBase: MessageBase{MessageType_: "IndexedEntityLook", id_: 5735}}
}
func (m *IndexedEntityLook) Deserialize(input *DataWrapper) {
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
	m.Index = input.ReadByte()
}

func (m *IndexedEntityLook) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveElementI interface {
	Deserialize(input *DataWrapper)
}

type InteractiveElement struct {
	MessageBase
	ElementId      int32
	ElementTypeId  int32
	EnabledSkills  *Vector[InteractiveElementSkillI]
	DisabledSkills *Vector[InteractiveElementSkillI]
	OnCurrentMap   bool
}

func NewInteractiveElement() *InteractiveElement {
	return &InteractiveElement{MessageBase: MessageBase{MessageType_: "InteractiveElement", id_: 6065}}
}
func (m *InteractiveElement) Deserialize(input *DataWrapper) {
	m.ElementId = input.ReadInt()
	m.ElementTypeId = input.ReadInt()
	m.EnabledSkills = NewVector[InteractiveElementSkillI]()
	enabledSkillsLen := int(input.ReadShort())
	for i := 0; i < enabledSkillsLen; i++ {
		foundInteractiveElementSkill := getDynamicType(input)
		if castedInteractiveElementSkill, ok := foundInteractiveElementSkill.(InteractiveElementSkillI); ok {
			castedInteractiveElementSkill.Deserialize(input)
			m.EnabledSkills.Push(&castedInteractiveElementSkill)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement InteractiveElementSkillI, got: " + fmt.Sprintf("%T", foundInteractiveElementSkill))
		}
	}
	m.DisabledSkills = NewVector[InteractiveElementSkillI]()
	disabledSkillsLen := int(input.ReadShort())
	for i := 0; i < disabledSkillsLen; i++ {
		foundInteractiveElementSkill := getDynamicType(input)
		if castedInteractiveElementSkill, ok := foundInteractiveElementSkill.(InteractiveElementSkillI); ok {
			castedInteractiveElementSkill.Deserialize(input)
			m.DisabledSkills.Push(&castedInteractiveElementSkill)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement InteractiveElementSkillI, got: " + fmt.Sprintf("%T", foundInteractiveElementSkill))
		}
	}
	m.OnCurrentMap = input.ReadBoolean()
}

func (m *InteractiveElement) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveElementNamedSkill struct {
	MessageBase
	InteractiveElementSkill
	NameId int
}

func NewInteractiveElementNamedSkill() *InteractiveElementNamedSkill {
	return &InteractiveElementNamedSkill{MessageBase: MessageBase{MessageType_: "InteractiveElementNamedSkill", id_: 7880}}
}
func (m *InteractiveElementNamedSkill) Deserialize(input *DataWrapper) {
	m.InteractiveElementSkill.Deserialize(input)
	m.NameId = input.ReadVarUhInt()
}

func (m *InteractiveElementNamedSkill) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveElementSkillI interface {
	Deserialize(input *DataWrapper)
}

type InteractiveElementSkill struct {
	MessageBase
	SkillId          int
	SkillInstanceUid int32
}

func NewInteractiveElementSkill() *InteractiveElementSkill {
	return &InteractiveElementSkill{MessageBase: MessageBase{MessageType_: "InteractiveElementSkill", id_: 2087}}
}
func (m *InteractiveElementSkill) Deserialize(input *DataWrapper) {
	m.SkillId = input.ReadVarUhInt()
	m.SkillInstanceUid = input.ReadInt()
}

func (m *InteractiveElementSkill) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveElementUpdatedMessage struct {
	MessageBase
	InteractiveElement InteractiveElementI
}

func NewInteractiveElementUpdatedMessage() *InteractiveElementUpdatedMessage {
	return &InteractiveElementUpdatedMessage{MessageBase: MessageBase{MessageType_: "InteractiveElementUpdatedMessage", id_: 8912}}
}
func (m *InteractiveElementUpdatedMessage) Deserialize(input *DataWrapper) {
	m.InteractiveElement = NewInteractiveElement()
	m.InteractiveElement.Deserialize(input)
}

func (m *InteractiveElementUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveElementWithAgeBonus struct {
	MessageBase
	InteractiveElement
	AgeBonus int16
}

func NewInteractiveElementWithAgeBonus() *InteractiveElementWithAgeBonus {
	return &InteractiveElementWithAgeBonus{MessageBase: MessageBase{MessageType_: "InteractiveElementWithAgeBonus", id_: 2952}}
}
func (m *InteractiveElementWithAgeBonus) Deserialize(input *DataWrapper) {
	m.InteractiveElement.Deserialize(input)
	m.AgeBonus = input.ReadShort()
}

func (m *InteractiveElementWithAgeBonus) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveMapUpdateMessage struct {
	MessageBase
	InteractiveElements *Vector[InteractiveElementI]
}

func NewInteractiveMapUpdateMessage() *InteractiveMapUpdateMessage {
	return &InteractiveMapUpdateMessage{MessageBase: MessageBase{MessageType_: "InteractiveMapUpdateMessage", id_: 9493}}
}
func (m *InteractiveMapUpdateMessage) Deserialize(input *DataWrapper) {
	m.InteractiveElements = NewVector[InteractiveElementI]()
	interactiveElementsLen := int(input.ReadShort())
	for i := 0; i < interactiveElementsLen; i++ {
		foundInteractiveElement := getDynamicType(input)
		if castedInteractiveElement, ok := foundInteractiveElement.(InteractiveElementI); ok {
			castedInteractiveElement.Deserialize(input)
			m.InteractiveElements.Push(&castedInteractiveElement)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement InteractiveElementI, got: " + fmt.Sprintf("%T", foundInteractiveElement))
		}
	}
}

func (m *InteractiveMapUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveUseEndedMessage struct {
	MessageBase
	ElemId  int
	SkillId int
}

func NewInteractiveUseEndedMessage() *InteractiveUseEndedMessage {
	return &InteractiveUseEndedMessage{MessageBase: MessageBase{MessageType_: "InteractiveUseEndedMessage", id_: 2897}}
}
func (m *InteractiveUseEndedMessage) Deserialize(input *DataWrapper) {
	m.ElemId = input.ReadVarUhInt()
	m.SkillId = input.ReadVarUhShort()
}

func (m *InteractiveUseEndedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveUseErrorMessage struct {
	MessageBase
	ElemId           int
	SkillInstanceUid int
}

func NewInteractiveUseErrorMessage() *InteractiveUseErrorMessage {
	return &InteractiveUseErrorMessage{MessageBase: MessageBase{MessageType_: "InteractiveUseErrorMessage", id_: 2991}}
}
func (m *InteractiveUseErrorMessage) Deserialize(input *DataWrapper) {
	m.ElemId = input.ReadVarUhInt()
	m.SkillInstanceUid = input.ReadVarUhInt()
}

func (m *InteractiveUseErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveUseRequestMessage struct {
	MessageBase
	ElemId           int
	SkillInstanceUid int
}

func NewInteractiveUseRequestMessage() *InteractiveUseRequestMessage {
	return &InteractiveUseRequestMessage{MessageBase: MessageBase{MessageType_: "InteractiveUseRequestMessage", id_: 1424}}
}
func (m *InteractiveUseRequestMessage) Deserialize(input *DataWrapper) {
	m.ElemId = input.ReadVarUhInt()
	m.SkillInstanceUid = input.ReadVarUhInt()
}

func (m *InteractiveUseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveUseWithParamRequestMessage struct {
	MessageBase
	InteractiveUseRequestMessage
	Id int32
}

func NewInteractiveUseWithParamRequestMessage() *InteractiveUseWithParamRequestMessage {
	return &InteractiveUseWithParamRequestMessage{MessageBase: MessageBase{MessageType_: "InteractiveUseWithParamRequestMessage", id_: 8117}}
}
func (m *InteractiveUseWithParamRequestMessage) Deserialize(input *DataWrapper) {
	m.InteractiveUseRequestMessage.Deserialize(input)
	m.Id = input.ReadInt()
}

func (m *InteractiveUseWithParamRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InteractiveUsedMessage struct {
	MessageBase
	EntityId int64
	ElemId   int
	SkillId  int
	Duration int
	CanMove  bool
}

func NewInteractiveUsedMessage() *InteractiveUsedMessage {
	return &InteractiveUsedMessage{MessageBase: MessageBase{MessageType_: "InteractiveUsedMessage", id_: 3900}}
}
func (m *InteractiveUsedMessage) Deserialize(input *DataWrapper) {
	m.EntityId = input.ReadVarUhLong()
	m.ElemId = input.ReadVarUhInt()
	m.SkillId = input.ReadVarUhShort()
	m.Duration = input.ReadVarUhShort()
	m.CanMove = input.ReadBoolean()
}

func (m *InteractiveUsedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InvalidPresetsMessage struct {
	MessageBase
	PresetIds *Vector[int16]
}

func NewInvalidPresetsMessage() *InvalidPresetsMessage {
	return &InvalidPresetsMessage{MessageBase: MessageBase{MessageType_: "InvalidPresetsMessage", id_: 1001}}
}
func (m *InvalidPresetsMessage) Deserialize(input *DataWrapper) {
	m.PresetIds = NewVector[int16]()
	presetIdsLen := int(input.ReadShort())
	for i := 0; i < presetIdsLen; i++ {
		val := input.ReadShort()
		m.PresetIds.Push(&val)
	}
}

func (m *InvalidPresetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InventoryContentMessage struct {
	MessageBase
	Objects *Vector[ObjectItem]
	Kamas   int64
}

func NewInventoryContentMessage() *InventoryContentMessage {
	return &InventoryContentMessage{MessageBase: MessageBase{MessageType_: "InventoryContentMessage", id_: 8042}}
}
func (m *InventoryContentMessage) Deserialize(input *DataWrapper) {
	m.Objects = NewVector[ObjectItem]()
	objectsLen := int(input.ReadShort())
	for i := 0; i < objectsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Objects.Push(ObjectItem)
	}
	m.Kamas = input.ReadVarUhLong()
}

func (m *InventoryContentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InventoryWeightMessage struct {
	MessageBase
	InventoryWeight int
	WeightMax       int
}

func NewInventoryWeightMessage() *InventoryWeightMessage {
	return &InventoryWeightMessage{MessageBase: MessageBase{MessageType_: "InventoryWeightMessage", id_: 9677}}
}
func (m *InventoryWeightMessage) Deserialize(input *DataWrapper) {
	m.InventoryWeight = input.ReadVarUhInt()
	m.WeightMax = input.ReadVarUhInt()
}

func (m *InventoryWeightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InviteInHavenBagClosedMessage struct {
	MessageBase
	HostInformations *CharacterMinimalInformations
}

func NewInviteInHavenBagClosedMessage() *InviteInHavenBagClosedMessage {
	return &InviteInHavenBagClosedMessage{MessageBase: MessageBase{MessageType_: "InviteInHavenBagClosedMessage", id_: 8001}}
}
func (m *InviteInHavenBagClosedMessage) Deserialize(input *DataWrapper) {
	m.HostInformations = NewCharacterMinimalInformations()
	m.HostInformations.Deserialize(input)
}

func (m *InviteInHavenBagClosedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InviteInHavenBagMessage struct {
	MessageBase
	GuestInformations *CharacterMinimalInformations
	Accept            bool
}

func NewInviteInHavenBagMessage() *InviteInHavenBagMessage {
	return &InviteInHavenBagMessage{MessageBase: MessageBase{MessageType_: "InviteInHavenBagMessage", id_: 949}}
}
func (m *InviteInHavenBagMessage) Deserialize(input *DataWrapper) {
	m.GuestInformations = NewCharacterMinimalInformations()
	m.GuestInformations.Deserialize(input)
	m.Accept = input.ReadBoolean()
}

func (m *InviteInHavenBagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type InviteInHavenBagOfferMessage struct {
	MessageBase
	HostInformations     *CharacterMinimalInformations
	TimeLeftBeforeCancel int
}

func NewInviteInHavenBagOfferMessage() *InviteInHavenBagOfferMessage {
	return &InviteInHavenBagOfferMessage{MessageBase: MessageBase{MessageType_: "InviteInHavenBagOfferMessage", id_: 5037}}
}
func (m *InviteInHavenBagOfferMessage) Deserialize(input *DataWrapper) {
	m.HostInformations = NewCharacterMinimalInformations()
	m.HostInformations.Deserialize(input)
	m.TimeLeftBeforeCancel = input.ReadVarInt()
}

func (m *InviteInHavenBagOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type Item struct {
	MessageBase
}

func NewItem() *Item {
	return &Item{MessageBase: MessageBase{MessageType_: "Item", id_: 8235}}
}
func (m *Item) Deserialize(input *DataWrapper) {
}

func (m *Item) IsDeserializeFunctionComplete() bool {
	return true
}

type ItemDurability struct {
	MessageBase
	Durability    int16
	DurabilityMax int16
}

func NewItemDurability() *ItemDurability {
	return &ItemDurability{MessageBase: MessageBase{MessageType_: "ItemDurability", id_: 5929}}
}
func (m *ItemDurability) Deserialize(input *DataWrapper) {
	m.Durability = input.ReadShort()
	m.DurabilityMax = input.ReadShort()
}

func (m *ItemDurability) IsDeserializeFunctionComplete() bool {
	return true
}

type ItemForPreset struct {
	MessageBase
	Position int16
	ObjGid   int
	ObjUid   int
}

func NewItemForPreset() *ItemForPreset {
	return &ItemForPreset{MessageBase: MessageBase{MessageType_: "ItemForPreset", id_: 5291}}
}
func (m *ItemForPreset) Deserialize(input *DataWrapper) {
	m.Position = input.ReadShort()
	m.ObjGid = input.ReadVarUhInt()
	m.ObjUid = input.ReadVarUhInt()
}

func (m *ItemForPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type ItemForPresetUpdateMessage struct {
	MessageBase
	PresetId   int16
	PresetItem *ItemForPreset
}

func NewItemForPresetUpdateMessage() *ItemForPresetUpdateMessage {
	return &ItemForPresetUpdateMessage{MessageBase: MessageBase{MessageType_: "ItemForPresetUpdateMessage", id_: 6815}}
}
func (m *ItemForPresetUpdateMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.PresetItem = NewItemForPreset()
	m.PresetItem.Deserialize(input)
}

func (m *ItemForPresetUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ItemNoMoreAvailableMessage struct {
	MessageBase
}

func NewItemNoMoreAvailableMessage() *ItemNoMoreAvailableMessage {
	return &ItemNoMoreAvailableMessage{MessageBase: MessageBase{MessageType_: "ItemNoMoreAvailableMessage", id_: 2498}}
}
func (m *ItemNoMoreAvailableMessage) Deserialize(input *DataWrapper) {
}

func (m *ItemNoMoreAvailableMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ItemsPreset struct {
	MessageBase
	Preset
	Items         *Vector[ItemForPreset]
	MountEquipped bool
	Look          *EntityLook
}

func NewItemsPreset() *ItemsPreset {
	return &ItemsPreset{MessageBase: MessageBase{MessageType_: "ItemsPreset", id_: 4783}}
}
func (m *ItemsPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.Items = NewVector[ItemForPreset]()
	itemsLen := int(input.ReadShort())
	for i := 0; i < itemsLen; i++ {
		ItemForPreset := NewItemForPreset()
		ItemForPreset.Deserialize(input)
		m.Items.Push(ItemForPreset)
	}
	m.MountEquipped = input.ReadBoolean()
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *ItemsPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type JobAllowMultiCraftRequestMessage struct {
	MessageBase
	Enabled bool
}

func NewJobAllowMultiCraftRequestMessage() *JobAllowMultiCraftRequestMessage {
	return &JobAllowMultiCraftRequestMessage{MessageBase: MessageBase{MessageType_: "JobAllowMultiCraftRequestMessage", id_: 1737}}
}
func (m *JobAllowMultiCraftRequestMessage) Deserialize(input *DataWrapper) {
	m.Enabled = input.ReadBoolean()
}

func (m *JobAllowMultiCraftRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobBookSubscribeRequestMessage struct {
	MessageBase
	JobIds *Vector[int8]
}

func NewJobBookSubscribeRequestMessage() *JobBookSubscribeRequestMessage {
	return &JobBookSubscribeRequestMessage{MessageBase: MessageBase{MessageType_: "JobBookSubscribeRequestMessage", id_: 7221}}
}
func (m *JobBookSubscribeRequestMessage) Deserialize(input *DataWrapper) {
	m.JobIds = NewVector[int8]()
	jobIdsLen := int(input.ReadShort())
	for i := 0; i < jobIdsLen; i++ {
		val := input.ReadByte()
		m.JobIds.Push(&val)
	}
}

func (m *JobBookSubscribeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobBookSubscription struct {
	MessageBase
	JobId      int8
	Subscribed bool
}

func NewJobBookSubscription() *JobBookSubscription {
	return &JobBookSubscription{MessageBase: MessageBase{MessageType_: "JobBookSubscription", id_: 5496}}
}
func (m *JobBookSubscription) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.Subscribed = input.ReadBoolean()
}

func (m *JobBookSubscription) IsDeserializeFunctionComplete() bool {
	return true
}

type JobBookSubscriptionMessage struct {
	MessageBase
	Subscriptions *Vector[JobBookSubscription]
}

func NewJobBookSubscriptionMessage() *JobBookSubscriptionMessage {
	return &JobBookSubscriptionMessage{MessageBase: MessageBase{MessageType_: "JobBookSubscriptionMessage", id_: 6723}}
}
func (m *JobBookSubscriptionMessage) Deserialize(input *DataWrapper) {
	m.Subscriptions = NewVector[JobBookSubscription]()
	subscriptionsLen := int(input.ReadShort())
	for i := 0; i < subscriptionsLen; i++ {
		JobBookSubscription := NewJobBookSubscription()
		JobBookSubscription.Deserialize(input)
		m.Subscriptions.Push(JobBookSubscription)
	}
}

func (m *JobBookSubscriptionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryAddMessage struct {
	MessageBase
	ListEntry *JobCrafterDirectoryListEntry
}

func NewJobCrafterDirectoryAddMessage() *JobCrafterDirectoryAddMessage {
	return &JobCrafterDirectoryAddMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryAddMessage", id_: 9328}}
}
func (m *JobCrafterDirectoryAddMessage) Deserialize(input *DataWrapper) {
	m.ListEntry = NewJobCrafterDirectoryListEntry()
	m.ListEntry.Deserialize(input)
}

func (m *JobCrafterDirectoryAddMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryDefineSettingsMessage struct {
	MessageBase
	Settings *JobCrafterDirectorySettings
}

func NewJobCrafterDirectoryDefineSettingsMessage() *JobCrafterDirectoryDefineSettingsMessage {
	return &JobCrafterDirectoryDefineSettingsMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryDefineSettingsMessage", id_: 5859}}
}
func (m *JobCrafterDirectoryDefineSettingsMessage) Deserialize(input *DataWrapper) {
	m.Settings = NewJobCrafterDirectorySettings()
	m.Settings.Deserialize(input)
}

func (m *JobCrafterDirectoryDefineSettingsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryEntryJobInfo struct {
	MessageBase
	JobId    int8
	JobLevel uint8
	Free     bool
	MinLevel uint8
}

func NewJobCrafterDirectoryEntryJobInfo() *JobCrafterDirectoryEntryJobInfo {
	return &JobCrafterDirectoryEntryJobInfo{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryEntryJobInfo", id_: 5157}}
}
func (m *JobCrafterDirectoryEntryJobInfo) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.JobLevel = input.ReadUnsignedByte()
	m.Free = input.ReadBoolean()
	m.MinLevel = input.ReadUnsignedByte()
}

func (m *JobCrafterDirectoryEntryJobInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryEntryMessage struct {
	MessageBase
	PlayerInfo  *JobCrafterDirectoryEntryPlayerInfo
	JobInfoList *Vector[JobCrafterDirectoryEntryJobInfo]
	PlayerLook  *EntityLook
}

func NewJobCrafterDirectoryEntryMessage() *JobCrafterDirectoryEntryMessage {
	return &JobCrafterDirectoryEntryMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryEntryMessage", id_: 2116}}
}
func (m *JobCrafterDirectoryEntryMessage) Deserialize(input *DataWrapper) {
	m.PlayerInfo = NewJobCrafterDirectoryEntryPlayerInfo()
	m.PlayerInfo.Deserialize(input)
	m.JobInfoList = NewVector[JobCrafterDirectoryEntryJobInfo]()
	jobInfoListLen := int(input.ReadShort())
	for i := 0; i < jobInfoListLen; i++ {
		JobCrafterDirectoryEntryJobInfo := NewJobCrafterDirectoryEntryJobInfo()
		JobCrafterDirectoryEntryJobInfo.Deserialize(input)
		m.JobInfoList.Push(JobCrafterDirectoryEntryJobInfo)
	}
	m.PlayerLook = NewEntityLook()
	m.PlayerLook.Deserialize(input)
}

func (m *JobCrafterDirectoryEntryMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryEntryPlayerInfo struct {
	MessageBase
	PlayerId          int64
	PlayerName        string
	AlignmentSide     int8
	Breed             int8
	Sex               bool
	IsInWorkshop      bool
	WorldX            int16
	WorldY            int16
	MapId             float64
	SubAreaId         int
	CanCraftLegendary bool
	Status            PlayerStatusI
}

func NewJobCrafterDirectoryEntryPlayerInfo() *JobCrafterDirectoryEntryPlayerInfo {
	return &JobCrafterDirectoryEntryPlayerInfo{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryEntryPlayerInfo", id_: 9204}}
}
func (m *JobCrafterDirectoryEntryPlayerInfo) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.AlignmentSide = input.ReadByte()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.IsInWorkshop = input.ReadBoolean()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.CanCraftLegendary = input.ReadBoolean()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
}

func (m *JobCrafterDirectoryEntryPlayerInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryEntryRequestMessage struct {
	MessageBase
	PlayerId int64
}

func NewJobCrafterDirectoryEntryRequestMessage() *JobCrafterDirectoryEntryRequestMessage {
	return &JobCrafterDirectoryEntryRequestMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryEntryRequestMessage", id_: 1749}}
}
func (m *JobCrafterDirectoryEntryRequestMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
}

func (m *JobCrafterDirectoryEntryRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryListEntry struct {
	MessageBase
	PlayerInfo *JobCrafterDirectoryEntryPlayerInfo
	JobInfo    *JobCrafterDirectoryEntryJobInfo
}

func NewJobCrafterDirectoryListEntry() *JobCrafterDirectoryListEntry {
	return &JobCrafterDirectoryListEntry{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryListEntry", id_: 7693}}
}
func (m *JobCrafterDirectoryListEntry) Deserialize(input *DataWrapper) {
	m.PlayerInfo = NewJobCrafterDirectoryEntryPlayerInfo()
	m.PlayerInfo.Deserialize(input)
	m.JobInfo = NewJobCrafterDirectoryEntryJobInfo()
	m.JobInfo.Deserialize(input)
}

func (m *JobCrafterDirectoryListEntry) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryListMessage struct {
	MessageBase
	ListEntries *Vector[JobCrafterDirectoryListEntry]
}

func NewJobCrafterDirectoryListMessage() *JobCrafterDirectoryListMessage {
	return &JobCrafterDirectoryListMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryListMessage", id_: 8710}}
}
func (m *JobCrafterDirectoryListMessage) Deserialize(input *DataWrapper) {
	m.ListEntries = NewVector[JobCrafterDirectoryListEntry]()
	listEntriesLen := int(input.ReadShort())
	for i := 0; i < listEntriesLen; i++ {
		JobCrafterDirectoryListEntry := NewJobCrafterDirectoryListEntry()
		JobCrafterDirectoryListEntry.Deserialize(input)
		m.ListEntries.Push(JobCrafterDirectoryListEntry)
	}
}

func (m *JobCrafterDirectoryListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryListRequestMessage struct {
	MessageBase
	JobId int8
}

func NewJobCrafterDirectoryListRequestMessage() *JobCrafterDirectoryListRequestMessage {
	return &JobCrafterDirectoryListRequestMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryListRequestMessage", id_: 5876}}
}
func (m *JobCrafterDirectoryListRequestMessage) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
}

func (m *JobCrafterDirectoryListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectoryRemoveMessage struct {
	MessageBase
	JobId    int8
	PlayerId int64
}

func NewJobCrafterDirectoryRemoveMessage() *JobCrafterDirectoryRemoveMessage {
	return &JobCrafterDirectoryRemoveMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectoryRemoveMessage", id_: 3245}}
}
func (m *JobCrafterDirectoryRemoveMessage) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.PlayerId = input.ReadVarUhLong()
}

func (m *JobCrafterDirectoryRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectorySettings struct {
	MessageBase
	JobId    int8
	MinLevel uint8
	Free     bool
}

func NewJobCrafterDirectorySettings() *JobCrafterDirectorySettings {
	return &JobCrafterDirectorySettings{MessageBase: MessageBase{MessageType_: "JobCrafterDirectorySettings", id_: 7939}}
}
func (m *JobCrafterDirectorySettings) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.MinLevel = input.ReadUnsignedByte()
	m.Free = input.ReadBoolean()
}

func (m *JobCrafterDirectorySettings) IsDeserializeFunctionComplete() bool {
	return true
}

type JobCrafterDirectorySettingsMessage struct {
	MessageBase
	CraftersSettings *Vector[JobCrafterDirectorySettings]
}

func NewJobCrafterDirectorySettingsMessage() *JobCrafterDirectorySettingsMessage {
	return &JobCrafterDirectorySettingsMessage{MessageBase: MessageBase{MessageType_: "JobCrafterDirectorySettingsMessage", id_: 9206}}
}
func (m *JobCrafterDirectorySettingsMessage) Deserialize(input *DataWrapper) {
	m.CraftersSettings = NewVector[JobCrafterDirectorySettings]()
	craftersSettingsLen := int(input.ReadShort())
	for i := 0; i < craftersSettingsLen; i++ {
		JobCrafterDirectorySettings := NewJobCrafterDirectorySettings()
		JobCrafterDirectorySettings.Deserialize(input)
		m.CraftersSettings.Push(JobCrafterDirectorySettings)
	}
}

func (m *JobCrafterDirectorySettingsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobDescription struct {
	MessageBase
	JobId  int8
	Skills *Vector[SkillActionDescriptionI]
}

func NewJobDescription() *JobDescription {
	return &JobDescription{MessageBase: MessageBase{MessageType_: "JobDescription", id_: 4698}}
}
func (m *JobDescription) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.Skills = NewVector[SkillActionDescriptionI]()
	skillsLen := int(input.ReadShort())
	for i := 0; i < skillsLen; i++ {
		foundSkillActionDescription := getDynamicType(input)
		if castedSkillActionDescription, ok := foundSkillActionDescription.(SkillActionDescriptionI); ok {
			castedSkillActionDescription.Deserialize(input)
			m.Skills.Push(&castedSkillActionDescription)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement SkillActionDescriptionI, got: " + fmt.Sprintf("%T", foundSkillActionDescription))
		}
	}
}

func (m *JobDescription) IsDeserializeFunctionComplete() bool {
	return true
}

type JobDescriptionMessage struct {
	MessageBase
	JobsDescription *Vector[JobDescription]
}

func NewJobDescriptionMessage() *JobDescriptionMessage {
	return &JobDescriptionMessage{MessageBase: MessageBase{MessageType_: "JobDescriptionMessage", id_: 9539}}
}
func (m *JobDescriptionMessage) Deserialize(input *DataWrapper) {
	m.JobsDescription = NewVector[JobDescription]()
	jobsDescriptionLen := int(input.ReadShort())
	for i := 0; i < jobsDescriptionLen; i++ {
		JobDescription := NewJobDescription()
		JobDescription.Deserialize(input)
		m.JobsDescription.Push(JobDescription)
	}
}

func (m *JobDescriptionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobExperience struct {
	MessageBase
	JobId               int8
	JobLevel            uint8
	JobXP               int64
	JobXpLevelFloor     int64
	JobXpNextLevelFloor int64
}

func NewJobExperience() *JobExperience {
	return &JobExperience{MessageBase: MessageBase{MessageType_: "JobExperience", id_: 1492}}
}
func (m *JobExperience) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
	m.JobLevel = input.ReadUnsignedByte()
	m.JobXP = input.ReadVarUhLong()
	m.JobXpLevelFloor = input.ReadVarUhLong()
	m.JobXpNextLevelFloor = input.ReadVarUhLong()
}

func (m *JobExperience) IsDeserializeFunctionComplete() bool {
	return true
}

type JobExperienceMultiUpdateMessage struct {
	MessageBase
	ExperiencesUpdate *Vector[JobExperience]
}

func NewJobExperienceMultiUpdateMessage() *JobExperienceMultiUpdateMessage {
	return &JobExperienceMultiUpdateMessage{MessageBase: MessageBase{MessageType_: "JobExperienceMultiUpdateMessage", id_: 8763}}
}
func (m *JobExperienceMultiUpdateMessage) Deserialize(input *DataWrapper) {
	m.ExperiencesUpdate = NewVector[JobExperience]()
	experiencesUpdateLen := int(input.ReadShort())
	for i := 0; i < experiencesUpdateLen; i++ {
		JobExperience := NewJobExperience()
		JobExperience.Deserialize(input)
		m.ExperiencesUpdate.Push(JobExperience)
	}
}

func (m *JobExperienceMultiUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobExperienceOtherPlayerUpdateMessage struct {
	MessageBase
	JobExperienceUpdateMessage
	PlayerId int64
}

func NewJobExperienceOtherPlayerUpdateMessage() *JobExperienceOtherPlayerUpdateMessage {
	return &JobExperienceOtherPlayerUpdateMessage{MessageBase: MessageBase{MessageType_: "JobExperienceOtherPlayerUpdateMessage", id_: 1331}}
}
func (m *JobExperienceOtherPlayerUpdateMessage) Deserialize(input *DataWrapper) {
	m.JobExperienceUpdateMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *JobExperienceOtherPlayerUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobExperienceUpdateMessage struct {
	MessageBase
	ExperiencesUpdate *JobExperience
}

func NewJobExperienceUpdateMessage() *JobExperienceUpdateMessage {
	return &JobExperienceUpdateMessage{MessageBase: MessageBase{MessageType_: "JobExperienceUpdateMessage", id_: 6979}}
}
func (m *JobExperienceUpdateMessage) Deserialize(input *DataWrapper) {
	m.ExperiencesUpdate = NewJobExperience()
	m.ExperiencesUpdate.Deserialize(input)
}

func (m *JobExperienceUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobLevelUpMessage struct {
	MessageBase
	NewLevel        uint8
	JobsDescription *JobDescription
}

func NewJobLevelUpMessage() *JobLevelUpMessage {
	return &JobLevelUpMessage{MessageBase: MessageBase{MessageType_: "JobLevelUpMessage", id_: 386}}
}
func (m *JobLevelUpMessage) Deserialize(input *DataWrapper) {
	m.NewLevel = input.ReadUnsignedByte()
	m.JobsDescription = NewJobDescription()
	m.JobsDescription.Deserialize(input)
}

func (m *JobLevelUpMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type JobMultiCraftAvailableSkillsMessage struct {
	MessageBase
	JobAllowMultiCraftRequestMessage
	PlayerId int64
	Skills   *Vector[int]
}

func NewJobMultiCraftAvailableSkillsMessage() *JobMultiCraftAvailableSkillsMessage {
	return &JobMultiCraftAvailableSkillsMessage{MessageBase: MessageBase{MessageType_: "JobMultiCraftAvailableSkillsMessage", id_: 8902}}
}
func (m *JobMultiCraftAvailableSkillsMessage) Deserialize(input *DataWrapper) {
	m.JobAllowMultiCraftRequestMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.Skills = NewVector[int]()
	skillsLen := int(input.ReadShort())
	for i := 0; i < skillsLen; i++ {
		val := input.ReadVarShort()
		m.Skills.Push(&val)
	}
}

func (m *JobMultiCraftAvailableSkillsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KamaDebtInformation struct {
	MessageBase
	DebtInformation
	Kamas int64
}

func NewKamaDebtInformation() *KamaDebtInformation {
	return &KamaDebtInformation{MessageBase: MessageBase{MessageType_: "KamaDebtInformation", id_: 2104}}
}
func (m *KamaDebtInformation) Deserialize(input *DataWrapper) {
	m.DebtInformation.Deserialize(input)
	m.Kamas = input.ReadVarUhLong()
}

func (m *KamaDebtInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type KamasUpdateMessage struct {
	MessageBase
	KamasTotal int64
}

func NewKamasUpdateMessage() *KamasUpdateMessage {
	return &KamasUpdateMessage{MessageBase: MessageBase{MessageType_: "KamasUpdateMessage", id_: 654}}
}
func (m *KamasUpdateMessage) Deserialize(input *DataWrapper) {
	m.KamasTotal = input.ReadVarUhLong()
}

func (m *KamasUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KickHavenBagRequestMessage struct {
	MessageBase
	GuestId int64
}

func NewKickHavenBagRequestMessage() *KickHavenBagRequestMessage {
	return &KickHavenBagRequestMessage{MessageBase: MessageBase{MessageType_: "KickHavenBagRequestMessage", id_: 3554}}
}
func (m *KickHavenBagRequestMessage) Deserialize(input *DataWrapper) {
	m.GuestId = input.ReadVarUhLong()
}

func (m *KickHavenBagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KnownZaapListMessage struct {
	MessageBase
	Destinations *Vector[float64]
}

func NewKnownZaapListMessage() *KnownZaapListMessage {
	return &KnownZaapListMessage{MessageBase: MessageBase{MessageType_: "KnownZaapListMessage", id_: 5253}}
}
func (m *KnownZaapListMessage) Deserialize(input *DataWrapper) {
	m.Destinations = NewVector[float64]()
	destinationsLen := int(input.ReadShort())
	for i := 0; i < destinationsLen; i++ {
		val := input.ReadDouble()
		m.Destinations.Push(&val)
	}
}

func (m *KnownZaapListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KohAllianceInfo struct {
	MessageBase
	Alliance               *AllianceInformation
	MemberCount            int64
	KohAllianceRoleMembers *Vector[KohAllianceRoleMembers]
	Scores                 *Vector[KohScore]
	MatchDominationScores  int
}

func NewKohAllianceInfo() *KohAllianceInfo {
	return &KohAllianceInfo{MessageBase: MessageBase{MessageType_: "KohAllianceInfo", id_: 7195}}
}
func (m *KohAllianceInfo) Deserialize(input *DataWrapper) {
	m.Alliance = NewAllianceInformation()
	m.Alliance.Deserialize(input)
	m.MemberCount = input.ReadVarUhLong()
	m.KohAllianceRoleMembers = NewVector[KohAllianceRoleMembers]()
	kohAllianceRoleMembersLen := int(input.ReadShort())
	for i := 0; i < kohAllianceRoleMembersLen; i++ {
		KohAllianceRoleMembers := NewKohAllianceRoleMembers()
		KohAllianceRoleMembers.Deserialize(input)
		m.KohAllianceRoleMembers.Push(KohAllianceRoleMembers)
	}
	m.Scores = NewVector[KohScore]()
	scoresLen := int(input.ReadShort())
	for i := 0; i < scoresLen; i++ {
		KohScore := NewKohScore()
		KohScore.Deserialize(input)
		m.Scores.Push(KohScore)
	}
	m.MatchDominationScores = input.ReadVarUhInt()
}

func (m *KohAllianceInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type KohAllianceRoleMembers struct {
	MessageBase
	MemberCount int64
	RoleAvAId   int32
}

func NewKohAllianceRoleMembers() *KohAllianceRoleMembers {
	return &KohAllianceRoleMembers{MessageBase: MessageBase{MessageType_: "KohAllianceRoleMembers", id_: 9987}}
}
func (m *KohAllianceRoleMembers) Deserialize(input *DataWrapper) {
	m.MemberCount = input.ReadVarUhLong()
	m.RoleAvAId = input.ReadInt()
}

func (m *KohAllianceRoleMembers) IsDeserializeFunctionComplete() bool {
	return true
}

type KohScore struct {
	MessageBase
	AvaScoreTypeEnum int8
	RoundScores      int32
	CumulScores      int32
}

func NewKohScore() *KohScore {
	return &KohScore{MessageBase: MessageBase{MessageType_: "KohScore", id_: 5560}}
}
func (m *KohScore) Deserialize(input *DataWrapper) {
	m.AvaScoreTypeEnum = input.ReadByte()
	m.RoundScores = input.ReadInt()
	m.CumulScores = input.ReadInt()
}

func (m *KohScore) IsDeserializeFunctionComplete() bool {
	return true
}

type KohUpdateMessage struct {
	MessageBase
	KohAllianceInfo      *Vector[KohAllianceInfo]
	StartingAvaTimestamp int32
	NextTickTime         float64
}

func NewKohUpdateMessage() *KohUpdateMessage {
	return &KohUpdateMessage{MessageBase: MessageBase{MessageType_: "KohUpdateMessage", id_: 1036}}
}
func (m *KohUpdateMessage) Deserialize(input *DataWrapper) {
	m.KohAllianceInfo = NewVector[KohAllianceInfo]()
	kohAllianceInfoLen := int(input.ReadShort())
	for i := 0; i < kohAllianceInfoLen; i++ {
		KohAllianceInfo := NewKohAllianceInfo()
		KohAllianceInfo.Deserialize(input)
		m.KohAllianceInfo.Push(KohAllianceInfo)
	}
	m.StartingAvaTimestamp = input.ReadInt()
	m.NextTickTime = input.ReadDouble()
}

func (m *KohUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KothEndMessage struct {
	MessageBase
	Winner *KothWinner
}

func NewKothEndMessage() *KothEndMessage {
	return &KothEndMessage{MessageBase: MessageBase{MessageType_: "KothEndMessage", id_: 506}}
}
func (m *KothEndMessage) Deserialize(input *DataWrapper) {
	m.Winner = NewKothWinner()
	m.Winner.Deserialize(input)
}

func (m *KothEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type KothWinner struct {
	MessageBase
}

func NewKothWinner() *KothWinner {
	return &KothWinner{MessageBase: MessageBase{MessageType_: "KothWinner", id_: 4121}}
}
func (m *KothWinner) Deserialize(input *DataWrapper) {
}

func (m *KothWinner) IsDeserializeFunctionComplete() bool {
	return true
}

type LeagueFriendInformations struct {
	MessageBase
	AbstractContactInformations
	PlayerId          int64
	PlayerName        string
	Breed             int8
	Sex               bool
	Level             int
	LeagueId          int
	TotalLeaguePoints int
	LadderPosition    int32
}

func NewLeagueFriendInformations() *LeagueFriendInformations {
	return &LeagueFriendInformations{MessageBase: MessageBase{MessageType_: "LeagueFriendInformations", id_: 7750}}
}
func (m *LeagueFriendInformations) Deserialize(input *DataWrapper) {
	m.AbstractContactInformations.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.Level = input.ReadVarUhShort()
	m.LeagueId = input.ReadVarShort()
	m.TotalLeaguePoints = input.ReadVarShort()
	m.LadderPosition = input.ReadInt()
}

func (m *LeagueFriendInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type LeaveDialogMessage struct {
	MessageBase
	DialogType int8
}

func NewLeaveDialogMessage() *LeaveDialogMessage {
	return &LeaveDialogMessage{MessageBase: MessageBase{MessageType_: "LeaveDialogMessage", id_: 6689}}
}
func (m *LeaveDialogMessage) Deserialize(input *DataWrapper) {
	m.DialogType = input.ReadByte()
}

func (m *LeaveDialogMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LeaveDialogRequestMessage struct {
	MessageBase
}

func NewLeaveDialogRequestMessage() *LeaveDialogRequestMessage {
	return &LeaveDialogRequestMessage{MessageBase: MessageBase{MessageType_: "LeaveDialogRequestMessage", id_: 9643}}
}
func (m *LeaveDialogRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *LeaveDialogRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LifePointsRegenBeginMessage struct {
	MessageBase
	RegenRate uint8
}

func NewLifePointsRegenBeginMessage() *LifePointsRegenBeginMessage {
	return &LifePointsRegenBeginMessage{MessageBase: MessageBase{MessageType_: "LifePointsRegenBeginMessage", id_: 9965}}
}
func (m *LifePointsRegenBeginMessage) Deserialize(input *DataWrapper) {
	m.RegenRate = input.ReadUnsignedByte()
}

func (m *LifePointsRegenBeginMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LifePointsRegenEndMessage struct {
	MessageBase
	UpdateLifePointsMessage
	LifePointsGained int
}

func NewLifePointsRegenEndMessage() *LifePointsRegenEndMessage {
	return &LifePointsRegenEndMessage{MessageBase: MessageBase{MessageType_: "LifePointsRegenEndMessage", id_: 6833}}
}
func (m *LifePointsRegenEndMessage) Deserialize(input *DataWrapper) {
	m.UpdateLifePointsMessage.Deserialize(input)
	m.LifePointsGained = input.ReadVarUhInt()
}

func (m *LifePointsRegenEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ListMapNpcsQuestStatusUpdateMessage struct {
	MessageBase
	MapInfo *Vector[MapNpcQuestInfo]
}

func NewListMapNpcsQuestStatusUpdateMessage() *ListMapNpcsQuestStatusUpdateMessage {
	return &ListMapNpcsQuestStatusUpdateMessage{MessageBase: MessageBase{MessageType_: "ListMapNpcsQuestStatusUpdateMessage", id_: 5023}}
}
func (m *ListMapNpcsQuestStatusUpdateMessage) Deserialize(input *DataWrapper) {
	m.MapInfo = NewVector[MapNpcQuestInfo]()
	mapInfoLen := int(input.ReadShort())
	for i := 0; i < mapInfoLen; i++ {
		MapNpcQuestInfo := NewMapNpcQuestInfo()
		MapNpcQuestInfo.Deserialize(input)
		m.MapInfo.Push(MapNpcQuestInfo)
	}
}

func (m *ListMapNpcsQuestStatusUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ListenersOfSynchronizedStorageMessage struct {
	MessageBase
	Players *Vector[string]
}

func NewListenersOfSynchronizedStorageMessage() *ListenersOfSynchronizedStorageMessage {
	return &ListenersOfSynchronizedStorageMessage{MessageBase: MessageBase{MessageType_: "ListenersOfSynchronizedStorageMessage", id_: 8036}}
}
func (m *ListenersOfSynchronizedStorageMessage) Deserialize(input *DataWrapper) {
	m.Players = NewVector[string]()
	playersLen := int(input.ReadShort())
	for i := 0; i < playersLen; i++ {
		val := input.ReadUTF()
		m.Players.Push(&val)
	}
}

func (m *ListenersOfSynchronizedStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LivingObjectChangeSkinRequestMessage struct {
	MessageBase
	LivingUID      int
	LivingPosition uint8
	SkinId         int
}

func NewLivingObjectChangeSkinRequestMessage() *LivingObjectChangeSkinRequestMessage {
	return &LivingObjectChangeSkinRequestMessage{MessageBase: MessageBase{MessageType_: "LivingObjectChangeSkinRequestMessage", id_: 2511}}
}
func (m *LivingObjectChangeSkinRequestMessage) Deserialize(input *DataWrapper) {
	m.LivingUID = input.ReadVarUhInt()
	m.LivingPosition = input.ReadUnsignedByte()
	m.SkinId = input.ReadVarUhInt()
}

func (m *LivingObjectChangeSkinRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LivingObjectDissociateMessage struct {
	MessageBase
	LivingUID      int
	LivingPosition uint8
}

func NewLivingObjectDissociateMessage() *LivingObjectDissociateMessage {
	return &LivingObjectDissociateMessage{MessageBase: MessageBase{MessageType_: "LivingObjectDissociateMessage", id_: 8437}}
}
func (m *LivingObjectDissociateMessage) Deserialize(input *DataWrapper) {
	m.LivingUID = input.ReadVarUhInt()
	m.LivingPosition = input.ReadUnsignedByte()
}

func (m *LivingObjectDissociateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LivingObjectMessageMessage struct {
	MessageBase
	MsgId           int
	TimeStamp       int32
	Owner           string
	ObjectGenericId int
}

func NewLivingObjectMessageMessage() *LivingObjectMessageMessage {
	return &LivingObjectMessageMessage{MessageBase: MessageBase{MessageType_: "LivingObjectMessageMessage", id_: 6015}}
}
func (m *LivingObjectMessageMessage) Deserialize(input *DataWrapper) {
	m.MsgId = input.ReadVarUhShort()
	m.TimeStamp = input.ReadInt()
	m.Owner = input.ReadUTF()
	m.ObjectGenericId = input.ReadVarUhInt()
}

func (m *LivingObjectMessageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LivingObjectMessageRequestMessage struct {
	MessageBase
	MsgId        int
	Parameters   *Vector[string]
	LivingObject int
}

func NewLivingObjectMessageRequestMessage() *LivingObjectMessageRequestMessage {
	return &LivingObjectMessageRequestMessage{MessageBase: MessageBase{MessageType_: "LivingObjectMessageRequestMessage", id_: 5726}}
}
func (m *LivingObjectMessageRequestMessage) Deserialize(input *DataWrapper) {
	m.MsgId = input.ReadVarUhShort()
	m.Parameters = NewVector[string]()
	parametersLen := int(input.ReadShort())
	for i := 0; i < parametersLen; i++ {
		val := input.ReadUTF()
		m.Parameters.Push(&val)
	}
	m.LivingObject = input.ReadVarUhInt()
}

func (m *LivingObjectMessageRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LocalizedChatSmileyMessage struct {
	MessageBase
	ChatSmileyMessage
	CellId int
}

func NewLocalizedChatSmileyMessage() *LocalizedChatSmileyMessage {
	return &LocalizedChatSmileyMessage{MessageBase: MessageBase{MessageType_: "LocalizedChatSmileyMessage", id_: 8626}}
}
func (m *LocalizedChatSmileyMessage) Deserialize(input *DataWrapper) {
	m.ChatSmileyMessage.Deserialize(input)
	m.CellId = input.ReadVarUhShort()
}

func (m *LocalizedChatSmileyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableChangeCodeMessage struct {
	MessageBase
	Code string
}

func NewLockableChangeCodeMessage() *LockableChangeCodeMessage {
	return &LockableChangeCodeMessage{MessageBase: MessageBase{MessageType_: "LockableChangeCodeMessage", id_: 9751}}
}
func (m *LockableChangeCodeMessage) Deserialize(input *DataWrapper) {
	m.Code = input.ReadUTF()
}

func (m *LockableChangeCodeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableCodeResultMessage struct {
	MessageBase
	Result int8
}

func NewLockableCodeResultMessage() *LockableCodeResultMessage {
	return &LockableCodeResultMessage{MessageBase: MessageBase{MessageType_: "LockableCodeResultMessage", id_: 7522}}
}
func (m *LockableCodeResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
}

func (m *LockableCodeResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableShowCodeDialogMessage struct {
	MessageBase
	ChangeOrUse bool
	CodeSize    int8
}

func NewLockableShowCodeDialogMessage() *LockableShowCodeDialogMessage {
	return &LockableShowCodeDialogMessage{MessageBase: MessageBase{MessageType_: "LockableShowCodeDialogMessage", id_: 9268}}
}
func (m *LockableShowCodeDialogMessage) Deserialize(input *DataWrapper) {
	m.ChangeOrUse = input.ReadBoolean()
	m.CodeSize = input.ReadByte()
}

func (m *LockableShowCodeDialogMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableStateUpdateAbstractMessage struct {
	MessageBase
	Locked bool
}

func NewLockableStateUpdateAbstractMessage() *LockableStateUpdateAbstractMessage {
	return &LockableStateUpdateAbstractMessage{MessageBase: MessageBase{MessageType_: "LockableStateUpdateAbstractMessage", id_: 107}}
}
func (m *LockableStateUpdateAbstractMessage) Deserialize(input *DataWrapper) {
	m.Locked = input.ReadBoolean()
}

func (m *LockableStateUpdateAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableStateUpdateHouseDoorMessage struct {
	MessageBase
	LockableStateUpdateAbstractMessage
	HouseId    int
	InstanceId int32
	SecondHand bool
}

func NewLockableStateUpdateHouseDoorMessage() *LockableStateUpdateHouseDoorMessage {
	return &LockableStateUpdateHouseDoorMessage{MessageBase: MessageBase{MessageType_: "LockableStateUpdateHouseDoorMessage", id_: 7692}}
}
func (m *LockableStateUpdateHouseDoorMessage) Deserialize(input *DataWrapper) {
	m.LockableStateUpdateAbstractMessage.Deserialize(input)
	m.HouseId = input.ReadVarUhInt()
	m.InstanceId = input.ReadInt()
	m.SecondHand = input.ReadBoolean()
}

func (m *LockableStateUpdateHouseDoorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableStateUpdateStorageMessage struct {
	MessageBase
	LockableStateUpdateAbstractMessage
	MapId     float64
	ElementId int
}

func NewLockableStateUpdateStorageMessage() *LockableStateUpdateStorageMessage {
	return &LockableStateUpdateStorageMessage{MessageBase: MessageBase{MessageType_: "LockableStateUpdateStorageMessage", id_: 569}}
}
func (m *LockableStateUpdateStorageMessage) Deserialize(input *DataWrapper) {
	m.LockableStateUpdateAbstractMessage.Deserialize(input)
	m.MapId = input.ReadDouble()
	m.ElementId = input.ReadVarUhInt()
}

func (m *LockableStateUpdateStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LockableUseCodeMessage struct {
	MessageBase
	Code string
}

func NewLockableUseCodeMessage() *LockableUseCodeMessage {
	return &LockableUseCodeMessage{MessageBase: MessageBase{MessageType_: "LockableUseCodeMessage", id_: 3147}}
}
func (m *LockableUseCodeMessage) Deserialize(input *DataWrapper) {
	m.Code = input.ReadUTF()
}

func (m *LockableUseCodeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type LoginQueueStatusMessage struct {
	MessageBase
	Position uint16
	Total    uint16
}

func NewLoginQueueStatusMessage() *LoginQueueStatusMessage {
	return &LoginQueueStatusMessage{MessageBase: MessageBase{MessageType_: "LoginQueueStatusMessage", id_: 3098}}
}
func (m *LoginQueueStatusMessage) Deserialize(input *DataWrapper) {
	m.Position = input.ReadUnsignedShort()
	m.Total = input.ReadUnsignedShort()
}

func (m *LoginQueueStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsAnomalyMessage struct {
	MessageBase
	MapComplementaryInformationsDataMessage
	Level       int
	ClosingTime int64
}

func NewMapComplementaryInformationsAnomalyMessage() *MapComplementaryInformationsAnomalyMessage {
	return &MapComplementaryInformationsAnomalyMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsAnomalyMessage", id_: 7688}}
}
func (m *MapComplementaryInformationsAnomalyMessage) Deserialize(input *DataWrapper) {
	m.MapComplementaryInformationsDataMessage.Deserialize(input)
	m.Level = input.ReadVarUhShort()
	m.ClosingTime = input.ReadVarUhLong()
}

func (m *MapComplementaryInformationsAnomalyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsBreachMessage struct {
	MessageBase
	MapComplementaryInformationsDataMessage
	Floor        int
	Room         int8
	InfinityMode int16
	Branches     *Vector[BreachBranchI]
}

func NewMapComplementaryInformationsBreachMessage() *MapComplementaryInformationsBreachMessage {
	return &MapComplementaryInformationsBreachMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsBreachMessage", id_: 4428}}
}
func (m *MapComplementaryInformationsBreachMessage) Deserialize(input *DataWrapper) {
	m.MapComplementaryInformationsDataMessage.Deserialize(input)
	m.Floor = input.ReadVarUhInt()
	m.Room = input.ReadByte()
	m.InfinityMode = input.ReadShort()
	m.Branches = NewVector[BreachBranchI]()
	branchesLen := int(input.ReadShort())
	for i := 0; i < branchesLen; i++ {
		foundBreachBranch := getDynamicType(input)
		if castedBreachBranch, ok := foundBreachBranch.(BreachBranchI); ok {
			castedBreachBranch.Deserialize(input)
			m.Branches.Push(&castedBreachBranch)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement BreachBranchI, got: " + fmt.Sprintf("%T", foundBreachBranch))
		}
	}
}

func (m *MapComplementaryInformationsBreachMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsDataInHavenBagMessage struct {
	MessageBase
	MapComplementaryInformationsDataMessage
	OwnerInformations *CharacterMinimalInformations
	Theme             int8
	RoomId            int8
	MaxRoomId         int8
}

func NewMapComplementaryInformationsDataInHavenBagMessage() *MapComplementaryInformationsDataInHavenBagMessage {
	return &MapComplementaryInformationsDataInHavenBagMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsDataInHavenBagMessage", id_: 2021}}
}
func (m *MapComplementaryInformationsDataInHavenBagMessage) Deserialize(input *DataWrapper) {
	m.MapComplementaryInformationsDataMessage.Deserialize(input)
	m.OwnerInformations = NewCharacterMinimalInformations()
	m.OwnerInformations.Deserialize(input)
	m.Theme = input.ReadByte()
	m.RoomId = input.ReadByte()
	m.MaxRoomId = input.ReadByte()
}

func (m *MapComplementaryInformationsDataInHavenBagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsDataInHouseMessage struct {
	MessageBase
	MapComplementaryInformationsDataMessage
	CurrentHouse *HouseInformationsInside
}

func NewMapComplementaryInformationsDataInHouseMessage() *MapComplementaryInformationsDataInHouseMessage {
	return &MapComplementaryInformationsDataInHouseMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsDataInHouseMessage", id_: 1071}}
}
func (m *MapComplementaryInformationsDataInHouseMessage) Deserialize(input *DataWrapper) {
	m.MapComplementaryInformationsDataMessage.Deserialize(input)
	m.CurrentHouse = NewHouseInformationsInside()
	m.CurrentHouse.Deserialize(input)
}

func (m *MapComplementaryInformationsDataInHouseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsDataMessage struct {
	MessageBase
	SubAreaId             int
	MapId                 float64
	Houses                *Vector[HouseInformationsI]
	Actors                *Vector[GameRolePlayActorInformationsI]
	InteractiveElements   *Vector[InteractiveElementI]
	StatedElements        *Vector[StatedElement]
	Obstacles             *Vector[MapObstacle]
	Fights                *Vector[FightCommonInformations]
	HasAggressiveMonsters bool
	FightStartPositions   *FightStartingPositions
}

func NewMapComplementaryInformationsDataMessage() *MapComplementaryInformationsDataMessage {
	return &MapComplementaryInformationsDataMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsDataMessage", id_: 9792}}
}
func (m *MapComplementaryInformationsDataMessage) Deserialize(input *DataWrapper) {
	m.SubAreaId = input.ReadVarUhShort()
	m.MapId = input.ReadDouble()
	m.Houses = NewVector[HouseInformationsI]()
	housesLen := int(input.ReadShort())
	for i := 0; i < housesLen; i++ {
		foundHouseInformations := getDynamicType(input)
		if castedHouseInformations, ok := foundHouseInformations.(HouseInformationsI); ok {
			castedHouseInformations.Deserialize(input)
			m.Houses.Push(&castedHouseInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement HouseInformationsI, got: " + fmt.Sprintf("%T", foundHouseInformations))
		}
	}
	m.Actors = NewVector[GameRolePlayActorInformationsI]()
	actorsLen := int(input.ReadShort())
	for i := 0; i < actorsLen; i++ {
		foundGameRolePlayActorInformations := getDynamicType(input)
		if castedGameRolePlayActorInformations, ok := foundGameRolePlayActorInformations.(GameRolePlayActorInformationsI); ok {
			castedGameRolePlayActorInformations.Deserialize(input)
			m.Actors.Push(&castedGameRolePlayActorInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameRolePlayActorInformationsI, got: " + fmt.Sprintf("%T", foundGameRolePlayActorInformations))
		}
	}
	m.InteractiveElements = NewVector[InteractiveElementI]()
	interactiveElementsLen := int(input.ReadShort())
	for i := 0; i < interactiveElementsLen; i++ {
		foundInteractiveElement := getDynamicType(input)
		if castedInteractiveElement, ok := foundInteractiveElement.(InteractiveElementI); ok {
			castedInteractiveElement.Deserialize(input)
			m.InteractiveElements.Push(&castedInteractiveElement)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement InteractiveElementI, got: " + fmt.Sprintf("%T", foundInteractiveElement))
		}
	}
	m.StatedElements = NewVector[StatedElement]()
	statedElementsLen := int(input.ReadShort())
	for i := 0; i < statedElementsLen; i++ {
		StatedElement := NewStatedElement()
		StatedElement.Deserialize(input)
		m.StatedElements.Push(StatedElement)
	}
	m.Obstacles = NewVector[MapObstacle]()
	obstaclesLen := int(input.ReadShort())
	for i := 0; i < obstaclesLen; i++ {
		MapObstacle := NewMapObstacle()
		MapObstacle.Deserialize(input)
		m.Obstacles.Push(MapObstacle)
	}
	m.Fights = NewVector[FightCommonInformations]()
	fightsLen := int(input.ReadShort())
	for i := 0; i < fightsLen; i++ {
		FightCommonInformations := NewFightCommonInformations()
		FightCommonInformations.Deserialize(input)
		m.Fights.Push(FightCommonInformations)
	}
	m.HasAggressiveMonsters = input.ReadBoolean()
	m.FightStartPositions = NewFightStartingPositions()
	m.FightStartPositions.Deserialize(input)
}

func (m *MapComplementaryInformationsDataMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapComplementaryInformationsWithCoordsMessage struct {
	MessageBase
	MapComplementaryInformationsDataMessage
	WorldX int16
	WorldY int16
}

func NewMapComplementaryInformationsWithCoordsMessage() *MapComplementaryInformationsWithCoordsMessage {
	return &MapComplementaryInformationsWithCoordsMessage{MessageBase: MessageBase{MessageType_: "MapComplementaryInformationsWithCoordsMessage", id_: 5198}}
}
func (m *MapComplementaryInformationsWithCoordsMessage) Deserialize(input *DataWrapper) {
	m.MapComplementaryInformationsDataMessage.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
}

func (m *MapComplementaryInformationsWithCoordsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapCoordinatesI interface {
	Deserialize(input *DataWrapper)
}

type MapCoordinates struct {
	MessageBase
	WorldX int16
	WorldY int16
}

func NewMapCoordinates() *MapCoordinates {
	return &MapCoordinates{MessageBase: MessageBase{MessageType_: "MapCoordinates", id_: 315}}
}
func (m *MapCoordinates) Deserialize(input *DataWrapper) {
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
}

func (m *MapCoordinates) IsDeserializeFunctionComplete() bool {
	return true
}

type MapCoordinatesAndId struct {
	MessageBase
	MapCoordinates
	MapId float64
}

func NewMapCoordinatesAndId() *MapCoordinatesAndId {
	return &MapCoordinatesAndId{MessageBase: MessageBase{MessageType_: "MapCoordinatesAndId", id_: 7010}}
}
func (m *MapCoordinatesAndId) Deserialize(input *DataWrapper) {
	m.MapCoordinates.Deserialize(input)
	m.MapId = input.ReadDouble()
}

func (m *MapCoordinatesAndId) IsDeserializeFunctionComplete() bool {
	return true
}

type MapCoordinatesExtended struct {
	MessageBase
	MapCoordinatesAndId
	SubAreaId int
}

func NewMapCoordinatesExtended() *MapCoordinatesExtended {
	return &MapCoordinatesExtended{MessageBase: MessageBase{MessageType_: "MapCoordinatesExtended", id_: 1599}}
}
func (m *MapCoordinatesExtended) Deserialize(input *DataWrapper) {
	m.MapCoordinatesAndId.Deserialize(input)
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *MapCoordinatesExtended) IsDeserializeFunctionComplete() bool {
	return true
}

type MapFightCountMessage struct {
	MessageBase
	FightCount int
}

func NewMapFightCountMessage() *MapFightCountMessage {
	return &MapFightCountMessage{MessageBase: MessageBase{MessageType_: "MapFightCountMessage", id_: 2838}}
}
func (m *MapFightCountMessage) Deserialize(input *DataWrapper) {
	m.FightCount = input.ReadVarUhShort()
}

func (m *MapFightCountMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapFightStartPositionsUpdateMessage struct {
	MessageBase
	MapId               float64
	FightStartPositions *FightStartingPositions
}

func NewMapFightStartPositionsUpdateMessage() *MapFightStartPositionsUpdateMessage {
	return &MapFightStartPositionsUpdateMessage{MessageBase: MessageBase{MessageType_: "MapFightStartPositionsUpdateMessage", id_: 9437}}
}
func (m *MapFightStartPositionsUpdateMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.FightStartPositions = NewFightStartingPositions()
	m.FightStartPositions.Deserialize(input)
}

func (m *MapFightStartPositionsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapInformationsRequestMessage struct {
	MessageBase
	MapId float64
}

func NewMapInformationsRequestMessage() *MapInformationsRequestMessage {
	return &MapInformationsRequestMessage{MessageBase: MessageBase{MessageType_: "MapInformationsRequestMessage", id_: 2408}}
}
func (m *MapInformationsRequestMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
}

func (m *MapInformationsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapNpcQuestInfo struct {
	MessageBase
	MapId            float64
	NpcsIdsWithQuest *Vector[int32]
	QuestFlags       *Vector[GameRolePlayNpcQuestFlag]
}

func NewMapNpcQuestInfo() *MapNpcQuestInfo {
	return &MapNpcQuestInfo{MessageBase: MessageBase{MessageType_: "MapNpcQuestInfo", id_: 7887}}
}
func (m *MapNpcQuestInfo) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.NpcsIdsWithQuest = NewVector[int32]()
	npcsIdsWithQuestLen := int(input.ReadShort())
	for i := 0; i < npcsIdsWithQuestLen; i++ {
		val := input.ReadInt()
		m.NpcsIdsWithQuest.Push(&val)
	}
	m.QuestFlags = NewVector[GameRolePlayNpcQuestFlag]()
	questFlagsLen := int(input.ReadShort())
	for i := 0; i < questFlagsLen; i++ {
		GameRolePlayNpcQuestFlag := NewGameRolePlayNpcQuestFlag()
		GameRolePlayNpcQuestFlag.Deserialize(input)
		m.QuestFlags.Push(GameRolePlayNpcQuestFlag)
	}
}

func (m *MapNpcQuestInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type MapObstacle struct {
	MessageBase
	ObstacleCellId int
	State          int8
}

func NewMapObstacle() *MapObstacle {
	return &MapObstacle{MessageBase: MessageBase{MessageType_: "MapObstacle", id_: 9518}}
}
func (m *MapObstacle) Deserialize(input *DataWrapper) {
	m.ObstacleCellId = input.ReadVarUhShort()
	m.State = input.ReadByte()
}

func (m *MapObstacle) IsDeserializeFunctionComplete() bool {
	return true
}

type MapObstacleUpdateMessage struct {
	MessageBase
	Obstacles *Vector[MapObstacle]
}

func NewMapObstacleUpdateMessage() *MapObstacleUpdateMessage {
	return &MapObstacleUpdateMessage{MessageBase: MessageBase{MessageType_: "MapObstacleUpdateMessage", id_: 75}}
}
func (m *MapObstacleUpdateMessage) Deserialize(input *DataWrapper) {
	m.Obstacles = NewVector[MapObstacle]()
	obstaclesLen := int(input.ReadShort())
	for i := 0; i < obstaclesLen; i++ {
		MapObstacle := NewMapObstacle()
		MapObstacle.Deserialize(input)
		m.Obstacles.Push(MapObstacle)
	}
}

func (m *MapObstacleUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapRunningFightDetailsExtendedMessage struct {
	MessageBase
	MapRunningFightDetailsMessage
	NamedPartyTeams *Vector[NamedPartyTeam]
}

func NewMapRunningFightDetailsExtendedMessage() *MapRunningFightDetailsExtendedMessage {
	return &MapRunningFightDetailsExtendedMessage{MessageBase: MessageBase{MessageType_: "MapRunningFightDetailsExtendedMessage", id_: 8895}}
}
func (m *MapRunningFightDetailsExtendedMessage) Deserialize(input *DataWrapper) {
	m.MapRunningFightDetailsMessage.Deserialize(input)
	m.NamedPartyTeams = NewVector[NamedPartyTeam]()
	namedPartyTeamsLen := int(input.ReadShort())
	for i := 0; i < namedPartyTeamsLen; i++ {
		NamedPartyTeam := NewNamedPartyTeam()
		NamedPartyTeam.Deserialize(input)
		m.NamedPartyTeams.Push(NamedPartyTeam)
	}
}

func (m *MapRunningFightDetailsExtendedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapRunningFightDetailsMessage struct {
	MessageBase
	FightId   int
	Attackers *Vector[GameFightFighterLightInformationsI]
	Defenders *Vector[GameFightFighterLightInformationsI]
}

func NewMapRunningFightDetailsMessage() *MapRunningFightDetailsMessage {
	return &MapRunningFightDetailsMessage{MessageBase: MessageBase{MessageType_: "MapRunningFightDetailsMessage", id_: 2005}}
}
func (m *MapRunningFightDetailsMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.Attackers = NewVector[GameFightFighterLightInformationsI]()
	attackersLen := int(input.ReadShort())
	for i := 0; i < attackersLen; i++ {
		foundGameFightFighterLightInformations := getDynamicType(input)
		if castedGameFightFighterLightInformations, ok := foundGameFightFighterLightInformations.(GameFightFighterLightInformationsI); ok {
			castedGameFightFighterLightInformations.Deserialize(input)
			m.Attackers.Push(&castedGameFightFighterLightInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameFightFighterLightInformationsI, got: " + fmt.Sprintf("%T", foundGameFightFighterLightInformations))
		}
	}
	m.Defenders = NewVector[GameFightFighterLightInformationsI]()
	defendersLen := int(input.ReadShort())
	for i := 0; i < defendersLen; i++ {
		foundGameFightFighterLightInformations := getDynamicType(input)
		if castedGameFightFighterLightInformations, ok := foundGameFightFighterLightInformations.(GameFightFighterLightInformationsI); ok {
			castedGameFightFighterLightInformations.Deserialize(input)
			m.Defenders.Push(&castedGameFightFighterLightInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement GameFightFighterLightInformationsI, got: " + fmt.Sprintf("%T", foundGameFightFighterLightInformations))
		}
	}
}

func (m *MapRunningFightDetailsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapRunningFightDetailsRequestMessage struct {
	MessageBase
	FightId int
}

func NewMapRunningFightDetailsRequestMessage() *MapRunningFightDetailsRequestMessage {
	return &MapRunningFightDetailsRequestMessage{MessageBase: MessageBase{MessageType_: "MapRunningFightDetailsRequestMessage", id_: 337}}
}
func (m *MapRunningFightDetailsRequestMessage) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
}

func (m *MapRunningFightDetailsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapRunningFightListMessage struct {
	MessageBase
	Fights *Vector[FightExternalInformations]
}

func NewMapRunningFightListMessage() *MapRunningFightListMessage {
	return &MapRunningFightListMessage{MessageBase: MessageBase{MessageType_: "MapRunningFightListMessage", id_: 8225}}
}
func (m *MapRunningFightListMessage) Deserialize(input *DataWrapper) {
	m.Fights = NewVector[FightExternalInformations]()
	fightsLen := int(input.ReadShort())
	for i := 0; i < fightsLen; i++ {
		FightExternalInformations := NewFightExternalInformations()
		FightExternalInformations.Deserialize(input)
		m.Fights.Push(FightExternalInformations)
	}
}

func (m *MapRunningFightListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MapRunningFightListRequestMessage struct {
	MessageBase
}

func NewMapRunningFightListRequestMessage() *MapRunningFightListRequestMessage {
	return &MapRunningFightListRequestMessage{MessageBase: MessageBase{MessageType_: "MapRunningFightListRequestMessage", id_: 1925}}
}
func (m *MapRunningFightListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *MapRunningFightListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MigratedServerListMessage struct {
	MessageBase
	MigratedServerIds *Vector[int]
}

func NewMigratedServerListMessage() *MigratedServerListMessage {
	return &MigratedServerListMessage{MessageBase: MessageBase{MessageType_: "MigratedServerListMessage", id_: 2491}}
}
func (m *MigratedServerListMessage) Deserialize(input *DataWrapper) {
	m.MigratedServerIds = NewVector[int]()
	migratedServerIdsLen := int(input.ReadShort())
	for i := 0; i < migratedServerIdsLen; i++ {
		val := input.ReadVarShort()
		m.MigratedServerIds.Push(&val)
	}
}

func (m *MigratedServerListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MimicryObjectAssociatedMessage struct {
	MessageBase
	SymbioticObjectAssociatedMessage
}

func NewMimicryObjectAssociatedMessage() *MimicryObjectAssociatedMessage {
	return &MimicryObjectAssociatedMessage{MessageBase: MessageBase{MessageType_: "MimicryObjectAssociatedMessage", id_: 1127}}
}
func (m *MimicryObjectAssociatedMessage) Deserialize(input *DataWrapper) {
	m.SymbioticObjectAssociatedMessage.Deserialize(input)
}

func (m *MimicryObjectAssociatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MimicryObjectEraseRequestMessage struct {
	MessageBase
	HostUID int
	HostPos uint8
}

func NewMimicryObjectEraseRequestMessage() *MimicryObjectEraseRequestMessage {
	return &MimicryObjectEraseRequestMessage{MessageBase: MessageBase{MessageType_: "MimicryObjectEraseRequestMessage", id_: 7124}}
}
func (m *MimicryObjectEraseRequestMessage) Deserialize(input *DataWrapper) {
	m.HostUID = input.ReadVarUhInt()
	m.HostPos = input.ReadUnsignedByte()
}

func (m *MimicryObjectEraseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MimicryObjectErrorMessage struct {
	MessageBase
	SymbioticObjectErrorMessage
	Preview bool
}

func NewMimicryObjectErrorMessage() *MimicryObjectErrorMessage {
	return &MimicryObjectErrorMessage{MessageBase: MessageBase{MessageType_: "MimicryObjectErrorMessage", id_: 3920}}
}
func (m *MimicryObjectErrorMessage) Deserialize(input *DataWrapper) {
	m.SymbioticObjectErrorMessage.Deserialize(input)
	m.Preview = input.ReadBoolean()
}

func (m *MimicryObjectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MimicryObjectFeedAndAssociateRequestMessage struct {
	MessageBase
	SymbioticObjectAssociateRequestMessage
	FoodUID int
	FoodPos uint8
	Preview bool
}

func NewMimicryObjectFeedAndAssociateRequestMessage() *MimicryObjectFeedAndAssociateRequestMessage {
	return &MimicryObjectFeedAndAssociateRequestMessage{MessageBase: MessageBase{MessageType_: "MimicryObjectFeedAndAssociateRequestMessage", id_: 3754}}
}
func (m *MimicryObjectFeedAndAssociateRequestMessage) Deserialize(input *DataWrapper) {
	m.SymbioticObjectAssociateRequestMessage.Deserialize(input)
	m.FoodUID = input.ReadVarUhInt()
	m.FoodPos = input.ReadUnsignedByte()
	m.Preview = input.ReadBoolean()
}

func (m *MimicryObjectFeedAndAssociateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MimicryObjectPreviewMessage struct {
	MessageBase
	Result *ObjectItem
}

func NewMimicryObjectPreviewMessage() *MimicryObjectPreviewMessage {
	return &MimicryObjectPreviewMessage{MessageBase: MessageBase{MessageType_: "MimicryObjectPreviewMessage", id_: 2255}}
}
func (m *MimicryObjectPreviewMessage) Deserialize(input *DataWrapper) {
	m.Result = NewObjectItem()
	m.Result.Deserialize(input)
}

func (m *MimicryObjectPreviewMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MonsterBoosts struct {
	MessageBase
	Id        int
	XpBoost   int
	DropBoost int
}

func NewMonsterBoosts() *MonsterBoosts {
	return &MonsterBoosts{MessageBase: MessageBase{MessageType_: "MonsterBoosts", id_: 1084}}
}
func (m *MonsterBoosts) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.XpBoost = input.ReadVarUhShort()
	m.DropBoost = input.ReadVarUhShort()
}

func (m *MonsterBoosts) IsDeserializeFunctionComplete() bool {
	return true
}

type MonsterInGroupInformations struct {
	MessageBase
	MonsterInGroupLightInformations
	Look *EntityLook
}

func NewMonsterInGroupInformations() *MonsterInGroupInformations {
	return &MonsterInGroupInformations{MessageBase: MessageBase{MessageType_: "MonsterInGroupInformations", id_: 7023}}
}
func (m *MonsterInGroupInformations) Deserialize(input *DataWrapper) {
	m.MonsterInGroupLightInformations.Deserialize(input)
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
}

func (m *MonsterInGroupInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type MonsterInGroupLightInformations struct {
	MessageBase
	GenericId int32
	Grade     int8
	Level     int16
}

func NewMonsterInGroupLightInformations() *MonsterInGroupLightInformations {
	return &MonsterInGroupLightInformations{MessageBase: MessageBase{MessageType_: "MonsterInGroupLightInformations", id_: 1537}}
}
func (m *MonsterInGroupLightInformations) Deserialize(input *DataWrapper) {
	m.GenericId = input.ReadInt()
	m.Grade = input.ReadByte()
	m.Level = input.ReadShort()
}

func (m *MonsterInGroupLightInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type MoodSmileyRequestMessage struct {
	MessageBase
	SmileyId int
}

func NewMoodSmileyRequestMessage() *MoodSmileyRequestMessage {
	return &MoodSmileyRequestMessage{MessageBase: MessageBase{MessageType_: "MoodSmileyRequestMessage", id_: 6420}}
}
func (m *MoodSmileyRequestMessage) Deserialize(input *DataWrapper) {
	m.SmileyId = input.ReadVarUhShort()
}

func (m *MoodSmileyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MoodSmileyResultMessage struct {
	MessageBase
	ResultCode int8
	SmileyId   int
}

func NewMoodSmileyResultMessage() *MoodSmileyResultMessage {
	return &MoodSmileyResultMessage{MessageBase: MessageBase{MessageType_: "MoodSmileyResultMessage", id_: 1383}}
}
func (m *MoodSmileyResultMessage) Deserialize(input *DataWrapper) {
	m.ResultCode = input.ReadByte()
	m.SmileyId = input.ReadVarUhShort()
}

func (m *MoodSmileyResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MoodSmileyUpdateMessage struct {
	MessageBase
	AccountId int32
	PlayerId  int64
	SmileyId  int
}

func NewMoodSmileyUpdateMessage() *MoodSmileyUpdateMessage {
	return &MoodSmileyUpdateMessage{MessageBase: MessageBase{MessageType_: "MoodSmileyUpdateMessage", id_: 2215}}
}
func (m *MoodSmileyUpdateMessage) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
	m.PlayerId = input.ReadVarUhLong()
	m.SmileyId = input.ReadVarUhShort()
}

func (m *MoodSmileyUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountClientData struct {
	MessageBase
	Id                     float64
	Model                  int
	Ancestor               *Vector[int32]
	Behaviors              *Vector[int32]
	Name                   string
	Sex                    bool
	OwnerId                int32
	Experience             int64
	ExperienceForLevel     int64
	ExperienceForNextLevel float64
	Level                  int8
	IsRideable             bool
	MaxPods                int
	IsWild                 bool
	Stamina                int
	StaminaMax             int
	Maturity               int
	MaturityForAdult       int
	Energy                 int
	EnergyMax              int
	Serenity               int32
	AggressivityMax        int32
	SerenityMax            int
	Love                   int
	LoveMax                int
	FecondationTime        int32
	IsFecondationReady     bool
	BoostLimiter           int32
	BoostMax               float64
	ReproductionCount      int32
	ReproductionCountMax   int
	HarnessGID             int
	UseHarnessColors       bool
	EffectList             *Vector[ObjectEffectInteger]
}

func NewMountClientData() *MountClientData {
	return &MountClientData{MessageBase: MessageBase{MessageType_: "MountClientData", id_: 4446}}
}
func (m *MountClientData) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.Sex = (byteBox0>>0)&1 != 0
	m.IsRideable = (byteBox0>>1)&1 != 0
	m.IsWild = (byteBox0>>2)&1 != 0
	m.IsFecondationReady = (byteBox0>>3)&1 != 0
	m.UseHarnessColors = (byteBox0>>4)&1 != 0
	m.Id = input.ReadDouble()
	m.Model = input.ReadVarUhInt()
	m.Ancestor = NewVector[int32]()
	ancestorLen := int(input.ReadShort())
	for i := 0; i < ancestorLen; i++ {
		val := input.ReadInt()
		m.Ancestor.Push(&val)
	}
	m.Behaviors = NewVector[int32]()
	behaviorsLen := int(input.ReadShort())
	for i := 0; i < behaviorsLen; i++ {
		val := input.ReadInt()
		m.Behaviors.Push(&val)
	}
	m.Name = input.ReadUTF()
	m.OwnerId = input.ReadInt()
	m.Experience = input.ReadVarUhLong()
	m.ExperienceForLevel = input.ReadVarUhLong()
	m.ExperienceForNextLevel = input.ReadDouble()
	m.Level = input.ReadByte()
	m.MaxPods = input.ReadVarUhInt()
	m.Stamina = input.ReadVarUhInt()
	m.StaminaMax = input.ReadVarUhInt()
	m.Maturity = input.ReadVarUhInt()
	m.MaturityForAdult = input.ReadVarUhInt()
	m.Energy = input.ReadVarUhInt()
	m.EnergyMax = input.ReadVarUhInt()
	m.Serenity = input.ReadInt()
	m.AggressivityMax = input.ReadInt()
	m.SerenityMax = input.ReadVarUhInt()
	m.Love = input.ReadVarUhInt()
	m.LoveMax = input.ReadVarUhInt()
	m.FecondationTime = input.ReadInt()
	m.BoostLimiter = input.ReadInt()
	m.BoostMax = input.ReadDouble()
	m.ReproductionCount = input.ReadInt()
	m.ReproductionCountMax = input.ReadVarUhInt()
	m.HarnessGID = input.ReadVarUhInt()
	m.EffectList = NewVector[ObjectEffectInteger]()
	effectListLen := int(input.ReadShort())
	for i := 0; i < effectListLen; i++ {
		ObjectEffectInteger := NewObjectEffectInteger()
		ObjectEffectInteger.Deserialize(input)
		m.EffectList.Push(ObjectEffectInteger)
	}
}

func (m *MountClientData) IsDeserializeFunctionComplete() bool {
	return true
}

type MountDataErrorMessage struct {
	MessageBase
	Reason int8
}

func NewMountDataErrorMessage() *MountDataErrorMessage {
	return &MountDataErrorMessage{MessageBase: MessageBase{MessageType_: "MountDataErrorMessage", id_: 2483}}
}
func (m *MountDataErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *MountDataErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountDataMessage struct {
	MessageBase
	MountData *MountClientData
}

func NewMountDataMessage() *MountDataMessage {
	return &MountDataMessage{MessageBase: MessageBase{MessageType_: "MountDataMessage", id_: 137}}
}
func (m *MountDataMessage) Deserialize(input *DataWrapper) {
	m.MountData = NewMountClientData()
	m.MountData.Deserialize(input)
}

func (m *MountDataMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountEmoteIconUsedOkMessage struct {
	MessageBase
	MountId      int
	ReactionType int8
}

func NewMountEmoteIconUsedOkMessage() *MountEmoteIconUsedOkMessage {
	return &MountEmoteIconUsedOkMessage{MessageBase: MessageBase{MessageType_: "MountEmoteIconUsedOkMessage", id_: 3490}}
}
func (m *MountEmoteIconUsedOkMessage) Deserialize(input *DataWrapper) {
	m.MountId = input.ReadVarInt()
	m.ReactionType = input.ReadByte()
}

func (m *MountEmoteIconUsedOkMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountEquipedErrorMessage struct {
	MessageBase
	ErrorType int8
}

func NewMountEquipedErrorMessage() *MountEquipedErrorMessage {
	return &MountEquipedErrorMessage{MessageBase: MessageBase{MessageType_: "MountEquipedErrorMessage", id_: 5171}}
}
func (m *MountEquipedErrorMessage) Deserialize(input *DataWrapper) {
	m.ErrorType = input.ReadByte()
}

func (m *MountEquipedErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountFeedRequestMessage struct {
	MessageBase
	MountUid      int
	MountLocation int8
	MountFoodUid  int
	Quantity      int
}

func NewMountFeedRequestMessage() *MountFeedRequestMessage {
	return &MountFeedRequestMessage{MessageBase: MessageBase{MessageType_: "MountFeedRequestMessage", id_: 3038}}
}
func (m *MountFeedRequestMessage) Deserialize(input *DataWrapper) {
	m.MountUid = input.ReadVarUhInt()
	m.MountLocation = input.ReadByte()
	m.MountFoodUid = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *MountFeedRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountHarnessColorsUpdateRequestMessage struct {
	MessageBase
	UseHarnessColors bool
}

func NewMountHarnessColorsUpdateRequestMessage() *MountHarnessColorsUpdateRequestMessage {
	return &MountHarnessColorsUpdateRequestMessage{MessageBase: MessageBase{MessageType_: "MountHarnessColorsUpdateRequestMessage", id_: 4391}}
}
func (m *MountHarnessColorsUpdateRequestMessage) Deserialize(input *DataWrapper) {
	m.UseHarnessColors = input.ReadBoolean()
}

func (m *MountHarnessColorsUpdateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountHarnessDissociateRequestMessage struct {
	MessageBase
}

func NewMountHarnessDissociateRequestMessage() *MountHarnessDissociateRequestMessage {
	return &MountHarnessDissociateRequestMessage{MessageBase: MessageBase{MessageType_: "MountHarnessDissociateRequestMessage", id_: 7150}}
}
func (m *MountHarnessDissociateRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *MountHarnessDissociateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountInformationInPaddockRequestMessage struct {
	MessageBase
	MapRideId int
}

func NewMountInformationInPaddockRequestMessage() *MountInformationInPaddockRequestMessage {
	return &MountInformationInPaddockRequestMessage{MessageBase: MessageBase{MessageType_: "MountInformationInPaddockRequestMessage", id_: 7545}}
}
func (m *MountInformationInPaddockRequestMessage) Deserialize(input *DataWrapper) {
	m.MapRideId = input.ReadVarInt()
}

func (m *MountInformationInPaddockRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountInformationRequestMessage struct {
	MessageBase
	Id   float64
	Time float64
}

func NewMountInformationRequestMessage() *MountInformationRequestMessage {
	return &MountInformationRequestMessage{MessageBase: MessageBase{MessageType_: "MountInformationRequestMessage", id_: 826}}
}
func (m *MountInformationRequestMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadDouble()
	m.Time = input.ReadDouble()
}

func (m *MountInformationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountInformationsForPaddock struct {
	MessageBase
	ModelId   int
	Name      string
	OwnerName string
}

func NewMountInformationsForPaddock() *MountInformationsForPaddock {
	return &MountInformationsForPaddock{MessageBase: MessageBase{MessageType_: "MountInformationsForPaddock", id_: 4252}}
}
func (m *MountInformationsForPaddock) Deserialize(input *DataWrapper) {
	m.ModelId = input.ReadVarUhShort()
	m.Name = input.ReadUTF()
	m.OwnerName = input.ReadUTF()
}

func (m *MountInformationsForPaddock) IsDeserializeFunctionComplete() bool {
	return true
}

type MountReleaseRequestMessage struct {
	MessageBase
}

func NewMountReleaseRequestMessage() *MountReleaseRequestMessage {
	return &MountReleaseRequestMessage{MessageBase: MessageBase{MessageType_: "MountReleaseRequestMessage", id_: 1227}}
}
func (m *MountReleaseRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *MountReleaseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountReleasedMessage struct {
	MessageBase
	MountId int
}

func NewMountReleasedMessage() *MountReleasedMessage {
	return &MountReleasedMessage{MessageBase: MessageBase{MessageType_: "MountReleasedMessage", id_: 7843}}
}
func (m *MountReleasedMessage) Deserialize(input *DataWrapper) {
	m.MountId = input.ReadVarInt()
}

func (m *MountReleasedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountRenameRequestMessage struct {
	MessageBase
	Name    string
	MountId int
}

func NewMountRenameRequestMessage() *MountRenameRequestMessage {
	return &MountRenameRequestMessage{MessageBase: MessageBase{MessageType_: "MountRenameRequestMessage", id_: 4115}}
}
func (m *MountRenameRequestMessage) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.MountId = input.ReadVarInt()
}

func (m *MountRenameRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountRenamedMessage struct {
	MessageBase
	MountId int
	Name    string
}

func NewMountRenamedMessage() *MountRenamedMessage {
	return &MountRenamedMessage{MessageBase: MessageBase{MessageType_: "MountRenamedMessage", id_: 2688}}
}
func (m *MountRenamedMessage) Deserialize(input *DataWrapper) {
	m.MountId = input.ReadVarInt()
	m.Name = input.ReadUTF()
}

func (m *MountRenamedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountRidingMessage struct {
	MessageBase
	IsRiding    bool
	IsAutopilot bool
}

func NewMountRidingMessage() *MountRidingMessage {
	return &MountRidingMessage{MessageBase: MessageBase{MessageType_: "MountRidingMessage", id_: 3880}}
}
func (m *MountRidingMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.IsRiding = (byteBox0>>0)&1 != 0
	m.IsAutopilot = (byteBox0>>1)&1 != 0
}

func (m *MountRidingMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountSetMessage struct {
	MessageBase
	MountData *MountClientData
}

func NewMountSetMessage() *MountSetMessage {
	return &MountSetMessage{MessageBase: MessageBase{MessageType_: "MountSetMessage", id_: 110}}
}
func (m *MountSetMessage) Deserialize(input *DataWrapper) {
	m.MountData = NewMountClientData()
	m.MountData.Deserialize(input)
}

func (m *MountSetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountSetXpRatioRequestMessage struct {
	MessageBase
	XpRatio int8
}

func NewMountSetXpRatioRequestMessage() *MountSetXpRatioRequestMessage {
	return &MountSetXpRatioRequestMessage{MessageBase: MessageBase{MessageType_: "MountSetXpRatioRequestMessage", id_: 4347}}
}
func (m *MountSetXpRatioRequestMessage) Deserialize(input *DataWrapper) {
	m.XpRatio = input.ReadByte()
}

func (m *MountSetXpRatioRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountSterilizeRequestMessage struct {
	MessageBase
}

func NewMountSterilizeRequestMessage() *MountSterilizeRequestMessage {
	return &MountSterilizeRequestMessage{MessageBase: MessageBase{MessageType_: "MountSterilizeRequestMessage", id_: 658}}
}
func (m *MountSterilizeRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *MountSterilizeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountSterilizedMessage struct {
	MessageBase
	MountId int
}

func NewMountSterilizedMessage() *MountSterilizedMessage {
	return &MountSterilizedMessage{MessageBase: MessageBase{MessageType_: "MountSterilizedMessage", id_: 9430}}
}
func (m *MountSterilizedMessage) Deserialize(input *DataWrapper) {
	m.MountId = input.ReadVarInt()
}

func (m *MountSterilizedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountToggleRidingRequestMessage struct {
	MessageBase
}

func NewMountToggleRidingRequestMessage() *MountToggleRidingRequestMessage {
	return &MountToggleRidingRequestMessage{MessageBase: MessageBase{MessageType_: "MountToggleRidingRequestMessage", id_: 1106}}
}
func (m *MountToggleRidingRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *MountToggleRidingRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountUnSetMessage struct {
	MessageBase
}

func NewMountUnSetMessage() *MountUnSetMessage {
	return &MountUnSetMessage{MessageBase: MessageBase{MessageType_: "MountUnSetMessage", id_: 8582}}
}
func (m *MountUnSetMessage) Deserialize(input *DataWrapper) {
}

func (m *MountUnSetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MountXpRatioMessage struct {
	MessageBase
	Ratio int8
}

func NewMountXpRatioMessage() *MountXpRatioMessage {
	return &MountXpRatioMessage{MessageBase: MessageBase{MessageType_: "MountXpRatioMessage", id_: 9050}}
}
func (m *MountXpRatioMessage) Deserialize(input *DataWrapper) {
	m.Ratio = input.ReadByte()
}

func (m *MountXpRatioMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MoveTaxCollectorOrderedSpellMessage struct {
	MessageBase
	TaxCollectorId float64
	MovedFrom      int8
	MovedTo        int8
}

func NewMoveTaxCollectorOrderedSpellMessage() *MoveTaxCollectorOrderedSpellMessage {
	return &MoveTaxCollectorOrderedSpellMessage{MessageBase: MessageBase{MessageType_: "MoveTaxCollectorOrderedSpellMessage", id_: 8918}}
}
func (m *MoveTaxCollectorOrderedSpellMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
	m.MovedFrom = input.ReadByte()
	m.MovedTo = input.ReadByte()
}

func (m *MoveTaxCollectorOrderedSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MoveTaxCollectorPresetSpellMessage struct {
	MessageBase
	PresetId  *Uuid
	MovedFrom int8
	MovedTo   int8
}

func NewMoveTaxCollectorPresetSpellMessage() *MoveTaxCollectorPresetSpellMessage {
	return &MoveTaxCollectorPresetSpellMessage{MessageBase: MessageBase{MessageType_: "MoveTaxCollectorPresetSpellMessage", id_: 6548}}
}
func (m *MoveTaxCollectorPresetSpellMessage) Deserialize(input *DataWrapper) {
	m.PresetId = NewUuid()
	m.PresetId.Deserialize(input)
	m.MovedFrom = input.ReadByte()
	m.MovedTo = input.ReadByte()
}

func (m *MoveTaxCollectorPresetSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type MultiTabStorageMessage struct {
	MessageBase
	Tabs *Vector[StorageTabInformation]
}

func NewMultiTabStorageMessage() *MultiTabStorageMessage {
	return &MultiTabStorageMessage{MessageBase: MessageBase{MessageType_: "MultiTabStorageMessage", id_: 7356}}
}
func (m *MultiTabStorageMessage) Deserialize(input *DataWrapper) {
	m.Tabs = NewVector[StorageTabInformation]()
	tabsLen := int(input.ReadShort())
	for i := 0; i < tabsLen; i++ {
		StorageTabInformation := NewStorageTabInformation()
		StorageTabInformation.Deserialize(input)
		m.Tabs.Push(StorageTabInformation)
	}
}

func (m *MultiTabStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NamedPartyTeam struct {
	MessageBase
	TeamId    int8
	PartyName string
}

func NewNamedPartyTeam() *NamedPartyTeam {
	return &NamedPartyTeam{MessageBase: MessageBase{MessageType_: "NamedPartyTeam", id_: 9179}}
}
func (m *NamedPartyTeam) Deserialize(input *DataWrapper) {
	m.TeamId = input.ReadByte()
	m.PartyName = input.ReadUTF()
}

func (m *NamedPartyTeam) IsDeserializeFunctionComplete() bool {
	return true
}

type NamedPartyTeamWithOutcome struct {
	MessageBase
	Team    *NamedPartyTeam
	Outcome int
}

func NewNamedPartyTeamWithOutcome() *NamedPartyTeamWithOutcome {
	return &NamedPartyTeamWithOutcome{MessageBase: MessageBase{MessageType_: "NamedPartyTeamWithOutcome", id_: 2171}}
}
func (m *NamedPartyTeamWithOutcome) Deserialize(input *DataWrapper) {
	m.Team = NewNamedPartyTeam()
	m.Team.Deserialize(input)
	m.Outcome = input.ReadVarUhShort()
}

func (m *NamedPartyTeamWithOutcome) IsDeserializeFunctionComplete() bool {
	return true
}

type NetworkDataContainerMessage struct {
	MessageBase
}

func NewNetworkDataContainerMessage() *NetworkDataContainerMessage {
	return &NetworkDataContainerMessage{MessageBase: MessageBase{MessageType_: "NetworkDataContainerMessage", id_: 2}}
}
func (m *NetworkDataContainerMessage) Deserialize(input *DataWrapper) {
}

func (m *NetworkDataContainerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NicknameAcceptedMessage struct {
	MessageBase
}

func NewNicknameAcceptedMessage() *NicknameAcceptedMessage {
	return &NicknameAcceptedMessage{MessageBase: MessageBase{MessageType_: "NicknameAcceptedMessage", id_: 8083}}
}
func (m *NicknameAcceptedMessage) Deserialize(input *DataWrapper) {
}

func (m *NicknameAcceptedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NicknameChoiceRequestMessage struct {
	MessageBase
	Nickname string
}

func NewNicknameChoiceRequestMessage() *NicknameChoiceRequestMessage {
	return &NicknameChoiceRequestMessage{MessageBase: MessageBase{MessageType_: "NicknameChoiceRequestMessage", id_: 4608}}
}
func (m *NicknameChoiceRequestMessage) Deserialize(input *DataWrapper) {
	m.Nickname = input.ReadUTF()
}

func (m *NicknameChoiceRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NicknameRefusedMessage struct {
	MessageBase
	Reason int8
}

func NewNicknameRefusedMessage() *NicknameRefusedMessage {
	return &NicknameRefusedMessage{MessageBase: MessageBase{MessageType_: "NicknameRefusedMessage", id_: 4482}}
}
func (m *NicknameRefusedMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *NicknameRefusedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NicknameRegistrationMessage struct {
	MessageBase
}

func NewNicknameRegistrationMessage() *NicknameRegistrationMessage {
	return &NicknameRegistrationMessage{MessageBase: MessageBase{MessageType_: "NicknameRegistrationMessage", id_: 8872}}
}
func (m *NicknameRegistrationMessage) Deserialize(input *DataWrapper) {
}

func (m *NicknameRegistrationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NotificationByServerMessage struct {
	MessageBase
	Id         int
	Parameters *Vector[string]
	ForceOpen  bool
}

func NewNotificationByServerMessage() *NotificationByServerMessage {
	return &NotificationByServerMessage{MessageBase: MessageBase{MessageType_: "NotificationByServerMessage", id_: 3884}}
}
func (m *NotificationByServerMessage) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhShort()
	m.Parameters = NewVector[string]()
	parametersLen := int(input.ReadShort())
	for i := 0; i < parametersLen; i++ {
		val := input.ReadUTF()
		m.Parameters.Push(&val)
	}
	m.ForceOpen = input.ReadBoolean()
}

func (m *NotificationByServerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NotificationListMessage struct {
	MessageBase
	Flags *Vector[int]
}

func NewNotificationListMessage() *NotificationListMessage {
	return &NotificationListMessage{MessageBase: MessageBase{MessageType_: "NotificationListMessage", id_: 7443}}
}
func (m *NotificationListMessage) Deserialize(input *DataWrapper) {
	m.Flags = NewVector[int]()
	flagsLen := int(input.ReadShort())
	for i := 0; i < flagsLen; i++ {
		val := input.ReadVarInt()
		m.Flags.Push(&val)
	}
}

func (m *NotificationListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NotificationResetMessage struct {
	MessageBase
}

func NewNotificationResetMessage() *NotificationResetMessage {
	return &NotificationResetMessage{MessageBase: MessageBase{MessageType_: "NotificationResetMessage", id_: 4503}}
}
func (m *NotificationResetMessage) Deserialize(input *DataWrapper) {
}

func (m *NotificationResetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NotificationUpdateFlagMessage struct {
	MessageBase
	Index int
}

func NewNotificationUpdateFlagMessage() *NotificationUpdateFlagMessage {
	return &NotificationUpdateFlagMessage{MessageBase: MessageBase{MessageType_: "NotificationUpdateFlagMessage", id_: 8455}}
}
func (m *NotificationUpdateFlagMessage) Deserialize(input *DataWrapper) {
	m.Index = input.ReadVarUhShort()
}

func (m *NotificationUpdateFlagMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NpcDialogCreationMessage struct {
	MessageBase
	MapId float64
	NpcId int32
}

func NewNpcDialogCreationMessage() *NpcDialogCreationMessage {
	return &NpcDialogCreationMessage{MessageBase: MessageBase{MessageType_: "NpcDialogCreationMessage", id_: 3289}}
}
func (m *NpcDialogCreationMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.NpcId = input.ReadInt()
}

func (m *NpcDialogCreationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NpcDialogQuestionMessage struct {
	MessageBase
	MessageId      int
	DialogParams   *Vector[string]
	VisibleReplies *Vector[int]
}

func NewNpcDialogQuestionMessage() *NpcDialogQuestionMessage {
	return &NpcDialogQuestionMessage{MessageBase: MessageBase{MessageType_: "NpcDialogQuestionMessage", id_: 5481}}
}
func (m *NpcDialogQuestionMessage) Deserialize(input *DataWrapper) {
	m.MessageId = input.ReadVarUhInt()
	m.DialogParams = NewVector[string]()
	dialogParamsLen := int(input.ReadShort())
	for i := 0; i < dialogParamsLen; i++ {
		val := input.ReadUTF()
		m.DialogParams.Push(&val)
	}
	m.VisibleReplies = NewVector[int]()
	visibleRepliesLen := int(input.ReadShort())
	for i := 0; i < visibleRepliesLen; i++ {
		val := input.ReadVarInt()
		m.VisibleReplies.Push(&val)
	}
}

func (m *NpcDialogQuestionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NpcDialogReplyMessage struct {
	MessageBase
	ReplyId int
}

func NewNpcDialogReplyMessage() *NpcDialogReplyMessage {
	return &NpcDialogReplyMessage{MessageBase: MessageBase{MessageType_: "NpcDialogReplyMessage", id_: 4752}}
}
func (m *NpcDialogReplyMessage) Deserialize(input *DataWrapper) {
	m.ReplyId = input.ReadVarUhInt()
}

func (m *NpcDialogReplyMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NpcGenericActionFailureMessage struct {
	MessageBase
}

func NewNpcGenericActionFailureMessage() *NpcGenericActionFailureMessage {
	return &NpcGenericActionFailureMessage{MessageBase: MessageBase{MessageType_: "NpcGenericActionFailureMessage", id_: 5877}}
}
func (m *NpcGenericActionFailureMessage) Deserialize(input *DataWrapper) {
}

func (m *NpcGenericActionFailureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NpcGenericActionRequestMessage struct {
	MessageBase
	NpcId       int32
	NpcActionId int8
	NpcMapId    float64
}

func NewNpcGenericActionRequestMessage() *NpcGenericActionRequestMessage {
	return &NpcGenericActionRequestMessage{MessageBase: MessageBase{MessageType_: "NpcGenericActionRequestMessage", id_: 6670}}
}
func (m *NpcGenericActionRequestMessage) Deserialize(input *DataWrapper) {
	m.NpcId = input.ReadInt()
	m.NpcActionId = input.ReadByte()
	m.NpcMapId = input.ReadDouble()
}

func (m *NpcGenericActionRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NuggetsBeneficiary struct {
	MessageBase
	BeneficiaryPlayerId int64
	NuggetsQuantity     int32
}

func NewNuggetsBeneficiary() *NuggetsBeneficiary {
	return &NuggetsBeneficiary{MessageBase: MessageBase{MessageType_: "NuggetsBeneficiary", id_: 7825}}
}
func (m *NuggetsBeneficiary) Deserialize(input *DataWrapper) {
	m.BeneficiaryPlayerId = input.ReadVarUhLong()
	m.NuggetsQuantity = input.ReadInt()
}

func (m *NuggetsBeneficiary) IsDeserializeFunctionComplete() bool {
	return true
}

type NuggetsDistributionMessage struct {
	MessageBase
	Beneficiaries *Vector[NuggetsBeneficiary]
}

func NewNuggetsDistributionMessage() *NuggetsDistributionMessage {
	return &NuggetsDistributionMessage{MessageBase: MessageBase{MessageType_: "NuggetsDistributionMessage", id_: 3417}}
}
func (m *NuggetsDistributionMessage) Deserialize(input *DataWrapper) {
	m.Beneficiaries = NewVector[NuggetsBeneficiary]()
	beneficiariesLen := int(input.ReadShort())
	for i := 0; i < beneficiariesLen; i++ {
		NuggetsBeneficiary := NewNuggetsBeneficiary()
		NuggetsBeneficiary.Deserialize(input)
		m.Beneficiaries.Push(NuggetsBeneficiary)
	}
}

func (m *NuggetsDistributionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NuggetsInformationMessage struct {
	MessageBase
	NuggetsQuantity int32
}

func NewNuggetsInformationMessage() *NuggetsInformationMessage {
	return &NuggetsInformationMessage{MessageBase: MessageBase{MessageType_: "NuggetsInformationMessage", id_: 5214}}
}
func (m *NuggetsInformationMessage) Deserialize(input *DataWrapper) {
	m.NuggetsQuantity = input.ReadInt()
}

func (m *NuggetsInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NumericWhoIsMessage struct {
	MessageBase
	PlayerId  int64
	AccountId int32
}

func NewNumericWhoIsMessage() *NumericWhoIsMessage {
	return &NumericWhoIsMessage{MessageBase: MessageBase{MessageType_: "NumericWhoIsMessage", id_: 2693}}
}
func (m *NumericWhoIsMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
	m.AccountId = input.ReadInt()
}

func (m *NumericWhoIsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type NumericWhoIsRequestMessage struct {
	MessageBase
	PlayerId int64
}

func NewNumericWhoIsRequestMessage() *NumericWhoIsRequestMessage {
	return &NumericWhoIsRequestMessage{MessageBase: MessageBase{MessageType_: "NumericWhoIsRequestMessage", id_: 2359}}
}
func (m *NumericWhoIsRequestMessage) Deserialize(input *DataWrapper) {
	m.PlayerId = input.ReadVarUhLong()
}

func (m *NumericWhoIsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectAddedMessage struct {
	MessageBase
	Object *ObjectItem
	Origin int8
}

func NewObjectAddedMessage() *ObjectAddedMessage {
	return &ObjectAddedMessage{MessageBase: MessageBase{MessageType_: "ObjectAddedMessage", id_: 6866}}
}
func (m *ObjectAddedMessage) Deserialize(input *DataWrapper) {
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
	m.Origin = input.ReadByte()
}

func (m *ObjectAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectAveragePricesErrorMessage struct {
	MessageBase
}

func NewObjectAveragePricesErrorMessage() *ObjectAveragePricesErrorMessage {
	return &ObjectAveragePricesErrorMessage{MessageBase: MessageBase{MessageType_: "ObjectAveragePricesErrorMessage", id_: 5074}}
}
func (m *ObjectAveragePricesErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *ObjectAveragePricesErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectAveragePricesGetMessage struct {
	MessageBase
}

func NewObjectAveragePricesGetMessage() *ObjectAveragePricesGetMessage {
	return &ObjectAveragePricesGetMessage{MessageBase: MessageBase{MessageType_: "ObjectAveragePricesGetMessage", id_: 2730}}
}
func (m *ObjectAveragePricesGetMessage) Deserialize(input *DataWrapper) {
}

func (m *ObjectAveragePricesGetMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectAveragePricesMessage struct {
	MessageBase
	Ids       *Vector[int]
	AvgPrices *Vector[int64]
}

func NewObjectAveragePricesMessage() *ObjectAveragePricesMessage {
	return &ObjectAveragePricesMessage{MessageBase: MessageBase{MessageType_: "ObjectAveragePricesMessage", id_: 2729}}
}
func (m *ObjectAveragePricesMessage) Deserialize(input *DataWrapper) {
	m.Ids = NewVector[int]()
	idsLen := int(input.ReadShort())
	for i := 0; i < idsLen; i++ {
		val := input.ReadVarInt()
		m.Ids.Push(&val)
	}
	m.AvgPrices = NewVector[int64]()
	avgPricesLen := int(input.ReadShort())
	for i := 0; i < avgPricesLen; i++ {
		val := input.ReadVarLong()
		m.AvgPrices.Push(&val)
	}
}

func (m *ObjectAveragePricesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectDeleteMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
}

func NewObjectDeleteMessage() *ObjectDeleteMessage {
	return &ObjectDeleteMessage{MessageBase: MessageBase{MessageType_: "ObjectDeleteMessage", id_: 5997}}
}
func (m *ObjectDeleteMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectDeleteMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectDeletedMessage struct {
	MessageBase
	ObjectUID int
}

func NewObjectDeletedMessage() *ObjectDeletedMessage {
	return &ObjectDeletedMessage{MessageBase: MessageBase{MessageType_: "ObjectDeletedMessage", id_: 6668}}
}
func (m *ObjectDeletedMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
}

func (m *ObjectDeletedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectDropMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
}

func NewObjectDropMessage() *ObjectDropMessage {
	return &ObjectDropMessage{MessageBase: MessageBase{MessageType_: "ObjectDropMessage", id_: 2531}}
}
func (m *ObjectDropMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectDropMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectI interface {
	Deserialize(input *DataWrapper)
}

type ObjectEffect struct {
	MessageBase
	ActionId int
}

func NewObjectEffect() *ObjectEffect {
	return &ObjectEffect{MessageBase: MessageBase{MessageType_: "ObjectEffect", id_: 7605}}
}
func (m *ObjectEffect) Deserialize(input *DataWrapper) {
	m.ActionId = input.ReadVarUhShort()
}

func (m *ObjectEffect) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectCreature struct {
	MessageBase
	ObjectEffect
	MonsterFamilyId int
}

func NewObjectEffectCreature() *ObjectEffectCreature {
	return &ObjectEffectCreature{MessageBase: MessageBase{MessageType_: "ObjectEffectCreature", id_: 3987}}
}
func (m *ObjectEffectCreature) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.MonsterFamilyId = input.ReadVarUhShort()
}

func (m *ObjectEffectCreature) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectDate struct {
	MessageBase
	ObjectEffect
	Year   int
	Month  int8
	Day    int8
	Hour   int8
	Minute int8
}

func NewObjectEffectDate() *ObjectEffectDate {
	return &ObjectEffectDate{MessageBase: MessageBase{MessageType_: "ObjectEffectDate", id_: 3435}}
}
func (m *ObjectEffectDate) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.Year = input.ReadVarUhShort()
	m.Month = input.ReadByte()
	m.Day = input.ReadByte()
	m.Hour = input.ReadByte()
	m.Minute = input.ReadByte()
}

func (m *ObjectEffectDate) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectDice struct {
	MessageBase
	ObjectEffect
	DiceNum   int
	DiceSide  int
	DiceConst int
}

func NewObjectEffectDice() *ObjectEffectDice {
	return &ObjectEffectDice{MessageBase: MessageBase{MessageType_: "ObjectEffectDice", id_: 670}}
}
func (m *ObjectEffectDice) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.DiceNum = input.ReadVarUhInt()
	m.DiceSide = input.ReadVarUhInt()
	m.DiceConst = input.ReadVarUhInt()
}

func (m *ObjectEffectDice) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectDuration struct {
	MessageBase
	ObjectEffect
	Days    int
	Hours   int8
	Minutes int8
}

func NewObjectEffectDuration() *ObjectEffectDuration {
	return &ObjectEffectDuration{MessageBase: MessageBase{MessageType_: "ObjectEffectDuration", id_: 7031}}
}
func (m *ObjectEffectDuration) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.Days = input.ReadVarUhShort()
	m.Hours = input.ReadByte()
	m.Minutes = input.ReadByte()
}

func (m *ObjectEffectDuration) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectInteger struct {
	MessageBase
	ObjectEffect
	Value int
}

func NewObjectEffectInteger() *ObjectEffectInteger {
	return &ObjectEffectInteger{MessageBase: MessageBase{MessageType_: "ObjectEffectInteger", id_: 3930}}
}
func (m *ObjectEffectInteger) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.Value = input.ReadVarUhInt()
}

func (m *ObjectEffectInteger) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectLadder struct {
	MessageBase
	ObjectEffectCreature
	MonsterCount int
}

func NewObjectEffectLadder() *ObjectEffectLadder {
	return &ObjectEffectLadder{MessageBase: MessageBase{MessageType_: "ObjectEffectLadder", id_: 5489}}
}
func (m *ObjectEffectLadder) Deserialize(input *DataWrapper) {
	m.ObjectEffectCreature.Deserialize(input)
	m.MonsterCount = input.ReadVarUhInt()
}

func (m *ObjectEffectLadder) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectMinMax struct {
	MessageBase
	ObjectEffect
	Min int
	Max int
}

func NewObjectEffectMinMax() *ObjectEffectMinMax {
	return &ObjectEffectMinMax{MessageBase: MessageBase{MessageType_: "ObjectEffectMinMax", id_: 843}}
}
func (m *ObjectEffectMinMax) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.Min = input.ReadVarUhInt()
	m.Max = input.ReadVarUhInt()
}

func (m *ObjectEffectMinMax) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectMount struct {
	MessageBase
	ObjectEffect
	Id                   int64
	ExpirationDate       int64
	Model                int
	Name                 string
	Owner                string
	Level                int8
	Sex                  bool
	IsRideable           bool
	IsFeconded           bool
	IsFecondationReady   bool
	ReproductionCount    int
	ReproductionCountMax int
	Effects              *Vector[ObjectEffectInteger]
	Capacities           *Vector[int]
}

func NewObjectEffectMount() *ObjectEffectMount {
	return &ObjectEffectMount{MessageBase: MessageBase{MessageType_: "ObjectEffectMount", id_: 3353}}
}
func (m *ObjectEffectMount) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.Sex = (byteBox0>>0)&1 != 0
	m.IsRideable = (byteBox0>>1)&1 != 0
	m.IsFeconded = (byteBox0>>2)&1 != 0
	m.IsFecondationReady = (byteBox0>>3)&1 != 0
	m.Id = input.ReadVarUhLong()
	m.ExpirationDate = input.ReadVarUhLong()
	m.Model = input.ReadVarUhInt()
	m.Name = input.ReadUTF()
	m.Owner = input.ReadUTF()
	m.Level = input.ReadByte()
	m.ReproductionCount = input.ReadVarInt()
	m.ReproductionCountMax = input.ReadVarUhInt()
	m.Effects = NewVector[ObjectEffectInteger]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		ObjectEffectInteger := NewObjectEffectInteger()
		ObjectEffectInteger.Deserialize(input)
		m.Effects.Push(ObjectEffectInteger)
	}
	m.Capacities = NewVector[int]()
	capacitiesLen := int(input.ReadShort())
	for i := 0; i < capacitiesLen; i++ {
		val := input.ReadVarInt()
		m.Capacities.Push(&val)
	}
}

func (m *ObjectEffectMount) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffectString struct {
	MessageBase
	ObjectEffect
	Value string
}

func NewObjectEffectString() *ObjectEffectString {
	return &ObjectEffectString{MessageBase: MessageBase{MessageType_: "ObjectEffectString", id_: 3424}}
}
func (m *ObjectEffectString) Deserialize(input *DataWrapper) {
	m.ObjectEffect.Deserialize(input)
	m.Value = input.ReadUTF()
}

func (m *ObjectEffectString) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectEffects struct {
	MessageBase
	Effects *Vector[ObjectEffectI]
}

func NewObjectEffects() *ObjectEffects {
	return &ObjectEffects{MessageBase: MessageBase{MessageType_: "ObjectEffects", id_: 6602}}
}
func (m *ObjectEffects) Deserialize(input *DataWrapper) {
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
}

func (m *ObjectEffects) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectErrorMessage struct {
	MessageBase
	Reason int8
}

func NewObjectErrorMessage() *ObjectErrorMessage {
	return &ObjectErrorMessage{MessageBase: MessageBase{MessageType_: "ObjectErrorMessage", id_: 2089}}
}
func (m *ObjectErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *ObjectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectFeedMessage struct {
	MessageBase
	ObjectUID int
	Meal      *Vector[ObjectItemQuantity]
}

func NewObjectFeedMessage() *ObjectFeedMessage {
	return &ObjectFeedMessage{MessageBase: MessageBase{MessageType_: "ObjectFeedMessage", id_: 8727}}
}
func (m *ObjectFeedMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Meal = NewVector[ObjectItemQuantity]()
	mealLen := int(input.ReadShort())
	for i := 0; i < mealLen; i++ {
		ObjectItemQuantity := NewObjectItemQuantity()
		ObjectItemQuantity.Deserialize(input)
		m.Meal.Push(ObjectItemQuantity)
	}
}

func (m *ObjectFeedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectGroundAddedMessage struct {
	MessageBase
	CellId    int
	ObjectGID int
}

func NewObjectGroundAddedMessage() *ObjectGroundAddedMessage {
	return &ObjectGroundAddedMessage{MessageBase: MessageBase{MessageType_: "ObjectGroundAddedMessage", id_: 3774}}
}
func (m *ObjectGroundAddedMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *ObjectGroundAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectGroundListAddedMessage struct {
	MessageBase
	Cells        *Vector[int]
	ReferenceIds *Vector[int]
}

func NewObjectGroundListAddedMessage() *ObjectGroundListAddedMessage {
	return &ObjectGroundListAddedMessage{MessageBase: MessageBase{MessageType_: "ObjectGroundListAddedMessage", id_: 7785}}
}
func (m *ObjectGroundListAddedMessage) Deserialize(input *DataWrapper) {
	m.Cells = NewVector[int]()
	cellsLen := int(input.ReadShort())
	for i := 0; i < cellsLen; i++ {
		val := input.ReadVarShort()
		m.Cells.Push(&val)
	}
	m.ReferenceIds = NewVector[int]()
	referenceIdsLen := int(input.ReadShort())
	for i := 0; i < referenceIdsLen; i++ {
		val := input.ReadVarInt()
		m.ReferenceIds.Push(&val)
	}
}

func (m *ObjectGroundListAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectGroundRemovedMessage struct {
	MessageBase
	Cell int
}

func NewObjectGroundRemovedMessage() *ObjectGroundRemovedMessage {
	return &ObjectGroundRemovedMessage{MessageBase: MessageBase{MessageType_: "ObjectGroundRemovedMessage", id_: 5855}}
}
func (m *ObjectGroundRemovedMessage) Deserialize(input *DataWrapper) {
	m.Cell = input.ReadVarUhShort()
}

func (m *ObjectGroundRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectGroundRemovedMultipleMessage struct {
	MessageBase
	Cells *Vector[int]
}

func NewObjectGroundRemovedMultipleMessage() *ObjectGroundRemovedMultipleMessage {
	return &ObjectGroundRemovedMultipleMessage{MessageBase: MessageBase{MessageType_: "ObjectGroundRemovedMultipleMessage", id_: 3407}}
}
func (m *ObjectGroundRemovedMultipleMessage) Deserialize(input *DataWrapper) {
	m.Cells = NewVector[int]()
	cellsLen := int(input.ReadShort())
	for i := 0; i < cellsLen; i++ {
		val := input.ReadVarShort()
		m.Cells.Push(&val)
	}
}

func (m *ObjectGroundRemovedMultipleMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItem struct {
	MessageBase
	Item
	Position  int16
	ObjectGID int
	Effects   *Vector[ObjectEffectI]
	ObjectUID int
	Quantity  int
	Favorite  bool
}

func NewObjectItem() *ObjectItem {
	return &ObjectItem{MessageBase: MessageBase{MessageType_: "ObjectItem", id_: 1685}}
}
func (m *ObjectItem) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.Position = input.ReadShort()
	m.ObjectGID = input.ReadVarUhInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
	m.Favorite = input.ReadBoolean()
}

func (m *ObjectItem) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemGenericQuantity struct {
	MessageBase
	Item
	ObjectGID int
	Quantity  int
}

func NewObjectItemGenericQuantity() *ObjectItemGenericQuantity {
	return &ObjectItemGenericQuantity{MessageBase: MessageBase{MessageType_: "ObjectItemGenericQuantity", id_: 7294}}
}
func (m *ObjectItemGenericQuantity) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.ObjectGID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectItemGenericQuantity) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemInRolePlay struct {
	MessageBase
	CellId    int
	ObjectGID int
}

func NewObjectItemInRolePlay() *ObjectItemInRolePlay {
	return &ObjectItemInRolePlay{MessageBase: MessageBase{MessageType_: "ObjectItemInRolePlay", id_: 1282}}
}
func (m *ObjectItemInRolePlay) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
	m.ObjectGID = input.ReadVarUhInt()
}

func (m *ObjectItemInRolePlay) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemInformationWithQuantity struct {
	MessageBase
	ObjectItemMinimalInformation
	Quantity int
}

func NewObjectItemInformationWithQuantity() *ObjectItemInformationWithQuantity {
	return &ObjectItemInformationWithQuantity{MessageBase: MessageBase{MessageType_: "ObjectItemInformationWithQuantity", id_: 8098}}
}
func (m *ObjectItemInformationWithQuantity) Deserialize(input *DataWrapper) {
	m.ObjectItemMinimalInformation.Deserialize(input)
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectItemInformationWithQuantity) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemMinimalInformation struct {
	MessageBase
	Item
	ObjectGID int
	Effects   *Vector[ObjectEffectI]
}

func NewObjectItemMinimalInformation() *ObjectItemMinimalInformation {
	return &ObjectItemMinimalInformation{MessageBase: MessageBase{MessageType_: "ObjectItemMinimalInformation", id_: 9931}}
}
func (m *ObjectItemMinimalInformation) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.ObjectGID = input.ReadVarUhInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
}

func (m *ObjectItemMinimalInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemNotInContainer struct {
	MessageBase
	Item
	ObjectGID int
	Effects   *Vector[ObjectEffectI]
	ObjectUID int
	Quantity  int
}

func NewObjectItemNotInContainer() *ObjectItemNotInContainer {
	return &ObjectItemNotInContainer{MessageBase: MessageBase{MessageType_: "ObjectItemNotInContainer", id_: 7571}}
}
func (m *ObjectItemNotInContainer) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.ObjectGID = input.ReadVarUhInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectItemNotInContainer) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemQuantity struct {
	MessageBase
	Item
	ObjectUID int
	Quantity  int
}

func NewObjectItemQuantity() *ObjectItemQuantity {
	return &ObjectItemQuantity{MessageBase: MessageBase{MessageType_: "ObjectItemQuantity", id_: 5434}}
}
func (m *ObjectItemQuantity) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectItemQuantity) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemQuantityPriceDateEffects struct {
	MessageBase
	ObjectItemGenericQuantity
	Price   int64
	Effects *ObjectEffects
	Date    int32
}

func NewObjectItemQuantityPriceDateEffects() *ObjectItemQuantityPriceDateEffects {
	return &ObjectItemQuantityPriceDateEffects{MessageBase: MessageBase{MessageType_: "ObjectItemQuantityPriceDateEffects", id_: 3552}}
}
func (m *ObjectItemQuantityPriceDateEffects) Deserialize(input *DataWrapper) {
	m.ObjectItemGenericQuantity.Deserialize(input)
	m.Price = input.ReadVarUhLong()
	m.Effects = NewObjectEffects()
	m.Effects.Deserialize(input)
	m.Date = input.ReadInt()
}

func (m *ObjectItemQuantityPriceDateEffects) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemToSell struct {
	MessageBase
	Item
	ObjectGID   int
	Effects     *Vector[ObjectEffectI]
	ObjectUID   int
	Quantity    int
	ObjectPrice int64
}

func NewObjectItemToSell() *ObjectItemToSell {
	return &ObjectItemToSell{MessageBase: MessageBase{MessageType_: "ObjectItemToSell", id_: 9372}}
}
func (m *ObjectItemToSell) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.ObjectGID = input.ReadVarUhInt()
	m.Effects = NewVector[ObjectEffectI]()
	effectsLen := int(input.ReadShort())
	for i := 0; i < effectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.Effects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
	m.ObjectPrice = input.ReadVarUhLong()
}

func (m *ObjectItemToSell) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemToSellInBid struct {
	MessageBase
	ObjectItemToSell
	UnsoldDelay int32
}

func NewObjectItemToSellInBid() *ObjectItemToSellInBid {
	return &ObjectItemToSellInBid{MessageBase: MessageBase{MessageType_: "ObjectItemToSellInBid", id_: 859}}
}
func (m *ObjectItemToSellInBid) Deserialize(input *DataWrapper) {
	m.ObjectItemToSell.Deserialize(input)
	m.UnsoldDelay = input.ReadInt()
}

func (m *ObjectItemToSellInBid) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectItemToSellInNpcShop struct {
	MessageBase
	ObjectItemMinimalInformation
	ObjectPrice  int64
	BuyCriterion string
}

func NewObjectItemToSellInNpcShop() *ObjectItemToSellInNpcShop {
	return &ObjectItemToSellInNpcShop{MessageBase: MessageBase{MessageType_: "ObjectItemToSellInNpcShop", id_: 5301}}
}
func (m *ObjectItemToSellInNpcShop) Deserialize(input *DataWrapper) {
	m.ObjectItemMinimalInformation.Deserialize(input)
	m.ObjectPrice = input.ReadVarUhLong()
	m.BuyCriterion = input.ReadUTF()
}

func (m *ObjectItemToSellInNpcShop) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectJobAddedMessage struct {
	MessageBase
	JobId int8
}

func NewObjectJobAddedMessage() *ObjectJobAddedMessage {
	return &ObjectJobAddedMessage{MessageBase: MessageBase{MessageType_: "ObjectJobAddedMessage", id_: 5441}}
}
func (m *ObjectJobAddedMessage) Deserialize(input *DataWrapper) {
	m.JobId = input.ReadByte()
}

func (m *ObjectJobAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectModifiedMessage struct {
	MessageBase
	Object *ObjectItem
}

func NewObjectModifiedMessage() *ObjectModifiedMessage {
	return &ObjectModifiedMessage{MessageBase: MessageBase{MessageType_: "ObjectModifiedMessage", id_: 7821}}
}
func (m *ObjectModifiedMessage) Deserialize(input *DataWrapper) {
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *ObjectModifiedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectMovementMessage struct {
	MessageBase
	ObjectUID int
	Position  int16
}

func NewObjectMovementMessage() *ObjectMovementMessage {
	return &ObjectMovementMessage{MessageBase: MessageBase{MessageType_: "ObjectMovementMessage", id_: 4510}}
}
func (m *ObjectMovementMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Position = input.ReadShort()
}

func (m *ObjectMovementMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectQuantityMessage struct {
	MessageBase
	ObjectUID int
	Quantity  int
	Origin    int8
}

func NewObjectQuantityMessage() *ObjectQuantityMessage {
	return &ObjectQuantityMessage{MessageBase: MessageBase{MessageType_: "ObjectQuantityMessage", id_: 204}}
}
func (m *ObjectQuantityMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Quantity = input.ReadVarUhInt()
	m.Origin = input.ReadByte()
}

func (m *ObjectQuantityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectSetPositionMessage struct {
	MessageBase
	ObjectUID int
	Position  int16
	Quantity  int
}

func NewObjectSetPositionMessage() *ObjectSetPositionMessage {
	return &ObjectSetPositionMessage{MessageBase: MessageBase{MessageType_: "ObjectSetPositionMessage", id_: 5569}}
}
func (m *ObjectSetPositionMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
	m.Position = input.ReadShort()
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectSetPositionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectUseMessage struct {
	MessageBase
	ObjectUID int
}

func NewObjectUseMessage() *ObjectUseMessage {
	return &ObjectUseMessage{MessageBase: MessageBase{MessageType_: "ObjectUseMessage", id_: 1372}}
}
func (m *ObjectUseMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
}

func (m *ObjectUseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectUseMultipleMessage struct {
	MessageBase
	ObjectUseMessage
	Quantity int
}

func NewObjectUseMultipleMessage() *ObjectUseMultipleMessage {
	return &ObjectUseMultipleMessage{MessageBase: MessageBase{MessageType_: "ObjectUseMultipleMessage", id_: 1310}}
}
func (m *ObjectUseMultipleMessage) Deserialize(input *DataWrapper) {
	m.ObjectUseMessage.Deserialize(input)
	m.Quantity = input.ReadVarUhInt()
}

func (m *ObjectUseMultipleMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectUseOnCellMessage struct {
	MessageBase
	ObjectUseMessage
	Cells int
}

func NewObjectUseOnCellMessage() *ObjectUseOnCellMessage {
	return &ObjectUseOnCellMessage{MessageBase: MessageBase{MessageType_: "ObjectUseOnCellMessage", id_: 4046}}
}
func (m *ObjectUseOnCellMessage) Deserialize(input *DataWrapper) {
	m.ObjectUseMessage.Deserialize(input)
	m.Cells = input.ReadVarUhShort()
}

func (m *ObjectUseOnCellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectUseOnCharacterMessage struct {
	MessageBase
	ObjectUseMessage
	CharacterId int64
}

func NewObjectUseOnCharacterMessage() *ObjectUseOnCharacterMessage {
	return &ObjectUseOnCharacterMessage{MessageBase: MessageBase{MessageType_: "ObjectUseOnCharacterMessage", id_: 2165}}
}
func (m *ObjectUseOnCharacterMessage) Deserialize(input *DataWrapper) {
	m.ObjectUseMessage.Deserialize(input)
	m.CharacterId = input.ReadVarUhLong()
}

func (m *ObjectUseOnCharacterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectsAddedMessage struct {
	MessageBase
	Object *Vector[ObjectItem]
}

func NewObjectsAddedMessage() *ObjectsAddedMessage {
	return &ObjectsAddedMessage{MessageBase: MessageBase{MessageType_: "ObjectsAddedMessage", id_: 1527}}
}
func (m *ObjectsAddedMessage) Deserialize(input *DataWrapper) {
	m.Object = NewVector[ObjectItem]()
	objectLen := int(input.ReadShort())
	for i := 0; i < objectLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Object.Push(ObjectItem)
	}
}

func (m *ObjectsAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectsDeletedMessage struct {
	MessageBase
	ObjectUID *Vector[int]
}

func NewObjectsDeletedMessage() *ObjectsDeletedMessage {
	return &ObjectsDeletedMessage{MessageBase: MessageBase{MessageType_: "ObjectsDeletedMessage", id_: 5219}}
}
func (m *ObjectsDeletedMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = NewVector[int]()
	objectUIDLen := int(input.ReadShort())
	for i := 0; i < objectUIDLen; i++ {
		val := input.ReadVarInt()
		m.ObjectUID.Push(&val)
	}
}

func (m *ObjectsDeletedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObjectsQuantityMessage struct {
	MessageBase
	ObjectsUIDAndQty *Vector[ObjectItemQuantity]
}

func NewObjectsQuantityMessage() *ObjectsQuantityMessage {
	return &ObjectsQuantityMessage{MessageBase: MessageBase{MessageType_: "ObjectsQuantityMessage", id_: 5664}}
}
func (m *ObjectsQuantityMessage) Deserialize(input *DataWrapper) {
	m.ObjectsUIDAndQty = NewVector[ObjectItemQuantity]()
	objectsUIDAndQtyLen := int(input.ReadShort())
	for i := 0; i < objectsUIDAndQtyLen; i++ {
		ObjectItemQuantity := NewObjectItemQuantity()
		ObjectItemQuantity.Deserialize(input)
		m.ObjectsUIDAndQty.Push(ObjectItemQuantity)
	}
}

func (m *ObjectsQuantityMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObtainedItemMessage struct {
	MessageBase
	GenericId    int
	BaseQuantity int
}

func NewObtainedItemMessage() *ObtainedItemMessage {
	return &ObtainedItemMessage{MessageBase: MessageBase{MessageType_: "ObtainedItemMessage", id_: 9678}}
}
func (m *ObtainedItemMessage) Deserialize(input *DataWrapper) {
	m.GenericId = input.ReadVarUhInt()
	m.BaseQuantity = input.ReadVarUhInt()
}

func (m *ObtainedItemMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ObtainedItemWithBonusMessage struct {
	MessageBase
	ObtainedItemMessage
	BonusQuantity int
}

func NewObtainedItemWithBonusMessage() *ObtainedItemWithBonusMessage {
	return &ObtainedItemWithBonusMessage{MessageBase: MessageBase{MessageType_: "ObtainedItemWithBonusMessage", id_: 7133}}
}
func (m *ObtainedItemWithBonusMessage) Deserialize(input *DataWrapper) {
	m.ObtainedItemMessage.Deserialize(input)
	m.BonusQuantity = input.ReadVarUhInt()
}

func (m *ObtainedItemWithBonusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OnConnectionEventMessage struct {
	MessageBase
	EventType int8
}

func NewOnConnectionEventMessage() *OnConnectionEventMessage {
	return &OnConnectionEventMessage{MessageBase: MessageBase{MessageType_: "OnConnectionEventMessage", id_: 999}}
}
func (m *OnConnectionEventMessage) Deserialize(input *DataWrapper) {
	m.EventType = input.ReadByte()
}

func (m *OnConnectionEventMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OpenGuideBookMessage struct {
	MessageBase
	ArticleId int
}

func NewOpenGuideBookMessage() *OpenGuideBookMessage {
	return &OpenGuideBookMessage{MessageBase: MessageBase{MessageType_: "OpenGuideBookMessage", id_: 9970}}
}
func (m *OpenGuideBookMessage) Deserialize(input *DataWrapper) {
	m.ArticleId = input.ReadVarUhShort()
}

func (m *OpenGuideBookMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OpenHavenBagFurnitureSequenceRequestMessage struct {
	MessageBase
}

func NewOpenHavenBagFurnitureSequenceRequestMessage() *OpenHavenBagFurnitureSequenceRequestMessage {
	return &OpenHavenBagFurnitureSequenceRequestMessage{MessageBase: MessageBase{MessageType_: "OpenHavenBagFurnitureSequenceRequestMessage", id_: 7398}}
}
func (m *OpenHavenBagFurnitureSequenceRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *OpenHavenBagFurnitureSequenceRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OpponentSurrenderMessage struct {
	MessageBase
}

func NewOpponentSurrenderMessage() *OpponentSurrenderMessage {
	return &OpponentSurrenderMessage{MessageBase: MessageBase{MessageType_: "OpponentSurrenderMessage", id_: 6059}}
}
func (m *OpponentSurrenderMessage) Deserialize(input *DataWrapper) {
}

func (m *OpponentSurrenderMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OrnamentGainedMessage struct {
	MessageBase
	OrnamentId int16
}

func NewOrnamentGainedMessage() *OrnamentGainedMessage {
	return &OrnamentGainedMessage{MessageBase: MessageBase{MessageType_: "OrnamentGainedMessage", id_: 9883}}
}
func (m *OrnamentGainedMessage) Deserialize(input *DataWrapper) {
	m.OrnamentId = input.ReadShort()
}

func (m *OrnamentGainedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OrnamentLostMessage struct {
	MessageBase
	OrnamentId int16
}

func NewOrnamentLostMessage() *OrnamentLostMessage {
	return &OrnamentLostMessage{MessageBase: MessageBase{MessageType_: "OrnamentLostMessage", id_: 2799}}
}
func (m *OrnamentLostMessage) Deserialize(input *DataWrapper) {
	m.OrnamentId = input.ReadShort()
}

func (m *OrnamentLostMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OrnamentSelectErrorMessage struct {
	MessageBase
	Reason int8
}

func NewOrnamentSelectErrorMessage() *OrnamentSelectErrorMessage {
	return &OrnamentSelectErrorMessage{MessageBase: MessageBase{MessageType_: "OrnamentSelectErrorMessage", id_: 6401}}
}
func (m *OrnamentSelectErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *OrnamentSelectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OrnamentSelectRequestMessage struct {
	MessageBase
	OrnamentId int
}

func NewOrnamentSelectRequestMessage() *OrnamentSelectRequestMessage {
	return &OrnamentSelectRequestMessage{MessageBase: MessageBase{MessageType_: "OrnamentSelectRequestMessage", id_: 732}}
}
func (m *OrnamentSelectRequestMessage) Deserialize(input *DataWrapper) {
	m.OrnamentId = input.ReadVarUhShort()
}

func (m *OrnamentSelectRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type OrnamentSelectedMessage struct {
	MessageBase
	OrnamentId int
}

func NewOrnamentSelectedMessage() *OrnamentSelectedMessage {
	return &OrnamentSelectedMessage{MessageBase: MessageBase{MessageType_: "OrnamentSelectedMessage", id_: 7251}}
}
func (m *OrnamentSelectedMessage) Deserialize(input *DataWrapper) {
	m.OrnamentId = input.ReadVarUhShort()
}

func (m *OrnamentSelectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockBuyRequestMessage struct {
	MessageBase
	ProposedPrice int64
}

func NewPaddockBuyRequestMessage() *PaddockBuyRequestMessage {
	return &PaddockBuyRequestMessage{MessageBase: MessageBase{MessageType_: "PaddockBuyRequestMessage", id_: 1669}}
}
func (m *PaddockBuyRequestMessage) Deserialize(input *DataWrapper) {
	m.ProposedPrice = input.ReadVarUhLong()
}

func (m *PaddockBuyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockBuyResultMessage struct {
	MessageBase
	PaddockId float64
	Bought    bool
	RealPrice int64
}

func NewPaddockBuyResultMessage() *PaddockBuyResultMessage {
	return &PaddockBuyResultMessage{MessageBase: MessageBase{MessageType_: "PaddockBuyResultMessage", id_: 5838}}
}
func (m *PaddockBuyResultMessage) Deserialize(input *DataWrapper) {
	m.PaddockId = input.ReadDouble()
	m.Bought = input.ReadBoolean()
	m.RealPrice = input.ReadVarUhLong()
}

func (m *PaddockBuyResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockBuyableInformationsI interface {
	Deserialize(input *DataWrapper)
}

type PaddockBuyableInformations struct {
	MessageBase
	Price  int64
	Locked bool
}

func NewPaddockBuyableInformations() *PaddockBuyableInformations {
	return &PaddockBuyableInformations{MessageBase: MessageBase{MessageType_: "PaddockBuyableInformations", id_: 5612}}
}
func (m *PaddockBuyableInformations) Deserialize(input *DataWrapper) {
	m.Price = input.ReadVarUhLong()
	m.Locked = input.ReadBoolean()
}

func (m *PaddockBuyableInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockContentInformations struct {
	MessageBase
	PaddockInformations
	PaddockId          float64
	WorldX             int16
	WorldY             int16
	MapId              float64
	SubAreaId          int
	Abandonned         bool
	MountsInformations *Vector[MountInformationsForPaddock]
}

func NewPaddockContentInformations() *PaddockContentInformations {
	return &PaddockContentInformations{MessageBase: MessageBase{MessageType_: "PaddockContentInformations", id_: 6426}}
}
func (m *PaddockContentInformations) Deserialize(input *DataWrapper) {
	m.PaddockInformations.Deserialize(input)
	m.PaddockId = input.ReadDouble()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.Abandonned = input.ReadBoolean()
	m.MountsInformations = NewVector[MountInformationsForPaddock]()
	mountsInformationsLen := int(input.ReadShort())
	for i := 0; i < mountsInformationsLen; i++ {
		MountInformationsForPaddock := NewMountInformationsForPaddock()
		MountInformationsForPaddock.Deserialize(input)
		m.MountsInformations.Push(MountInformationsForPaddock)
	}
}

func (m *PaddockContentInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockGuildedInformations struct {
	MessageBase
	PaddockBuyableInformations
	Deserted  bool
	GuildInfo *GuildInformations
}

func NewPaddockGuildedInformations() *PaddockGuildedInformations {
	return &PaddockGuildedInformations{MessageBase: MessageBase{MessageType_: "PaddockGuildedInformations", id_: 4294}}
}
func (m *PaddockGuildedInformations) Deserialize(input *DataWrapper) {
	m.PaddockBuyableInformations.Deserialize(input)
	m.Deserted = input.ReadBoolean()
	m.GuildInfo = NewGuildInformations()
	m.GuildInfo.Deserialize(input)
}

func (m *PaddockGuildedInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockInformations struct {
	MessageBase
	MaxOutdoorMount int
	MaxItems        int
}

func NewPaddockInformations() *PaddockInformations {
	return &PaddockInformations{MessageBase: MessageBase{MessageType_: "PaddockInformations", id_: 208}}
}
func (m *PaddockInformations) Deserialize(input *DataWrapper) {
	m.MaxOutdoorMount = input.ReadVarUhShort()
	m.MaxItems = input.ReadVarUhShort()
}

func (m *PaddockInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockInformationsForSell struct {
	MessageBase
	GuildOwner string
	WorldX     int16
	WorldY     int16
	SubAreaId  int
	NbMount    int8
	NbObject   int8
	Price      int64
}

func NewPaddockInformationsForSell() *PaddockInformationsForSell {
	return &PaddockInformationsForSell{MessageBase: MessageBase{MessageType_: "PaddockInformationsForSell", id_: 5311}}
}
func (m *PaddockInformationsForSell) Deserialize(input *DataWrapper) {
	m.GuildOwner = input.ReadUTF()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.SubAreaId = input.ReadVarUhShort()
	m.NbMount = input.ReadByte()
	m.NbObject = input.ReadByte()
	m.Price = input.ReadVarUhLong()
}

func (m *PaddockInformationsForSell) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockInstancesInformations struct {
	MessageBase
	PaddockInformations
	Paddocks *Vector[PaddockBuyableInformationsI]
}

func NewPaddockInstancesInformations() *PaddockInstancesInformations {
	return &PaddockInstancesInformations{MessageBase: MessageBase{MessageType_: "PaddockInstancesInformations", id_: 4571}}
}
func (m *PaddockInstancesInformations) Deserialize(input *DataWrapper) {
	m.PaddockInformations.Deserialize(input)
	m.Paddocks = NewVector[PaddockBuyableInformationsI]()
	paddocksLen := int(input.ReadShort())
	for i := 0; i < paddocksLen; i++ {
		foundPaddockBuyableInformations := getDynamicType(input)
		if castedPaddockBuyableInformations, ok := foundPaddockBuyableInformations.(PaddockBuyableInformationsI); ok {
			castedPaddockBuyableInformations.Deserialize(input)
			m.Paddocks.Push(&castedPaddockBuyableInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PaddockBuyableInformationsI, got: " + fmt.Sprintf("%T", foundPaddockBuyableInformations))
		}
	}
}

func (m *PaddockInstancesInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockItem struct {
	MessageBase
	ObjectItemInRolePlay
	Durability *ItemDurability
}

func NewPaddockItem() *PaddockItem {
	return &PaddockItem{MessageBase: MessageBase{MessageType_: "PaddockItem", id_: 2373}}
}
func (m *PaddockItem) Deserialize(input *DataWrapper) {
	m.ObjectItemInRolePlay.Deserialize(input)
	m.Durability = NewItemDurability()
	m.Durability.Deserialize(input)
}

func (m *PaddockItem) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockMoveItemRequestMessage struct {
	MessageBase
	OldCellId int
	NewCellId int
}

func NewPaddockMoveItemRequestMessage() *PaddockMoveItemRequestMessage {
	return &PaddockMoveItemRequestMessage{MessageBase: MessageBase{MessageType_: "PaddockMoveItemRequestMessage", id_: 6071}}
}
func (m *PaddockMoveItemRequestMessage) Deserialize(input *DataWrapper) {
	m.OldCellId = input.ReadVarUhShort()
	m.NewCellId = input.ReadVarUhShort()
}

func (m *PaddockMoveItemRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockPropertiesMessage struct {
	MessageBase
	Properties *PaddockInstancesInformations
}

func NewPaddockPropertiesMessage() *PaddockPropertiesMessage {
	return &PaddockPropertiesMessage{MessageBase: MessageBase{MessageType_: "PaddockPropertiesMessage", id_: 4650}}
}
func (m *PaddockPropertiesMessage) Deserialize(input *DataWrapper) {
	m.Properties = NewPaddockInstancesInformations()
	m.Properties.Deserialize(input)
}

func (m *PaddockPropertiesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockRemoveItemRequestMessage struct {
	MessageBase
	CellId int
}

func NewPaddockRemoveItemRequestMessage() *PaddockRemoveItemRequestMessage {
	return &PaddockRemoveItemRequestMessage{MessageBase: MessageBase{MessageType_: "PaddockRemoveItemRequestMessage", id_: 2191}}
}
func (m *PaddockRemoveItemRequestMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
}

func (m *PaddockRemoveItemRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockSellBuyDialogMessage struct {
	MessageBase
	Bsell   bool
	OwnerId int
	Price   int64
}

func NewPaddockSellBuyDialogMessage() *PaddockSellBuyDialogMessage {
	return &PaddockSellBuyDialogMessage{MessageBase: MessageBase{MessageType_: "PaddockSellBuyDialogMessage", id_: 4196}}
}
func (m *PaddockSellBuyDialogMessage) Deserialize(input *DataWrapper) {
	m.Bsell = input.ReadBoolean()
	m.OwnerId = input.ReadVarUhInt()
	m.Price = input.ReadVarUhLong()
}

func (m *PaddockSellBuyDialogMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockSellRequestMessage struct {
	MessageBase
	Price   int64
	ForSale bool
}

func NewPaddockSellRequestMessage() *PaddockSellRequestMessage {
	return &PaddockSellRequestMessage{MessageBase: MessageBase{MessageType_: "PaddockSellRequestMessage", id_: 6528}}
}
func (m *PaddockSellRequestMessage) Deserialize(input *DataWrapper) {
	m.Price = input.ReadVarUhLong()
	m.ForSale = input.ReadBoolean()
}

func (m *PaddockSellRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockToSellFilterMessage struct {
	MessageBase
	AreaId           int32
	AtLeastNbMount   int8
	AtLeastNbMachine int8
	MaxPrice         int64
	OrderBy          int8
}

func NewPaddockToSellFilterMessage() *PaddockToSellFilterMessage {
	return &PaddockToSellFilterMessage{MessageBase: MessageBase{MessageType_: "PaddockToSellFilterMessage", id_: 3852}}
}
func (m *PaddockToSellFilterMessage) Deserialize(input *DataWrapper) {
	m.AreaId = input.ReadInt()
	m.AtLeastNbMount = input.ReadByte()
	m.AtLeastNbMachine = input.ReadByte()
	m.MaxPrice = input.ReadVarUhLong()
	m.OrderBy = input.ReadByte()
}

func (m *PaddockToSellFilterMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockToSellListMessage struct {
	MessageBase
	PageIndex   int
	TotalPage   int
	PaddockList *Vector[PaddockInformationsForSell]
}

func NewPaddockToSellListMessage() *PaddockToSellListMessage {
	return &PaddockToSellListMessage{MessageBase: MessageBase{MessageType_: "PaddockToSellListMessage", id_: 7795}}
}
func (m *PaddockToSellListMessage) Deserialize(input *DataWrapper) {
	m.PageIndex = input.ReadVarUhShort()
	m.TotalPage = input.ReadVarUhShort()
	m.PaddockList = NewVector[PaddockInformationsForSell]()
	paddockListLen := int(input.ReadShort())
	for i := 0; i < paddockListLen; i++ {
		PaddockInformationsForSell := NewPaddockInformationsForSell()
		PaddockInformationsForSell.Deserialize(input)
		m.PaddockList.Push(PaddockInformationsForSell)
	}
}

func (m *PaddockToSellListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaddockToSellListRequestMessage struct {
	MessageBase
	PageIndex int
}

func NewPaddockToSellListRequestMessage() *PaddockToSellListRequestMessage {
	return &PaddockToSellListRequestMessage{MessageBase: MessageBase{MessageType_: "PaddockToSellListRequestMessage", id_: 101}}
}
func (m *PaddockToSellListRequestMessage) Deserialize(input *DataWrapper) {
	m.PageIndex = input.ReadVarUhShort()
}

func (m *PaddockToSellListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaginationAnswerAbstractMessage struct {
	MessageBase
	Offset float64
	Count  uint32
	Total  uint32
}

func NewPaginationAnswerAbstractMessage() *PaginationAnswerAbstractMessage {
	return &PaginationAnswerAbstractMessage{MessageBase: MessageBase{MessageType_: "PaginationAnswerAbstractMessage", id_: 1468}}
}
func (m *PaginationAnswerAbstractMessage) Deserialize(input *DataWrapper) {
	m.Offset = input.ReadDouble()
	m.Count = input.ReadUnsignedInt()
	m.Total = input.ReadUnsignedInt()
}

func (m *PaginationAnswerAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PaginationRequestAbstractMessage struct {
	MessageBase
	Offset float64
	Count  uint32
}

func NewPaginationRequestAbstractMessage() *PaginationRequestAbstractMessage {
	return &PaginationRequestAbstractMessage{MessageBase: MessageBase{MessageType_: "PaginationRequestAbstractMessage", id_: 6633}}
}
func (m *PaginationRequestAbstractMessage) Deserialize(input *DataWrapper) {
	m.Offset = input.ReadDouble()
	m.Count = input.ReadUnsignedInt()
}

func (m *PaginationRequestAbstractMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyAbdicateThroneMessage struct {
	MessageBase
	AbstractPartyMessage
	PlayerId int64
}

func NewPartyAbdicateThroneMessage() *PartyAbdicateThroneMessage {
	return &PartyAbdicateThroneMessage{MessageBase: MessageBase{MessageType_: "PartyAbdicateThroneMessage", id_: 7804}}
}
func (m *PartyAbdicateThroneMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *PartyAbdicateThroneMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyAcceptInvitationMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyAcceptInvitationMessage() *PartyAcceptInvitationMessage {
	return &PartyAcceptInvitationMessage{MessageBase: MessageBase{MessageType_: "PartyAcceptInvitationMessage", id_: 4342}}
}
func (m *PartyAcceptInvitationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyAcceptInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyCancelInvitationMessage struct {
	MessageBase
	AbstractPartyMessage
	GuestId int64
}

func NewPartyCancelInvitationMessage() *PartyCancelInvitationMessage {
	return &PartyCancelInvitationMessage{MessageBase: MessageBase{MessageType_: "PartyCancelInvitationMessage", id_: 425}}
}
func (m *PartyCancelInvitationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.GuestId = input.ReadVarUhLong()
}

func (m *PartyCancelInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyCancelInvitationNotificationMessage struct {
	MessageBase
	AbstractPartyEventMessage
	CancelerId int64
	GuestId    int64
}

func NewPartyCancelInvitationNotificationMessage() *PartyCancelInvitationNotificationMessage {
	return &PartyCancelInvitationNotificationMessage{MessageBase: MessageBase{MessageType_: "PartyCancelInvitationNotificationMessage", id_: 1327}}
}
func (m *PartyCancelInvitationNotificationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.CancelerId = input.ReadVarUhLong()
	m.GuestId = input.ReadVarUhLong()
}

func (m *PartyCancelInvitationNotificationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyCannotJoinErrorMessage struct {
	MessageBase
	AbstractPartyMessage
	Reason int8
}

func NewPartyCannotJoinErrorMessage() *PartyCannotJoinErrorMessage {
	return &PartyCannotJoinErrorMessage{MessageBase: MessageBase{MessageType_: "PartyCannotJoinErrorMessage", id_: 6016}}
}
func (m *PartyCannotJoinErrorMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Reason = input.ReadByte()
}

func (m *PartyCannotJoinErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyDeletedMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyDeletedMessage() *PartyDeletedMessage {
	return &PartyDeletedMessage{MessageBase: MessageBase{MessageType_: "PartyDeletedMessage", id_: 8038}}
}
func (m *PartyDeletedMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyDeletedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyEntityBaseInformationI interface {
	Deserialize(input *DataWrapper)
}

type PartyEntityBaseInformation struct {
	MessageBase
	IndexId       int8
	EntityModelId int8
	EntityLook    *EntityLook
}

func NewPartyEntityBaseInformation() *PartyEntityBaseInformation {
	return &PartyEntityBaseInformation{MessageBase: MessageBase{MessageType_: "PartyEntityBaseInformation", id_: 5790}}
}
func (m *PartyEntityBaseInformation) Deserialize(input *DataWrapper) {
	m.IndexId = input.ReadByte()
	m.EntityModelId = input.ReadByte()
	m.EntityLook = NewEntityLook()
	m.EntityLook.Deserialize(input)
}

func (m *PartyEntityBaseInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyEntityMemberInformation struct {
	MessageBase
	PartyEntityBaseInformation
	Initiative    int
	LifePoints    int
	MaxLifePoints int
	Prospecting   int
	RegenRate     uint8
}

func NewPartyEntityMemberInformation() *PartyEntityMemberInformation {
	return &PartyEntityMemberInformation{MessageBase: MessageBase{MessageType_: "PartyEntityMemberInformation", id_: 118}}
}
func (m *PartyEntityMemberInformation) Deserialize(input *DataWrapper) {
	m.PartyEntityBaseInformation.Deserialize(input)
	m.Initiative = input.ReadVarUhInt()
	m.LifePoints = input.ReadVarUhInt()
	m.MaxLifePoints = input.ReadVarUhInt()
	m.Prospecting = input.ReadVarUhInt()
	m.RegenRate = input.ReadUnsignedByte()
}

func (m *PartyEntityMemberInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyEntityUpdateLightMessage struct {
	MessageBase
	PartyUpdateLightMessage
	IndexId int8
}

func NewPartyEntityUpdateLightMessage() *PartyEntityUpdateLightMessage {
	return &PartyEntityUpdateLightMessage{MessageBase: MessageBase{MessageType_: "PartyEntityUpdateLightMessage", id_: 2046}}
}
func (m *PartyEntityUpdateLightMessage) Deserialize(input *DataWrapper) {
	m.PartyUpdateLightMessage.Deserialize(input)
	m.IndexId = input.ReadByte()
}

func (m *PartyEntityUpdateLightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyFollowMemberRequestMessage struct {
	MessageBase
	AbstractPartyMessage
	PlayerId int64
}

func NewPartyFollowMemberRequestMessage() *PartyFollowMemberRequestMessage {
	return &PartyFollowMemberRequestMessage{MessageBase: MessageBase{MessageType_: "PartyFollowMemberRequestMessage", id_: 7118}}
}
func (m *PartyFollowMemberRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *PartyFollowMemberRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyFollowStatusUpdateMessage struct {
	MessageBase
	AbstractPartyMessage
	Success    bool
	IsFollowed bool
	FollowedId int64
}

func NewPartyFollowStatusUpdateMessage() *PartyFollowStatusUpdateMessage {
	return &PartyFollowStatusUpdateMessage{MessageBase: MessageBase{MessageType_: "PartyFollowStatusUpdateMessage", id_: 4068}}
}
func (m *PartyFollowStatusUpdateMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	byteBox0 := input.ReadByte()
	m.Success = (byteBox0>>0)&1 != 0
	m.IsFollowed = (byteBox0>>1)&1 != 0
	m.FollowedId = input.ReadVarUhLong()
}

func (m *PartyFollowStatusUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyFollowThisMemberRequestMessage struct {
	MessageBase
	PartyFollowMemberRequestMessage
	Enabled bool
}

func NewPartyFollowThisMemberRequestMessage() *PartyFollowThisMemberRequestMessage {
	return &PartyFollowThisMemberRequestMessage{MessageBase: MessageBase{MessageType_: "PartyFollowThisMemberRequestMessage", id_: 327}}
}
func (m *PartyFollowThisMemberRequestMessage) Deserialize(input *DataWrapper) {
	m.PartyFollowMemberRequestMessage.Deserialize(input)
	m.Enabled = input.ReadBoolean()
}

func (m *PartyFollowThisMemberRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyGuestInformations struct {
	MessageBase
	GuestId   int64
	HostId    int64
	Name      string
	GuestLook *EntityLook
	Breed     int8
	Sex       bool
	Status    PlayerStatusI
	Entities  *Vector[PartyEntityBaseInformation]
}

func NewPartyGuestInformations() *PartyGuestInformations {
	return &PartyGuestInformations{MessageBase: MessageBase{MessageType_: "PartyGuestInformations", id_: 3127}}
}
func (m *PartyGuestInformations) Deserialize(input *DataWrapper) {
	m.GuestId = input.ReadVarUhLong()
	m.HostId = input.ReadVarUhLong()
	m.Name = input.ReadUTF()
	m.GuestLook = NewEntityLook()
	m.GuestLook.Deserialize(input)
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
	m.Entities = NewVector[PartyEntityBaseInformation]()
	entitiesLen := int(input.ReadShort())
	for i := 0; i < entitiesLen; i++ {
		PartyEntityBaseInformation := NewPartyEntityBaseInformation()
		PartyEntityBaseInformation.Deserialize(input)
		m.Entities.Push(PartyEntityBaseInformation)
	}
}

func (m *PartyGuestInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationArenaRequestMessage struct {
	MessageBase
	PartyInvitationRequestMessage
}

func NewPartyInvitationArenaRequestMessage() *PartyInvitationArenaRequestMessage {
	return &PartyInvitationArenaRequestMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationArenaRequestMessage", id_: 2774}}
}
func (m *PartyInvitationArenaRequestMessage) Deserialize(input *DataWrapper) {
	m.PartyInvitationRequestMessage.Deserialize(input)
}

func (m *PartyInvitationArenaRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationCancelledForGuestMessage struct {
	MessageBase
	AbstractPartyMessage
	CancelerId int64
}

func NewPartyInvitationCancelledForGuestMessage() *PartyInvitationCancelledForGuestMessage {
	return &PartyInvitationCancelledForGuestMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationCancelledForGuestMessage", id_: 7618}}
}
func (m *PartyInvitationCancelledForGuestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.CancelerId = input.ReadVarUhLong()
}

func (m *PartyInvitationCancelledForGuestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationDetailsMessage struct {
	MessageBase
	AbstractPartyMessage
	PartyType int8
	PartyName string
	FromId    int64
	FromName  string
	LeaderId  int64
	Members   *Vector[PartyInvitationMemberInformationsI]
	Guests    *Vector[PartyGuestInformations]
}

func NewPartyInvitationDetailsMessage() *PartyInvitationDetailsMessage {
	return &PartyInvitationDetailsMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationDetailsMessage", id_: 8607}}
}
func (m *PartyInvitationDetailsMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PartyType = input.ReadByte()
	m.PartyName = input.ReadUTF()
	m.FromId = input.ReadVarUhLong()
	m.FromName = input.ReadUTF()
	m.LeaderId = input.ReadVarUhLong()
	m.Members = NewVector[PartyInvitationMemberInformationsI]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		foundPartyInvitationMemberInformations := getDynamicType(input)
		if castedPartyInvitationMemberInformations, ok := foundPartyInvitationMemberInformations.(PartyInvitationMemberInformationsI); ok {
			castedPartyInvitationMemberInformations.Deserialize(input)
			m.Members.Push(&castedPartyInvitationMemberInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PartyInvitationMemberInformationsI, got: " + fmt.Sprintf("%T", foundPartyInvitationMemberInformations))
		}
	}
	m.Guests = NewVector[PartyGuestInformations]()
	guestsLen := int(input.ReadShort())
	for i := 0; i < guestsLen; i++ {
		PartyGuestInformations := NewPartyGuestInformations()
		PartyGuestInformations.Deserialize(input)
		m.Guests.Push(PartyGuestInformations)
	}
}

func (m *PartyInvitationDetailsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationDetailsRequestMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyInvitationDetailsRequestMessage() *PartyInvitationDetailsRequestMessage {
	return &PartyInvitationDetailsRequestMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationDetailsRequestMessage", id_: 8629}}
}
func (m *PartyInvitationDetailsRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyInvitationDetailsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationDungeonDetailsMessage struct {
	MessageBase
	PartyInvitationDetailsMessage
	DungeonId           int
	PlayersDungeonReady *Vector[bool]
}

func NewPartyInvitationDungeonDetailsMessage() *PartyInvitationDungeonDetailsMessage {
	return &PartyInvitationDungeonDetailsMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationDungeonDetailsMessage", id_: 2367}}
}
func (m *PartyInvitationDungeonDetailsMessage) Deserialize(input *DataWrapper) {
	m.PartyInvitationDetailsMessage.Deserialize(input)
	m.DungeonId = input.ReadVarUhShort()
	m.PlayersDungeonReady = NewVector[bool]()
	playersDungeonReadyLen := int(input.ReadShort())
	for i := 0; i < playersDungeonReadyLen; i++ {
		val := input.ReadBoolean()
		m.PlayersDungeonReady.Push(&val)
	}
}

func (m *PartyInvitationDungeonDetailsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationDungeonMessage struct {
	MessageBase
	PartyInvitationMessage
	DungeonId int
}

func NewPartyInvitationDungeonMessage() *PartyInvitationDungeonMessage {
	return &PartyInvitationDungeonMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationDungeonMessage", id_: 3539}}
}
func (m *PartyInvitationDungeonMessage) Deserialize(input *DataWrapper) {
	m.PartyInvitationMessage.Deserialize(input)
	m.DungeonId = input.ReadVarUhShort()
}

func (m *PartyInvitationDungeonMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationDungeonRequestMessage struct {
	MessageBase
	PartyInvitationRequestMessage
	DungeonId int
}

func NewPartyInvitationDungeonRequestMessage() *PartyInvitationDungeonRequestMessage {
	return &PartyInvitationDungeonRequestMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationDungeonRequestMessage", id_: 5145}}
}
func (m *PartyInvitationDungeonRequestMessage) Deserialize(input *DataWrapper) {
	m.PartyInvitationRequestMessage.Deserialize(input)
	m.DungeonId = input.ReadVarUhShort()
}

func (m *PartyInvitationDungeonRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationMemberInformationsI interface {
	Deserialize(input *DataWrapper)
}

type PartyInvitationMemberInformations struct {
	MessageBase
	CharacterBaseInformations
	WorldX    int16
	WorldY    int16
	MapId     float64
	SubAreaId int
	Entities  *Vector[PartyEntityBaseInformation]
}

func NewPartyInvitationMemberInformations() *PartyInvitationMemberInformations {
	return &PartyInvitationMemberInformations{MessageBase: MessageBase{MessageType_: "PartyInvitationMemberInformations", id_: 3577}}
}
func (m *PartyInvitationMemberInformations) Deserialize(input *DataWrapper) {
	m.CharacterBaseInformations.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.Entities = NewVector[PartyEntityBaseInformation]()
	entitiesLen := int(input.ReadShort())
	for i := 0; i < entitiesLen; i++ {
		PartyEntityBaseInformation := NewPartyEntityBaseInformation()
		PartyEntityBaseInformation.Deserialize(input)
		m.Entities.Push(PartyEntityBaseInformation)
	}
}

func (m *PartyInvitationMemberInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationMessage struct {
	MessageBase
	AbstractPartyMessage
	PartyType       int8
	PartyName       string
	MaxParticipants int8
	FromId          int64
	FromName        string
	ToId            int64
}

func NewPartyInvitationMessage() *PartyInvitationMessage {
	return &PartyInvitationMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationMessage", id_: 729}}
}
func (m *PartyInvitationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PartyType = input.ReadByte()
	m.PartyName = input.ReadUTF()
	m.MaxParticipants = input.ReadByte()
	m.FromId = input.ReadVarUhLong()
	m.FromName = input.ReadUTF()
	m.ToId = input.ReadVarUhLong()
}

func (m *PartyInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyInvitationRequestMessage struct {
	MessageBase
	Target AbstractPlayerSearchInformationI
}

func NewPartyInvitationRequestMessage() *PartyInvitationRequestMessage {
	return &PartyInvitationRequestMessage{MessageBase: MessageBase{MessageType_: "PartyInvitationRequestMessage", id_: 7920}}
}
func (m *PartyInvitationRequestMessage) Deserialize(input *DataWrapper) {
	m.Target = getDynamicType(input)
	m.Target.Deserialize(input)
}

func (m *PartyInvitationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyJoinMessage struct {
	MessageBase
	AbstractPartyMessage
	PartyType       int8
	PartyLeaderId   int64
	MaxParticipants int8
	Members         *Vector[PartyMemberInformationsI]
	Guests          *Vector[PartyGuestInformations]
	Restricted      bool
	PartyName       string
}

func NewPartyJoinMessage() *PartyJoinMessage {
	return &PartyJoinMessage{MessageBase: MessageBase{MessageType_: "PartyJoinMessage", id_: 6577}}
}
func (m *PartyJoinMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PartyType = input.ReadByte()
	m.PartyLeaderId = input.ReadVarUhLong()
	m.MaxParticipants = input.ReadByte()
	m.Members = NewVector[PartyMemberInformationsI]()
	membersLen := int(input.ReadShort())
	for i := 0; i < membersLen; i++ {
		foundPartyMemberInformations := getDynamicType(input)
		if castedPartyMemberInformations, ok := foundPartyMemberInformations.(PartyMemberInformationsI); ok {
			castedPartyMemberInformations.Deserialize(input)
			m.Members.Push(&castedPartyMemberInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PartyMemberInformationsI, got: " + fmt.Sprintf("%T", foundPartyMemberInformations))
		}
	}
	m.Guests = NewVector[PartyGuestInformations]()
	guestsLen := int(input.ReadShort())
	for i := 0; i < guestsLen; i++ {
		PartyGuestInformations := NewPartyGuestInformations()
		PartyGuestInformations.Deserialize(input)
		m.Guests.Push(PartyGuestInformations)
	}
	m.Restricted = input.ReadBoolean()
	m.PartyName = input.ReadUTF()
}

func (m *PartyJoinMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyKickRequestMessage struct {
	MessageBase
	AbstractPartyMessage
	PlayerId int64
}

func NewPartyKickRequestMessage() *PartyKickRequestMessage {
	return &PartyKickRequestMessage{MessageBase: MessageBase{MessageType_: "PartyKickRequestMessage", id_: 7926}}
}
func (m *PartyKickRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *PartyKickRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyKickedByMessage struct {
	MessageBase
	AbstractPartyMessage
	KickerId int64
}

func NewPartyKickedByMessage() *PartyKickedByMessage {
	return &PartyKickedByMessage{MessageBase: MessageBase{MessageType_: "PartyKickedByMessage", id_: 4958}}
}
func (m *PartyKickedByMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.KickerId = input.ReadVarUhLong()
}

func (m *PartyKickedByMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLeaderUpdateMessage struct {
	MessageBase
	AbstractPartyEventMessage
	PartyLeaderId int64
}

func NewPartyLeaderUpdateMessage() *PartyLeaderUpdateMessage {
	return &PartyLeaderUpdateMessage{MessageBase: MessageBase{MessageType_: "PartyLeaderUpdateMessage", id_: 6439}}
}
func (m *PartyLeaderUpdateMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.PartyLeaderId = input.ReadVarUhLong()
}

func (m *PartyLeaderUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLeaveMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyLeaveMessage() *PartyLeaveMessage {
	return &PartyLeaveMessage{MessageBase: MessageBase{MessageType_: "PartyLeaveMessage", id_: 83}}
}
func (m *PartyLeaveMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyLeaveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLeaveRequestMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyLeaveRequestMessage() *PartyLeaveRequestMessage {
	return &PartyLeaveRequestMessage{MessageBase: MessageBase{MessageType_: "PartyLeaveRequestMessage", id_: 6779}}
}
func (m *PartyLeaveRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyLeaveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLocateMembersMessage struct {
	MessageBase
	AbstractPartyMessage
	Geopositions *Vector[PartyMemberGeoPosition]
}

func NewPartyLocateMembersMessage() *PartyLocateMembersMessage {
	return &PartyLocateMembersMessage{MessageBase: MessageBase{MessageType_: "PartyLocateMembersMessage", id_: 8066}}
}
func (m *PartyLocateMembersMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Geopositions = NewVector[PartyMemberGeoPosition]()
	geopositionsLen := int(input.ReadShort())
	for i := 0; i < geopositionsLen; i++ {
		PartyMemberGeoPosition := NewPartyMemberGeoPosition()
		PartyMemberGeoPosition.Deserialize(input)
		m.Geopositions.Push(PartyMemberGeoPosition)
	}
}

func (m *PartyLocateMembersMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLocateMembersRequestMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyLocateMembersRequestMessage() *PartyLocateMembersRequestMessage {
	return &PartyLocateMembersRequestMessage{MessageBase: MessageBase{MessageType_: "PartyLocateMembersRequestMessage", id_: 4987}}
}
func (m *PartyLocateMembersRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyLocateMembersRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyLoyaltyStatusMessage struct {
	MessageBase
	AbstractPartyMessage
	Loyal bool
}

func NewPartyLoyaltyStatusMessage() *PartyLoyaltyStatusMessage {
	return &PartyLoyaltyStatusMessage{MessageBase: MessageBase{MessageType_: "PartyLoyaltyStatusMessage", id_: 5384}}
}
func (m *PartyLoyaltyStatusMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Loyal = input.ReadBoolean()
}

func (m *PartyLoyaltyStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberArenaInformations struct {
	MessageBase
	PartyMemberInformations
	Rank int
}

func NewPartyMemberArenaInformations() *PartyMemberArenaInformations {
	return &PartyMemberArenaInformations{MessageBase: MessageBase{MessageType_: "PartyMemberArenaInformations", id_: 2056}}
}
func (m *PartyMemberArenaInformations) Deserialize(input *DataWrapper) {
	m.PartyMemberInformations.Deserialize(input)
	m.Rank = input.ReadVarUhShort()
}

func (m *PartyMemberArenaInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberEjectedMessage struct {
	MessageBase
	PartyMemberRemoveMessage
	KickerId int64
}

func NewPartyMemberEjectedMessage() *PartyMemberEjectedMessage {
	return &PartyMemberEjectedMessage{MessageBase: MessageBase{MessageType_: "PartyMemberEjectedMessage", id_: 9438}}
}
func (m *PartyMemberEjectedMessage) Deserialize(input *DataWrapper) {
	m.PartyMemberRemoveMessage.Deserialize(input)
	m.KickerId = input.ReadVarUhLong()
}

func (m *PartyMemberEjectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberGeoPosition struct {
	MessageBase
	MemberId  int32
	WorldX    int16
	WorldY    int16
	MapId     float64
	SubAreaId int
}

func NewPartyMemberGeoPosition() *PartyMemberGeoPosition {
	return &PartyMemberGeoPosition{MessageBase: MessageBase{MessageType_: "PartyMemberGeoPosition", id_: 5313}}
}
func (m *PartyMemberGeoPosition) Deserialize(input *DataWrapper) {
	m.MemberId = input.ReadInt()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *PartyMemberGeoPosition) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberInBreachFightMessage struct {
	MessageBase
	AbstractPartyMemberInFightMessage
	Floor int
	Room  int8
}

func NewPartyMemberInBreachFightMessage() *PartyMemberInBreachFightMessage {
	return &PartyMemberInBreachFightMessage{MessageBase: MessageBase{MessageType_: "PartyMemberInBreachFightMessage", id_: 2380}}
}
func (m *PartyMemberInBreachFightMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMemberInFightMessage.Deserialize(input)
	m.Floor = input.ReadVarUhInt()
	m.Room = input.ReadByte()
}

func (m *PartyMemberInBreachFightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberInStandardFightMessage struct {
	MessageBase
	AbstractPartyMemberInFightMessage
	FightMap *MapCoordinatesExtended
}

func NewPartyMemberInStandardFightMessage() *PartyMemberInStandardFightMessage {
	return &PartyMemberInStandardFightMessage{MessageBase: MessageBase{MessageType_: "PartyMemberInStandardFightMessage", id_: 8285}}
}
func (m *PartyMemberInStandardFightMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMemberInFightMessage.Deserialize(input)
	m.FightMap = NewMapCoordinatesExtended()
	m.FightMap.Deserialize(input)
}

func (m *PartyMemberInStandardFightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberInformationsI interface {
	Deserialize(input *DataWrapper)
}

type PartyMemberInformations struct {
	MessageBase
	CharacterBaseInformations
	LifePoints    int
	MaxLifePoints int
	Prospecting   int
	RegenRate     uint8
	Initiative    int
	AlignmentSide int8
	WorldX        int16
	WorldY        int16
	MapId         float64
	SubAreaId     int
	Status        PlayerStatusI
	Entities      *Vector[PartyEntityBaseInformationI]
}

func NewPartyMemberInformations() *PartyMemberInformations {
	return &PartyMemberInformations{MessageBase: MessageBase{MessageType_: "PartyMemberInformations", id_: 9391}}
}
func (m *PartyMemberInformations) Deserialize(input *DataWrapper) {
	m.CharacterBaseInformations.Deserialize(input)
	m.LifePoints = input.ReadVarUhInt()
	m.MaxLifePoints = input.ReadVarUhInt()
	m.Prospecting = input.ReadVarUhInt()
	m.RegenRate = input.ReadUnsignedByte()
	m.Initiative = input.ReadVarUhInt()
	m.AlignmentSide = input.ReadByte()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
	m.Entities = NewVector[PartyEntityBaseInformationI]()
	entitiesLen := int(input.ReadShort())
	for i := 0; i < entitiesLen; i++ {
		foundPartyEntityBaseInformation := getDynamicType(input)
		if castedPartyEntityBaseInformation, ok := foundPartyEntityBaseInformation.(PartyEntityBaseInformationI); ok {
			castedPartyEntityBaseInformation.Deserialize(input)
			m.Entities.Push(&castedPartyEntityBaseInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PartyEntityBaseInformationI, got: " + fmt.Sprintf("%T", foundPartyEntityBaseInformation))
		}
	}
}

func (m *PartyMemberInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyMemberRemoveMessage struct {
	MessageBase
	AbstractPartyEventMessage
	LeavingPlayerId int64
}

func NewPartyMemberRemoveMessage() *PartyMemberRemoveMessage {
	return &PartyMemberRemoveMessage{MessageBase: MessageBase{MessageType_: "PartyMemberRemoveMessage", id_: 7328}}
}
func (m *PartyMemberRemoveMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.LeavingPlayerId = input.ReadVarUhLong()
}

func (m *PartyMemberRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyModifiableStatusMessage struct {
	MessageBase
	AbstractPartyMessage
	Enabled bool
}

func NewPartyModifiableStatusMessage() *PartyModifiableStatusMessage {
	return &PartyModifiableStatusMessage{MessageBase: MessageBase{MessageType_: "PartyModifiableStatusMessage", id_: 2363}}
}
func (m *PartyModifiableStatusMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Enabled = input.ReadBoolean()
}

func (m *PartyModifiableStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyNameSetErrorMessage struct {
	MessageBase
	AbstractPartyMessage
	Result int8
}

func NewPartyNameSetErrorMessage() *PartyNameSetErrorMessage {
	return &PartyNameSetErrorMessage{MessageBase: MessageBase{MessageType_: "PartyNameSetErrorMessage", id_: 7989}}
}
func (m *PartyNameSetErrorMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Result = input.ReadByte()
}

func (m *PartyNameSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyNameSetRequestMessage struct {
	MessageBase
	AbstractPartyMessage
	PartyName string
}

func NewPartyNameSetRequestMessage() *PartyNameSetRequestMessage {
	return &PartyNameSetRequestMessage{MessageBase: MessageBase{MessageType_: "PartyNameSetRequestMessage", id_: 9125}}
}
func (m *PartyNameSetRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PartyName = input.ReadUTF()
}

func (m *PartyNameSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyNameUpdateMessage struct {
	MessageBase
	AbstractPartyMessage
	PartyName string
}

func NewPartyNameUpdateMessage() *PartyNameUpdateMessage {
	return &PartyNameUpdateMessage{MessageBase: MessageBase{MessageType_: "PartyNameUpdateMessage", id_: 9591}}
}
func (m *PartyNameUpdateMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PartyName = input.ReadUTF()
}

func (m *PartyNameUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyNewGuestMessage struct {
	MessageBase
	AbstractPartyEventMessage
	Guest *PartyGuestInformations
}

func NewPartyNewGuestMessage() *PartyNewGuestMessage {
	return &PartyNewGuestMessage{MessageBase: MessageBase{MessageType_: "PartyNewGuestMessage", id_: 7060}}
}
func (m *PartyNewGuestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.Guest = NewPartyGuestInformations()
	m.Guest.Deserialize(input)
}

func (m *PartyNewGuestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyNewMemberMessage struct {
	MessageBase
	PartyUpdateMessage
}

func NewPartyNewMemberMessage() *PartyNewMemberMessage {
	return &PartyNewMemberMessage{MessageBase: MessageBase{MessageType_: "PartyNewMemberMessage", id_: 4529}}
}
func (m *PartyNewMemberMessage) Deserialize(input *DataWrapper) {
	m.PartyUpdateMessage.Deserialize(input)
}

func (m *PartyNewMemberMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyPledgeLoyaltyRequestMessage struct {
	MessageBase
	AbstractPartyMessage
	Loyal bool
}

func NewPartyPledgeLoyaltyRequestMessage() *PartyPledgeLoyaltyRequestMessage {
	return &PartyPledgeLoyaltyRequestMessage{MessageBase: MessageBase{MessageType_: "PartyPledgeLoyaltyRequestMessage", id_: 7730}}
}
func (m *PartyPledgeLoyaltyRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Loyal = input.ReadBoolean()
}

func (m *PartyPledgeLoyaltyRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyRefuseInvitationMessage struct {
	MessageBase
	AbstractPartyMessage
}

func NewPartyRefuseInvitationMessage() *PartyRefuseInvitationMessage {
	return &PartyRefuseInvitationMessage{MessageBase: MessageBase{MessageType_: "PartyRefuseInvitationMessage", id_: 9721}}
}
func (m *PartyRefuseInvitationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
}

func (m *PartyRefuseInvitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyRefuseInvitationNotificationMessage struct {
	MessageBase
	AbstractPartyEventMessage
	GuestId int64
}

func NewPartyRefuseInvitationNotificationMessage() *PartyRefuseInvitationNotificationMessage {
	return &PartyRefuseInvitationNotificationMessage{MessageBase: MessageBase{MessageType_: "PartyRefuseInvitationNotificationMessage", id_: 1724}}
}
func (m *PartyRefuseInvitationNotificationMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.GuestId = input.ReadVarUhLong()
}

func (m *PartyRefuseInvitationNotificationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyRestrictedMessage struct {
	MessageBase
	AbstractPartyMessage
	Restricted bool
}

func NewPartyRestrictedMessage() *PartyRestrictedMessage {
	return &PartyRestrictedMessage{MessageBase: MessageBase{MessageType_: "PartyRestrictedMessage", id_: 2879}}
}
func (m *PartyRestrictedMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.Restricted = input.ReadBoolean()
}

func (m *PartyRestrictedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyStopFollowRequestMessage struct {
	MessageBase
	AbstractPartyMessage
	PlayerId int64
}

func NewPartyStopFollowRequestMessage() *PartyStopFollowRequestMessage {
	return &PartyStopFollowRequestMessage{MessageBase: MessageBase{MessageType_: "PartyStopFollowRequestMessage", id_: 8393}}
}
func (m *PartyStopFollowRequestMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *PartyStopFollowRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyUpdateLightMessage struct {
	MessageBase
	AbstractPartyEventMessage
	Id            int64
	LifePoints    int
	MaxLifePoints int
	Prospecting   int
	RegenRate     uint8
}

func NewPartyUpdateLightMessage() *PartyUpdateLightMessage {
	return &PartyUpdateLightMessage{MessageBase: MessageBase{MessageType_: "PartyUpdateLightMessage", id_: 4231}}
}
func (m *PartyUpdateLightMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.Id = input.ReadVarUhLong()
	m.LifePoints = input.ReadVarUhInt()
	m.MaxLifePoints = input.ReadVarUhInt()
	m.Prospecting = input.ReadVarUhInt()
	m.RegenRate = input.ReadUnsignedByte()
}

func (m *PartyUpdateLightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PartyUpdateMessage struct {
	MessageBase
	AbstractPartyEventMessage
	MemberInformations PartyMemberInformationsI
}

func NewPartyUpdateMessage() *PartyUpdateMessage {
	return &PartyUpdateMessage{MessageBase: MessageBase{MessageType_: "PartyUpdateMessage", id_: 5707}}
}
func (m *PartyUpdateMessage) Deserialize(input *DataWrapper) {
	m.AbstractPartyEventMessage.Deserialize(input)
	m.MemberInformations = getDynamicType(input)
	m.MemberInformations.Deserialize(input)
}

func (m *PartyUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PauseDialogMessage struct {
	MessageBase
	DialogType int8
}

func NewPauseDialogMessage() *PauseDialogMessage {
	return &PauseDialogMessage{MessageBase: MessageBase{MessageType_: "PauseDialogMessage", id_: 3238}}
}
func (m *PauseDialogMessage) Deserialize(input *DataWrapper) {
	m.DialogType = input.ReadByte()
}

func (m *PauseDialogMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerNote struct {
	MessageBase
	Content      string
	LastEditDate float64
}

func NewPlayerNote() *PlayerNote {
	return &PlayerNote{MessageBase: MessageBase{MessageType_: "PlayerNote", id_: 3703}}
}
func (m *PlayerNote) Deserialize(input *DataWrapper) {
	m.Content = input.ReadUTF()
	m.LastEditDate = input.ReadDouble()
}

func (m *PlayerNote) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerSearchCharacterNameInformation struct {
	MessageBase
	AbstractPlayerSearchInformation
	Name string
}

func NewPlayerSearchCharacterNameInformation() *PlayerSearchCharacterNameInformation {
	return &PlayerSearchCharacterNameInformation{MessageBase: MessageBase{MessageType_: "PlayerSearchCharacterNameInformation", id_: 3022}}
}
func (m *PlayerSearchCharacterNameInformation) Deserialize(input *DataWrapper) {
	m.AbstractPlayerSearchInformation.Deserialize(input)
	m.Name = input.ReadUTF()
}

func (m *PlayerSearchCharacterNameInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerSearchTagInformation struct {
	MessageBase
	AbstractPlayerSearchInformation
	Tag *AccountTagInformation
}

func NewPlayerSearchTagInformation() *PlayerSearchTagInformation {
	return &PlayerSearchTagInformation{MessageBase: MessageBase{MessageType_: "PlayerSearchTagInformation", id_: 3389}}
}
func (m *PlayerSearchTagInformation) Deserialize(input *DataWrapper) {
	m.AbstractPlayerSearchInformation.Deserialize(input)
	m.Tag = NewAccountTagInformation()
	m.Tag.Deserialize(input)
}

func (m *PlayerSearchTagInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerStatusI interface {
	Deserialize(input *DataWrapper)
}

type PlayerStatus struct {
	MessageBase
	StatusId int8
}

func NewPlayerStatus() *PlayerStatus {
	return &PlayerStatus{MessageBase: MessageBase{MessageType_: "PlayerStatus", id_: 2273}}
}
func (m *PlayerStatus) Deserialize(input *DataWrapper) {
	m.StatusId = input.ReadByte()
}

func (m *PlayerStatus) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerStatusExtended struct {
	MessageBase
	PlayerStatus
	Message string
}

func NewPlayerStatusExtended() *PlayerStatusExtended {
	return &PlayerStatusExtended{MessageBase: MessageBase{MessageType_: "PlayerStatusExtended", id_: 8257}}
}
func (m *PlayerStatusExtended) Deserialize(input *DataWrapper) {
	m.PlayerStatus.Deserialize(input)
	m.Message = input.ReadUTF()
}

func (m *PlayerStatusExtended) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerStatusUpdateErrorMessage struct {
	MessageBase
}

func NewPlayerStatusUpdateErrorMessage() *PlayerStatusUpdateErrorMessage {
	return &PlayerStatusUpdateErrorMessage{MessageBase: MessageBase{MessageType_: "PlayerStatusUpdateErrorMessage", id_: 3860}}
}
func (m *PlayerStatusUpdateErrorMessage) Deserialize(input *DataWrapper) {
}

func (m *PlayerStatusUpdateErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerStatusUpdateMessage struct {
	MessageBase
	AccountId int32
	PlayerId  int64
	Status    PlayerStatusI
}

func NewPlayerStatusUpdateMessage() *PlayerStatusUpdateMessage {
	return &PlayerStatusUpdateMessage{MessageBase: MessageBase{MessageType_: "PlayerStatusUpdateMessage", id_: 3675}}
}
func (m *PlayerStatusUpdateMessage) Deserialize(input *DataWrapper) {
	m.AccountId = input.ReadInt()
	m.PlayerId = input.ReadVarUhLong()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
}

func (m *PlayerStatusUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PlayerStatusUpdateRequestMessage struct {
	MessageBase
	Status PlayerStatusI
}

func NewPlayerStatusUpdateRequestMessage() *PlayerStatusUpdateRequestMessage {
	return &PlayerStatusUpdateRequestMessage{MessageBase: MessageBase{MessageType_: "PlayerStatusUpdateRequestMessage", id_: 4213}}
}
func (m *PlayerStatusUpdateRequestMessage) Deserialize(input *DataWrapper) {
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
}

func (m *PlayerStatusUpdateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PopupWarningCloseRequestMessage struct {
	MessageBase
}

func NewPopupWarningCloseRequestMessage() *PopupWarningCloseRequestMessage {
	return &PopupWarningCloseRequestMessage{MessageBase: MessageBase{MessageType_: "PopupWarningCloseRequestMessage", id_: 663}}
}
func (m *PopupWarningCloseRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *PopupWarningCloseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PopupWarningClosedMessage struct {
	MessageBase
}

func NewPopupWarningClosedMessage() *PopupWarningClosedMessage {
	return &PopupWarningClosedMessage{MessageBase: MessageBase{MessageType_: "PopupWarningClosedMessage", id_: 2757}}
}
func (m *PopupWarningClosedMessage) Deserialize(input *DataWrapper) {
}

func (m *PopupWarningClosedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PopupWarningMessage struct {
	MessageBase
	LockDuration uint8
	Author       string
	Content      string
}

func NewPopupWarningMessage() *PopupWarningMessage {
	return &PopupWarningMessage{MessageBase: MessageBase{MessageType_: "PopupWarningMessage", id_: 1024}}
}
func (m *PopupWarningMessage) Deserialize(input *DataWrapper) {
	m.LockDuration = input.ReadUnsignedByte()
	m.Author = input.ReadUTF()
	m.Content = input.ReadUTF()
}

func (m *PopupWarningMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PortalDialogCreationMessage struct {
	MessageBase
	NpcDialogCreationMessage
	Type int32
}

func NewPortalDialogCreationMessage() *PortalDialogCreationMessage {
	return &PortalDialogCreationMessage{MessageBase: MessageBase{MessageType_: "PortalDialogCreationMessage", id_: 6302}}
}
func (m *PortalDialogCreationMessage) Deserialize(input *DataWrapper) {
	m.NpcDialogCreationMessage.Deserialize(input)
	m.Type = input.ReadInt()
}

func (m *PortalDialogCreationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PortalInformationI interface {
	Deserialize(input *DataWrapper)
}

type PortalInformation struct {
	MessageBase
	PortalId int32
	AreaId   int16
}

func NewPortalInformation() *PortalInformation {
	return &PortalInformation{MessageBase: MessageBase{MessageType_: "PortalInformation", id_: 2396}}
}
func (m *PortalInformation) Deserialize(input *DataWrapper) {
	m.PortalId = input.ReadInt()
	m.AreaId = input.ReadShort()
}

func (m *PortalInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PortalUseRequestMessage struct {
	MessageBase
	PortalId int
}

func NewPortalUseRequestMessage() *PortalUseRequestMessage {
	return &PortalUseRequestMessage{MessageBase: MessageBase{MessageType_: "PortalUseRequestMessage", id_: 6790}}
}
func (m *PortalUseRequestMessage) Deserialize(input *DataWrapper) {
	m.PortalId = input.ReadVarUhInt()
}

func (m *PortalUseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetI interface {
	Deserialize(input *DataWrapper)
}

type Preset struct {
	MessageBase
	Id int16
}

func NewPreset() *Preset {
	return &Preset{MessageBase: MessageBase{MessageType_: "Preset", id_: 3628}}
}
func (m *Preset) Deserialize(input *DataWrapper) {
	m.Id = input.ReadShort()
}

func (m *Preset) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetDeleteRequestMessage struct {
	MessageBase
	PresetId int16
}

func NewPresetDeleteRequestMessage() *PresetDeleteRequestMessage {
	return &PresetDeleteRequestMessage{MessageBase: MessageBase{MessageType_: "PresetDeleteRequestMessage", id_: 7052}}
}
func (m *PresetDeleteRequestMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
}

func (m *PresetDeleteRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetDeleteResultMessage struct {
	MessageBase
	PresetId int16
	Code     int8
}

func NewPresetDeleteResultMessage() *PresetDeleteResultMessage {
	return &PresetDeleteResultMessage{MessageBase: MessageBase{MessageType_: "PresetDeleteResultMessage", id_: 6319}}
}
func (m *PresetDeleteResultMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.Code = input.ReadByte()
}

func (m *PresetDeleteResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetSaveErrorMessage struct {
	MessageBase
	PresetId int16
	Code     int8
}

func NewPresetSaveErrorMessage() *PresetSaveErrorMessage {
	return &PresetSaveErrorMessage{MessageBase: MessageBase{MessageType_: "PresetSaveErrorMessage", id_: 7630}}
}
func (m *PresetSaveErrorMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.Code = input.ReadByte()
}

func (m *PresetSaveErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetSavedMessage struct {
	MessageBase
	PresetId int16
	Preset   PresetI
}

func NewPresetSavedMessage() *PresetSavedMessage {
	return &PresetSavedMessage{MessageBase: MessageBase{MessageType_: "PresetSavedMessage", id_: 889}}
}
func (m *PresetSavedMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.Preset = getDynamicType(input)
	m.Preset.Deserialize(input)
}

func (m *PresetSavedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetUseRequestMessage struct {
	MessageBase
	PresetId int16
}

func NewPresetUseRequestMessage() *PresetUseRequestMessage {
	return &PresetUseRequestMessage{MessageBase: MessageBase{MessageType_: "PresetUseRequestMessage", id_: 7506}}
}
func (m *PresetUseRequestMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
}

func (m *PresetUseRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetUseResultMessage struct {
	MessageBase
	PresetId int16
	Code     int8
}

func NewPresetUseResultMessage() *PresetUseResultMessage {
	return &PresetUseResultMessage{MessageBase: MessageBase{MessageType_: "PresetUseResultMessage", id_: 799}}
}
func (m *PresetUseResultMessage) Deserialize(input *DataWrapper) {
	m.PresetId = input.ReadShort()
	m.Code = input.ReadByte()
}

func (m *PresetUseResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetUseResultWithMissingIdsMessage struct {
	MessageBase
	PresetUseResultMessage
	MissingIds *Vector[int]
}

func NewPresetUseResultWithMissingIdsMessage() *PresetUseResultWithMissingIdsMessage {
	return &PresetUseResultWithMissingIdsMessage{MessageBase: MessageBase{MessageType_: "PresetUseResultWithMissingIdsMessage", id_: 5059}}
}
func (m *PresetUseResultWithMissingIdsMessage) Deserialize(input *DataWrapper) {
	m.PresetUseResultMessage.Deserialize(input)
	m.MissingIds = NewVector[int]()
	missingIdsLen := int(input.ReadShort())
	for i := 0; i < missingIdsLen; i++ {
		val := input.ReadVarShort()
		m.MissingIds.Push(&val)
	}
}

func (m *PresetUseResultWithMissingIdsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetsContainerPreset struct {
	MessageBase
	Preset
	Presets *Vector[PresetI]
}

func NewPresetsContainerPreset() *PresetsContainerPreset {
	return &PresetsContainerPreset{MessageBase: MessageBase{MessageType_: "PresetsContainerPreset", id_: 5695}}
}
func (m *PresetsContainerPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.Presets = NewVector[PresetI]()
	presetsLen := int(input.ReadShort())
	for i := 0; i < presetsLen; i++ {
		foundPreset := getDynamicType(input)
		if castedPreset, ok := foundPreset.(PresetI); ok {
			castedPreset.Deserialize(input)
			m.Presets.Push(&castedPreset)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PresetI, got: " + fmt.Sprintf("%T", foundPreset))
		}
	}
}

func (m *PresetsContainerPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type PresetsMessage struct {
	MessageBase
	Presets *Vector[PresetI]
}

func NewPresetsMessage() *PresetsMessage {
	return &PresetsMessage{MessageBase: MessageBase{MessageType_: "PresetsMessage", id_: 8873}}
}
func (m *PresetsMessage) Deserialize(input *DataWrapper) {
	m.Presets = NewVector[PresetI]()
	presetsLen := int(input.ReadShort())
	for i := 0; i < presetsLen; i++ {
		foundPreset := getDynamicType(input)
		if castedPreset, ok := foundPreset.(PresetI); ok {
			castedPreset.Deserialize(input)
			m.Presets.Push(&castedPreset)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PresetI, got: " + fmt.Sprintf("%T", foundPreset))
		}
	}
}

func (m *PresetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismAddOrUpdateMessage struct {
	MessageBase
	Prism PrismGeolocalizedInformationI
}

func NewPrismAddOrUpdateMessage() *PrismAddOrUpdateMessage {
	return &PrismAddOrUpdateMessage{MessageBase: MessageBase{MessageType_: "PrismAddOrUpdateMessage", id_: 1525}}
}
func (m *PrismAddOrUpdateMessage) Deserialize(input *DataWrapper) {
	m.Prism = NewPrismGeolocalizedInformation()
	m.Prism.Deserialize(input)
}

func (m *PrismAddOrUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismAttackRequestMessage struct {
	MessageBase
}

func NewPrismAttackRequestMessage() *PrismAttackRequestMessage {
	return &PrismAttackRequestMessage{MessageBase: MessageBase{MessageType_: "PrismAttackRequestMessage", id_: 6412}}
}
func (m *PrismAttackRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *PrismAttackRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismAttackResultMessage struct {
	MessageBase
	Prism  PrismGeolocalizedInformationI
	Result int8
}

func NewPrismAttackResultMessage() *PrismAttackResultMessage {
	return &PrismAttackResultMessage{MessageBase: MessageBase{MessageType_: "PrismAttackResultMessage", id_: 8541}}
}
func (m *PrismAttackResultMessage) Deserialize(input *DataWrapper) {
	m.Prism = NewPrismGeolocalizedInformation()
	m.Prism.Deserialize(input)
	m.Result = input.ReadByte()
}

func (m *PrismAttackResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismAttackedMessage struct {
	MessageBase
	Prism PrismGeolocalizedInformationI
}

func NewPrismAttackedMessage() *PrismAttackedMessage {
	return &PrismAttackedMessage{MessageBase: MessageBase{MessageType_: "PrismAttackedMessage", id_: 48}}
}
func (m *PrismAttackedMessage) Deserialize(input *DataWrapper) {
	m.Prism = NewPrismGeolocalizedInformation()
	m.Prism.Deserialize(input)
}

func (m *PrismAttackedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismExchangeRequestMessage struct {
	MessageBase
}

func NewPrismExchangeRequestMessage() *PrismExchangeRequestMessage {
	return &PrismExchangeRequestMessage{MessageBase: MessageBase{MessageType_: "PrismExchangeRequestMessage", id_: 1588}}
}
func (m *PrismExchangeRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *PrismExchangeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismGeolocalizedInformationI interface {
	Deserialize(input *DataWrapper)
}

type PrismGeolocalizedInformation struct {
	MessageBase
	SubAreaId  int
	AllianceId int
	WorldX     int16
	WorldY     int16
	MapId      float64
	Prism      PrismInformationI
}

func NewPrismGeolocalizedInformation() *PrismGeolocalizedInformation {
	return &PrismGeolocalizedInformation{MessageBase: MessageBase{MessageType_: "PrismGeolocalizedInformation", id_: 9281}}
}
func (m *PrismGeolocalizedInformation) Deserialize(input *DataWrapper) {
	m.SubAreaId = input.ReadVarUhShort()
	m.AllianceId = input.ReadVarUhInt()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.Prism = getDynamicType(input)
	m.Prism.Deserialize(input)
}

func (m *PrismGeolocalizedInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismInformationI interface {
	Deserialize(input *DataWrapper)
}

type PrismInformation struct {
	MessageBase
	State             int8
	PlacementDate     int32
	NuggetsCount      int
	Durability        int32
	NextEvolutionDate float64
}

func NewPrismInformation() *PrismInformation {
	return &PrismInformation{MessageBase: MessageBase{MessageType_: "PrismInformation", id_: 65}}
}
func (m *PrismInformation) Deserialize(input *DataWrapper) {
	m.State = input.ReadByte()
	m.PlacementDate = input.ReadInt()
	m.NuggetsCount = input.ReadVarUhInt()
	m.Durability = input.ReadInt()
	m.NextEvolutionDate = input.ReadDouble()
}

func (m *PrismInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismRecycleTradeRequestMessage struct {
	MessageBase
}

func NewPrismRecycleTradeRequestMessage() *PrismRecycleTradeRequestMessage {
	return &PrismRecycleTradeRequestMessage{MessageBase: MessageBase{MessageType_: "PrismRecycleTradeRequestMessage", id_: 299}}
}
func (m *PrismRecycleTradeRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *PrismRecycleTradeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismRemoveMessage struct {
	MessageBase
	Prism PrismGeolocalizedInformationI
}

func NewPrismRemoveMessage() *PrismRemoveMessage {
	return &PrismRemoveMessage{MessageBase: MessageBase{MessageType_: "PrismRemoveMessage", id_: 4672}}
}
func (m *PrismRemoveMessage) Deserialize(input *DataWrapper) {
	m.Prism = NewPrismGeolocalizedInformation()
	m.Prism.Deserialize(input)
}

func (m *PrismRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismTeleportationRequestMessage struct {
	MessageBase
}

func NewPrismTeleportationRequestMessage() *PrismTeleportationRequestMessage {
	return &PrismTeleportationRequestMessage{MessageBase: MessageBase{MessageType_: "PrismTeleportationRequestMessage", id_: 7355}}
}
func (m *PrismTeleportationRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *PrismTeleportationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type PrismsListMessage struct {
	MessageBase
	Prisms *Vector[PrismGeolocalizedInformationI]
}

func NewPrismsListMessage() *PrismsListMessage {
	return &PrismsListMessage{MessageBase: MessageBase{MessageType_: "PrismsListMessage", id_: 7733}}
}
func (m *PrismsListMessage) Deserialize(input *DataWrapper) {
	m.Prisms = NewVector[PrismGeolocalizedInformationI]()
	prismsLen := int(input.ReadShort())
	for i := 0; i < prismsLen; i++ {
		foundPrismGeolocalizedInformation := getDynamicType(input)
		if castedPrismGeolocalizedInformation, ok := foundPrismGeolocalizedInformation.(PrismGeolocalizedInformationI); ok {
			castedPrismGeolocalizedInformation.Deserialize(input)
			m.Prisms.Push(&castedPrismGeolocalizedInformation)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement PrismGeolocalizedInformationI, got: " + fmt.Sprintf("%T", foundPrismGeolocalizedInformation))
		}
	}
}

func (m *PrismsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ProtectedEntityWaitingForHelpInfo struct {
	MessageBase
	TimeLeftBeforeFight    int32
	WaitTimeForPlacement   int32
	NbPositionForDefensors int8
}

func NewProtectedEntityWaitingForHelpInfo() *ProtectedEntityWaitingForHelpInfo {
	return &ProtectedEntityWaitingForHelpInfo{MessageBase: MessageBase{MessageType_: "ProtectedEntityWaitingForHelpInfo", id_: 9739}}
}
func (m *ProtectedEntityWaitingForHelpInfo) Deserialize(input *DataWrapper) {
	m.TimeLeftBeforeFight = input.ReadInt()
	m.WaitTimeForPlacement = input.ReadInt()
	m.NbPositionForDefensors = input.ReadByte()
}

func (m *ProtectedEntityWaitingForHelpInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type ProtocolRequired struct {
	MessageBase
	Version string
}

func NewProtocolRequired() *ProtocolRequired {
	return &ProtocolRequired{MessageBase: MessageBase{MessageType_: "ProtocolRequired", id_: 1939}}
}
func (m *ProtocolRequired) Deserialize(input *DataWrapper) {
	m.Version = input.ReadUTF()
}

func (m *ProtocolRequired) IsDeserializeFunctionComplete() bool {
	return true
}

type PurchasableDialogMessage struct {
	MessageBase
	BuyOrSell             bool
	PurchasableId         float64
	PurchasableInstanceId int32
	SecondHand            bool
	Price                 int64
}

func NewPurchasableDialogMessage() *PurchasableDialogMessage {
	return &PurchasableDialogMessage{MessageBase: MessageBase{MessageType_: "PurchasableDialogMessage", id_: 100}}
}
func (m *PurchasableDialogMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.BuyOrSell = (byteBox0>>0)&1 != 0
	m.SecondHand = (byteBox0>>1)&1 != 0
	m.PurchasableId = input.ReadDouble()
	m.PurchasableInstanceId = input.ReadInt()
	m.Price = input.ReadVarUhLong()
}

func (m *PurchasableDialogMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestActiveDetailedInformations struct {
	MessageBase
	QuestActiveInformations
	StepId     int
	Objectives *Vector[QuestObjectiveInformationsI]
}

func NewQuestActiveDetailedInformations() *QuestActiveDetailedInformations {
	return &QuestActiveDetailedInformations{MessageBase: MessageBase{MessageType_: "QuestActiveDetailedInformations", id_: 7451}}
}
func (m *QuestActiveDetailedInformations) Deserialize(input *DataWrapper) {
	m.QuestActiveInformations.Deserialize(input)
	m.StepId = input.ReadVarUhShort()
	m.Objectives = NewVector[QuestObjectiveInformationsI]()
	objectivesLen := int(input.ReadShort())
	for i := 0; i < objectivesLen; i++ {
		foundQuestObjectiveInformations := getDynamicType(input)
		if castedQuestObjectiveInformations, ok := foundQuestObjectiveInformations.(QuestObjectiveInformationsI); ok {
			castedQuestObjectiveInformations.Deserialize(input)
			m.Objectives.Push(&castedQuestObjectiveInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement QuestObjectiveInformationsI, got: " + fmt.Sprintf("%T", foundQuestObjectiveInformations))
		}
	}
}

func (m *QuestActiveDetailedInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestActiveInformationsI interface {
	Deserialize(input *DataWrapper)
}

type QuestActiveInformations struct {
	MessageBase
	QuestId int
}

func NewQuestActiveInformations() *QuestActiveInformations {
	return &QuestActiveInformations{MessageBase: MessageBase{MessageType_: "QuestActiveInformations", id_: 7048}}
}
func (m *QuestActiveInformations) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
}

func (m *QuestActiveInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestListMessage struct {
	MessageBase
	FinishedQuestsIds    *Vector[int]
	FinishedQuestsCounts *Vector[int]
	ActiveQuests         *Vector[QuestActiveInformationsI]
	ReinitDoneQuestsIds  *Vector[int]
}

func NewQuestListMessage() *QuestListMessage {
	return &QuestListMessage{MessageBase: MessageBase{MessageType_: "QuestListMessage", id_: 3323}}
}
func (m *QuestListMessage) Deserialize(input *DataWrapper) {
	m.FinishedQuestsIds = NewVector[int]()
	finishedQuestsIdsLen := int(input.ReadShort())
	for i := 0; i < finishedQuestsIdsLen; i++ {
		val := input.ReadVarShort()
		m.FinishedQuestsIds.Push(&val)
	}
	m.FinishedQuestsCounts = NewVector[int]()
	finishedQuestsCountsLen := int(input.ReadShort())
	for i := 0; i < finishedQuestsCountsLen; i++ {
		val := input.ReadVarShort()
		m.FinishedQuestsCounts.Push(&val)
	}
	m.ActiveQuests = NewVector[QuestActiveInformationsI]()
	activeQuestsLen := int(input.ReadShort())
	for i := 0; i < activeQuestsLen; i++ {
		foundQuestActiveInformations := getDynamicType(input)
		if castedQuestActiveInformations, ok := foundQuestActiveInformations.(QuestActiveInformationsI); ok {
			castedQuestActiveInformations.Deserialize(input)
			m.ActiveQuests.Push(&castedQuestActiveInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement QuestActiveInformationsI, got: " + fmt.Sprintf("%T", foundQuestActiveInformations))
		}
	}
	m.ReinitDoneQuestsIds = NewVector[int]()
	reinitDoneQuestsIdsLen := int(input.ReadShort())
	for i := 0; i < reinitDoneQuestsIdsLen; i++ {
		val := input.ReadVarShort()
		m.ReinitDoneQuestsIds.Push(&val)
	}
}

func (m *QuestListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestListRequestMessage struct {
	MessageBase
}

func NewQuestListRequestMessage() *QuestListRequestMessage {
	return &QuestListRequestMessage{MessageBase: MessageBase{MessageType_: "QuestListRequestMessage", id_: 7114}}
}
func (m *QuestListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *QuestListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestObjectiveInformationsI interface {
	Deserialize(input *DataWrapper)
}

type QuestObjectiveInformations struct {
	MessageBase
	ObjectiveId     int
	ObjectiveStatus bool
	DialogParams    *Vector[string]
}

func NewQuestObjectiveInformations() *QuestObjectiveInformations {
	return &QuestObjectiveInformations{MessageBase: MessageBase{MessageType_: "QuestObjectiveInformations", id_: 7248}}
}
func (m *QuestObjectiveInformations) Deserialize(input *DataWrapper) {
	m.ObjectiveId = input.ReadVarUhShort()
	m.ObjectiveStatus = input.ReadBoolean()
	m.DialogParams = NewVector[string]()
	dialogParamsLen := int(input.ReadShort())
	for i := 0; i < dialogParamsLen; i++ {
		val := input.ReadUTF()
		m.DialogParams.Push(&val)
	}
}

func (m *QuestObjectiveInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestObjectiveInformationsWithCompletion struct {
	MessageBase
	QuestObjectiveInformations
	CurCompletion int
	MaxCompletion int
}

func NewQuestObjectiveInformationsWithCompletion() *QuestObjectiveInformationsWithCompletion {
	return &QuestObjectiveInformationsWithCompletion{MessageBase: MessageBase{MessageType_: "QuestObjectiveInformationsWithCompletion", id_: 8731}}
}
func (m *QuestObjectiveInformationsWithCompletion) Deserialize(input *DataWrapper) {
	m.QuestObjectiveInformations.Deserialize(input)
	m.CurCompletion = input.ReadVarUhShort()
	m.MaxCompletion = input.ReadVarUhShort()
}

func (m *QuestObjectiveInformationsWithCompletion) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestObjectiveValidatedMessage struct {
	MessageBase
	QuestId     int
	ObjectiveId int
}

func NewQuestObjectiveValidatedMessage() *QuestObjectiveValidatedMessage {
	return &QuestObjectiveValidatedMessage{MessageBase: MessageBase{MessageType_: "QuestObjectiveValidatedMessage", id_: 3508}}
}
func (m *QuestObjectiveValidatedMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.ObjectiveId = input.ReadVarUhShort()
}

func (m *QuestObjectiveValidatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestObjectiveValidationMessage struct {
	MessageBase
	QuestId     int
	ObjectiveId int
}

func NewQuestObjectiveValidationMessage() *QuestObjectiveValidationMessage {
	return &QuestObjectiveValidationMessage{MessageBase: MessageBase{MessageType_: "QuestObjectiveValidationMessage", id_: 4654}}
}
func (m *QuestObjectiveValidationMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.ObjectiveId = input.ReadVarUhShort()
}

func (m *QuestObjectiveValidationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStartRequestMessage struct {
	MessageBase
	QuestId int
}

func NewQuestStartRequestMessage() *QuestStartRequestMessage {
	return &QuestStartRequestMessage{MessageBase: MessageBase{MessageType_: "QuestStartRequestMessage", id_: 8398}}
}
func (m *QuestStartRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
}

func (m *QuestStartRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStartedMessage struct {
	MessageBase
	QuestId int
}

func NewQuestStartedMessage() *QuestStartedMessage {
	return &QuestStartedMessage{MessageBase: MessageBase{MessageType_: "QuestStartedMessage", id_: 8372}}
}
func (m *QuestStartedMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
}

func (m *QuestStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStepInfoMessage struct {
	MessageBase
	Infos QuestActiveInformationsI
}

func NewQuestStepInfoMessage() *QuestStepInfoMessage {
	return &QuestStepInfoMessage{MessageBase: MessageBase{MessageType_: "QuestStepInfoMessage", id_: 830}}
}
func (m *QuestStepInfoMessage) Deserialize(input *DataWrapper) {
	m.Infos = getDynamicType(input)
	m.Infos.Deserialize(input)
}

func (m *QuestStepInfoMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStepInfoRequestMessage struct {
	MessageBase
	QuestId int
}

func NewQuestStepInfoRequestMessage() *QuestStepInfoRequestMessage {
	return &QuestStepInfoRequestMessage{MessageBase: MessageBase{MessageType_: "QuestStepInfoRequestMessage", id_: 5778}}
}
func (m *QuestStepInfoRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
}

func (m *QuestStepInfoRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStepStartedMessage struct {
	MessageBase
	QuestId int
	StepId  int
}

func NewQuestStepStartedMessage() *QuestStepStartedMessage {
	return &QuestStepStartedMessage{MessageBase: MessageBase{MessageType_: "QuestStepStartedMessage", id_: 2945}}
}
func (m *QuestStepStartedMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.StepId = input.ReadVarUhShort()
}

func (m *QuestStepStartedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestStepValidatedMessage struct {
	MessageBase
	QuestId int
	StepId  int
}

func NewQuestStepValidatedMessage() *QuestStepValidatedMessage {
	return &QuestStepValidatedMessage{MessageBase: MessageBase{MessageType_: "QuestStepValidatedMessage", id_: 4373}}
}
func (m *QuestStepValidatedMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.StepId = input.ReadVarUhShort()
}

func (m *QuestStepValidatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QuestValidatedMessage struct {
	MessageBase
	QuestId int
}

func NewQuestValidatedMessage() *QuestValidatedMessage {
	return &QuestValidatedMessage{MessageBase: MessageBase{MessageType_: "QuestValidatedMessage", id_: 1736}}
}
func (m *QuestValidatedMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
}

func (m *QuestValidatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type QueueStatusMessage struct {
	MessageBase
	Position uint16
	Total    uint16
}

func NewQueueStatusMessage() *QueueStatusMessage {
	return &QueueStatusMessage{MessageBase: MessageBase{MessageType_: "QueueStatusMessage", id_: 4838}}
}
func (m *QueueStatusMessage) Deserialize(input *DataWrapper) {
	m.Position = input.ReadUnsignedShort()
	m.Total = input.ReadUnsignedShort()
}

func (m *QueueStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RankInformation struct {
	MessageBase
	RankMinimalInformation
	Order      int
	GfxId      int
	Modifiable bool
	Rights     *Vector[int]
}

func NewRankInformation() *RankInformation {
	return &RankInformation{MessageBase: MessageBase{MessageType_: "RankInformation", id_: 3538}}
}
func (m *RankInformation) Deserialize(input *DataWrapper) {
	m.RankMinimalInformation.Deserialize(input)
	m.Order = input.ReadVarUhInt()
	m.GfxId = input.ReadVarUhInt()
	m.Modifiable = input.ReadBoolean()
	m.Rights = NewVector[int]()
	rightsLen := int(input.ReadShort())
	for i := 0; i < rightsLen; i++ {
		val := input.ReadVarInt()
		m.Rights.Push(&val)
	}
}

func (m *RankInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type RankMinimalInformation struct {
	MessageBase
	Id   int
	Name string
}

func NewRankMinimalInformation() *RankMinimalInformation {
	return &RankMinimalInformation{MessageBase: MessageBase{MessageType_: "RankMinimalInformation", id_: 1831}}
}
func (m *RankMinimalInformation) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.Name = input.ReadUTF()
}

func (m *RankMinimalInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type RankPublicInformation struct {
	MessageBase
	RankMinimalInformation
	Order int
	GfxId int
}

func NewRankPublicInformation() *RankPublicInformation {
	return &RankPublicInformation{MessageBase: MessageBase{MessageType_: "RankPublicInformation", id_: 5787}}
}
func (m *RankPublicInformation) Deserialize(input *DataWrapper) {
	m.RankMinimalInformation.Deserialize(input)
	m.Order = input.ReadVarUhInt()
	m.GfxId = input.ReadVarUhInt()
}

func (m *RankPublicInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type RawDataMessage struct {
	MessageBase
	Content []byte
}

func NewRawDataMessage() *RawDataMessage {
	return &RawDataMessage{MessageBase: MessageBase{MessageType_: "RawDataMessage", id_: 6253}}
}
func (m *RawDataMessage) Deserialize(input *DataWrapper) {
	m.Content = input.ReadByteArray()
}

func (m *RawDataMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RecruitmentInformationMessage struct {
	MessageBase
	RecruitmentData *GuildRecruitmentInformation
}

func NewRecruitmentInformationMessage() *RecruitmentInformationMessage {
	return &RecruitmentInformationMessage{MessageBase: MessageBase{MessageType_: "RecruitmentInformationMessage", id_: 8248}}
}
func (m *RecruitmentInformationMessage) Deserialize(input *DataWrapper) {
	m.RecruitmentData = NewGuildRecruitmentInformation()
	m.RecruitmentData.Deserialize(input)
}

func (m *RecruitmentInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RecycleResultMessage struct {
	MessageBase
	NuggetsForPrism  int
	NuggetsForPlayer int
}

func NewRecycleResultMessage() *RecycleResultMessage {
	return &RecycleResultMessage{MessageBase: MessageBase{MessageType_: "RecycleResultMessage", id_: 4137}}
}
func (m *RecycleResultMessage) Deserialize(input *DataWrapper) {
	m.NuggetsForPrism = input.ReadVarUhInt()
	m.NuggetsForPlayer = input.ReadVarUhInt()
}

func (m *RecycleResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RecycledItem struct {
	MessageBase
	Id  int
	Qty uint32
}

func NewRecycledItem() *RecycledItem {
	return &RecycledItem{MessageBase: MessageBase{MessageType_: "RecycledItem", id_: 2736}}
}
func (m *RecycledItem) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhInt()
	m.Qty = input.ReadUnsignedInt()
}

func (m *RecycledItem) IsDeserializeFunctionComplete() bool {
	return true
}

type RefreshCharacterStatsMessage struct {
	MessageBase
	FighterId float64
	Stats     GameFightCharacteristicsI
}

func NewRefreshCharacterStatsMessage() *RefreshCharacterStatsMessage {
	return &RefreshCharacterStatsMessage{MessageBase: MessageBase{MessageType_: "RefreshCharacterStatsMessage", id_: 2710}}
}
func (m *RefreshCharacterStatsMessage) Deserialize(input *DataWrapper) {
	m.FighterId = input.ReadDouble()
	m.Stats = NewGameFightCharacteristics()
	m.Stats.Deserialize(input)
}

func (m *RefreshCharacterStatsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RefreshFollowedQuestsOrderRequestMessage struct {
	MessageBase
	Quests *Vector[int]
}

func NewRefreshFollowedQuestsOrderRequestMessage() *RefreshFollowedQuestsOrderRequestMessage {
	return &RefreshFollowedQuestsOrderRequestMessage{MessageBase: MessageBase{MessageType_: "RefreshFollowedQuestsOrderRequestMessage", id_: 3965}}
}
func (m *RefreshFollowedQuestsOrderRequestMessage) Deserialize(input *DataWrapper) {
	m.Quests = NewVector[int]()
	questsLen := int(input.ReadShort())
	for i := 0; i < questsLen; i++ {
		val := input.ReadVarShort()
		m.Quests.Push(&val)
	}
}

func (m *RefreshFollowedQuestsOrderRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ReleaseAccountMessage struct {
	MessageBase
}

func NewReleaseAccountMessage() *ReleaseAccountMessage {
	return &ReleaseAccountMessage{MessageBase: MessageBase{MessageType_: "ReleaseAccountMessage", id_: 3259}}
}
func (m *ReleaseAccountMessage) Deserialize(input *DataWrapper) {
}

func (m *ReleaseAccountMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ReloginTokenRequestMessage struct {
	MessageBase
}

func NewReloginTokenRequestMessage() *ReloginTokenRequestMessage {
	return &ReloginTokenRequestMessage{MessageBase: MessageBase{MessageType_: "ReloginTokenRequestMessage", id_: 7722}}
}
func (m *ReloginTokenRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *ReloginTokenRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ReloginTokenStatusMessage struct {
	MessageBase
	ValidToken bool
	Token      string
}

func NewReloginTokenStatusMessage() *ReloginTokenStatusMessage {
	return &ReloginTokenStatusMessage{MessageBase: MessageBase{MessageType_: "ReloginTokenStatusMessage", id_: 2673}}
}
func (m *ReloginTokenStatusMessage) Deserialize(input *DataWrapper) {
	m.ValidToken = input.ReadBoolean()
	m.Token = input.ReadUTF()
}

func (m *ReloginTokenStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RemodelingInformation struct {
	MessageBase
	Name       string
	Breed      int8
	Sex        bool
	CosmeticId int
	Colors     *Vector[int32]
}

func NewRemodelingInformation() *RemodelingInformation {
	return &RemodelingInformation{MessageBase: MessageBase{MessageType_: "RemodelingInformation", id_: 3743}}
}
func (m *RemodelingInformation) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.CosmeticId = input.ReadVarUhShort()
	m.Colors = NewVector[int32]()
	colorsLen := int(input.ReadShort())
	for i := 0; i < colorsLen; i++ {
		val := input.ReadInt()
		m.Colors.Push(&val)
	}
}

func (m *RemodelingInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type RemoveGuildRankRequestMessage struct {
	MessageBase
	RankId    int
	NewRankId int
}

func NewRemoveGuildRankRequestMessage() *RemoveGuildRankRequestMessage {
	return &RemoveGuildRankRequestMessage{MessageBase: MessageBase{MessageType_: "RemoveGuildRankRequestMessage", id_: 5524}}
}
func (m *RemoveGuildRankRequestMessage) Deserialize(input *DataWrapper) {
	m.RankId = input.ReadVarUhInt()
	m.NewRankId = input.ReadVarUhInt()
}

func (m *RemoveGuildRankRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RemoveListenerOnSynchronizedStorageMessage struct {
	MessageBase
	Player string
}

func NewRemoveListenerOnSynchronizedStorageMessage() *RemoveListenerOnSynchronizedStorageMessage {
	return &RemoveListenerOnSynchronizedStorageMessage{MessageBase: MessageBase{MessageType_: "RemoveListenerOnSynchronizedStorageMessage", id_: 91}}
}
func (m *RemoveListenerOnSynchronizedStorageMessage) Deserialize(input *DataWrapper) {
	m.Player = input.ReadUTF()
}

func (m *RemoveListenerOnSynchronizedStorageMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RemoveSpellModifierMessage struct {
	MessageBase
	ActorId      float64
	ActionType   int8
	ModifierType int8
	SpellId      int
}

func NewRemoveSpellModifierMessage() *RemoveSpellModifierMessage {
	return &RemoveSpellModifierMessage{MessageBase: MessageBase{MessageType_: "RemoveSpellModifierMessage", id_: 194}}
}
func (m *RemoveSpellModifierMessage) Deserialize(input *DataWrapper) {
	m.ActorId = input.ReadDouble()
	m.ActionType = input.ReadByte()
	m.ModifierType = input.ReadByte()
	m.SpellId = input.ReadVarUhShort()
}

func (m *RemoveSpellModifierMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RemoveTaxCollectorOrderedSpellMessage struct {
	MessageBase
	TaxCollectorId float64
	Slot           int8
}

func NewRemoveTaxCollectorOrderedSpellMessage() *RemoveTaxCollectorOrderedSpellMessage {
	return &RemoveTaxCollectorOrderedSpellMessage{MessageBase: MessageBase{MessageType_: "RemoveTaxCollectorOrderedSpellMessage", id_: 9951}}
}
func (m *RemoveTaxCollectorOrderedSpellMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
	m.Slot = input.ReadByte()
}

func (m *RemoveTaxCollectorOrderedSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type RemoveTaxCollectorPresetSpellMessage struct {
	MessageBase
	PresetId *Uuid
	Slot     int8
}

func NewRemoveTaxCollectorPresetSpellMessage() *RemoveTaxCollectorPresetSpellMessage {
	return &RemoveTaxCollectorPresetSpellMessage{MessageBase: MessageBase{MessageType_: "RemoveTaxCollectorPresetSpellMessage", id_: 5781}}
}
func (m *RemoveTaxCollectorPresetSpellMessage) Deserialize(input *DataWrapper) {
	m.PresetId = NewUuid()
	m.PresetId.Deserialize(input)
	m.Slot = input.ReadByte()
}

func (m *RemoveTaxCollectorPresetSpellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ReportRequestMessage struct {
	MessageBase
	TargetId    float64
	Categories  *Vector[int8]
	Description string
}

func NewReportRequestMessage() *ReportRequestMessage {
	return &ReportRequestMessage{MessageBase: MessageBase{MessageType_: "ReportRequestMessage", id_: 8254}}
}
func (m *ReportRequestMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadDouble()
	m.Categories = NewVector[int8]()
	categoriesLen := int(input.ReadShort())
	for i := 0; i < categoriesLen; i++ {
		val := input.ReadByte()
		m.Categories.Push(&val)
	}
	m.Description = input.ReadUTF()
}

func (m *ReportRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ReportResponseMessage struct {
	MessageBase
	Success bool
}

func NewReportResponseMessage() *ReportResponseMessage {
	return &ReportResponseMessage{MessageBase: MessageBase{MessageType_: "ReportResponseMessage", id_: 8138}}
}
func (m *ReportResponseMessage) Deserialize(input *DataWrapper) {
	m.Success = input.ReadBoolean()
}

func (m *ReportResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ResetCharacterStatsRequestMessage struct {
	MessageBase
}

func NewResetCharacterStatsRequestMessage() *ResetCharacterStatsRequestMessage {
	return &ResetCharacterStatsRequestMessage{MessageBase: MessageBase{MessageType_: "ResetCharacterStatsRequestMessage", id_: 7045}}
}
func (m *ResetCharacterStatsRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *ResetCharacterStatsRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SelectedServerDataExtendedMessage struct {
	MessageBase
	SelectedServerDataMessage
	Servers *Vector[GameServerInformations]
}

func NewSelectedServerDataExtendedMessage() *SelectedServerDataExtendedMessage {
	return &SelectedServerDataExtendedMessage{MessageBase: MessageBase{MessageType_: "SelectedServerDataExtendedMessage", id_: 7269}}
}
func (m *SelectedServerDataExtendedMessage) Deserialize(input *DataWrapper) {
	m.SelectedServerDataMessage.Deserialize(input)
	m.Servers = NewVector[GameServerInformations]()
	serversLen := int(input.ReadShort())
	for i := 0; i < serversLen; i++ {
		GameServerInformations := NewGameServerInformations()
		GameServerInformations.Deserialize(input)
		m.Servers.Push(GameServerInformations)
	}
}

func (m *SelectedServerDataExtendedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SelectedServerDataMessage struct {
	MessageBase
	ServerId              int
	Address               string
	Ports                 *Vector[int]
	CanCreateNewCharacter bool
	Ticket                *Vector[int8]
}

func NewSelectedServerDataMessage() *SelectedServerDataMessage {
	return &SelectedServerDataMessage{MessageBase: MessageBase{MessageType_: "SelectedServerDataMessage", id_: 4944}}
}
func (m *SelectedServerDataMessage) Deserialize(input *DataWrapper) {
	m.ServerId = input.ReadVarUhShort()
	m.Address = input.ReadUTF()
	m.Ports = NewVector[int]()
	portsLen := int(input.ReadShort())
	for i := 0; i < portsLen; i++ {
		val := input.ReadVarShort()
		m.Ports.Push(&val)
	}
	m.CanCreateNewCharacter = input.ReadBoolean()
	m.Ticket = NewVector[int8]()
	ticketLen := int(input.ReadVarInt())
	for i := 0; i < ticketLen; i++ {
		val := input.ReadByte()
		m.Ticket.Push(&val)
	}
}

func (m *SelectedServerDataMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SelectedServerRefusedMessage struct {
	MessageBase
	ServerId     int
	Error        int8
	ServerStatus int8
}

func NewSelectedServerRefusedMessage() *SelectedServerRefusedMessage {
	return &SelectedServerRefusedMessage{MessageBase: MessageBase{MessageType_: "SelectedServerRefusedMessage", id_: 277}}
}
func (m *SelectedServerRefusedMessage) Deserialize(input *DataWrapper) {
	m.ServerId = input.ReadVarUhShort()
	m.Error = input.ReadByte()
	m.ServerStatus = input.ReadByte()
}

func (m *SelectedServerRefusedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SellerBuyerDescriptor struct {
	MessageBase
	Quantities                *Vector[int]
	Types                     *Vector[int]
	TaxPercentage             float32
	TaxModificationPercentage float32
	MaxItemLevel              uint8
	MaxItemPerAccount         int
	NpcContextualId           int32
	UnsoldDelay               int
}

func NewSellerBuyerDescriptor() *SellerBuyerDescriptor {
	return &SellerBuyerDescriptor{MessageBase: MessageBase{MessageType_: "SellerBuyerDescriptor", id_: 780}}
}
func (m *SellerBuyerDescriptor) Deserialize(input *DataWrapper) {
	m.Quantities = NewVector[int]()
	quantitiesLen := int(input.ReadShort())
	for i := 0; i < quantitiesLen; i++ {
		val := input.ReadVarInt()
		m.Quantities.Push(&val)
	}
	m.Types = NewVector[int]()
	typesLen := int(input.ReadShort())
	for i := 0; i < typesLen; i++ {
		val := input.ReadVarInt()
		m.Types.Push(&val)
	}
	m.TaxPercentage = input.ReadFloat()
	m.TaxModificationPercentage = input.ReadFloat()
	m.MaxItemLevel = input.ReadUnsignedByte()
	m.MaxItemPerAccount = input.ReadVarUhInt()
	m.NpcContextualId = input.ReadInt()
	m.UnsoldDelay = input.ReadVarUhShort()
}

func (m *SellerBuyerDescriptor) IsDeserializeFunctionComplete() bool {
	return true
}

type SequenceEndMessage struct {
	MessageBase
	ActionId     int
	AuthorId     float64
	SequenceType int8
}

func NewSequenceEndMessage() *SequenceEndMessage {
	return &SequenceEndMessage{MessageBase: MessageBase{MessageType_: "SequenceEndMessage", id_: 1586}}
}
func (m *SequenceEndMessage) Deserialize(input *DataWrapper) {
	m.ActionId = input.ReadVarUhShort()
	m.AuthorId = input.ReadDouble()
	m.SequenceType = input.ReadByte()
}

func (m *SequenceEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SequenceNumberMessage struct {
	MessageBase
	Number uint16
}

func NewSequenceNumberMessage() *SequenceNumberMessage {
	return &SequenceNumberMessage{MessageBase: MessageBase{MessageType_: "SequenceNumberMessage", id_: 1188}}
}
func (m *SequenceNumberMessage) Deserialize(input *DataWrapper) {
	m.Number = input.ReadUnsignedShort()
}

func (m *SequenceNumberMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SequenceNumberRequestMessage struct {
	MessageBase
}

func NewSequenceNumberRequestMessage() *SequenceNumberRequestMessage {
	return &SequenceNumberRequestMessage{MessageBase: MessageBase{MessageType_: "SequenceNumberRequestMessage", id_: 594}}
}
func (m *SequenceNumberRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *SequenceNumberRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SequenceStartMessage struct {
	MessageBase
	SequenceType int8
	AuthorId     float64
}

func NewSequenceStartMessage() *SequenceStartMessage {
	return &SequenceStartMessage{MessageBase: MessageBase{MessageType_: "SequenceStartMessage", id_: 7231}}
}
func (m *SequenceStartMessage) Deserialize(input *DataWrapper) {
	m.SequenceType = input.ReadByte()
	m.AuthorId = input.ReadDouble()
}

func (m *SequenceStartMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerExperienceModificatorMessage struct {
	MessageBase
	ExperiencePercent int
}

func NewServerExperienceModificatorMessage() *ServerExperienceModificatorMessage {
	return &ServerExperienceModificatorMessage{MessageBase: MessageBase{MessageType_: "ServerExperienceModificatorMessage", id_: 9259}}
}
func (m *ServerExperienceModificatorMessage) Deserialize(input *DataWrapper) {
	m.ExperiencePercent = input.ReadVarUhShort()
}

func (m *ServerExperienceModificatorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerOptionalFeaturesMessage struct {
	MessageBase
	Features *Vector[int32]
}

func NewServerOptionalFeaturesMessage() *ServerOptionalFeaturesMessage {
	return &ServerOptionalFeaturesMessage{MessageBase: MessageBase{MessageType_: "ServerOptionalFeaturesMessage", id_: 8385}}
}
func (m *ServerOptionalFeaturesMessage) Deserialize(input *DataWrapper) {
	m.Features = NewVector[int32]()
	featuresLen := int(input.ReadShort())
	for i := 0; i < featuresLen; i++ {
		val := input.ReadInt()
		m.Features.Push(&val)
	}
}

func (m *ServerOptionalFeaturesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSelectionMessage struct {
	MessageBase
	ServerId int
}

func NewServerSelectionMessage() *ServerSelectionMessage {
	return &ServerSelectionMessage{MessageBase: MessageBase{MessageType_: "ServerSelectionMessage", id_: 4134}}
}
func (m *ServerSelectionMessage) Deserialize(input *DataWrapper) {
	m.ServerId = input.ReadVarUhShort()
}

func (m *ServerSelectionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSessionConstantI interface {
	Deserialize(input *DataWrapper)
}

type ServerSessionConstant struct {
	MessageBase
	Id int
}

func NewServerSessionConstant() *ServerSessionConstant {
	return &ServerSessionConstant{MessageBase: MessageBase{MessageType_: "ServerSessionConstant", id_: 9977}}
}
func (m *ServerSessionConstant) Deserialize(input *DataWrapper) {
	m.Id = input.ReadVarUhShort()
}

func (m *ServerSessionConstant) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSessionConstantInteger struct {
	MessageBase
	ServerSessionConstant
	Value int32
}

func NewServerSessionConstantInteger() *ServerSessionConstantInteger {
	return &ServerSessionConstantInteger{MessageBase: MessageBase{MessageType_: "ServerSessionConstantInteger", id_: 2867}}
}
func (m *ServerSessionConstantInteger) Deserialize(input *DataWrapper) {
	m.ServerSessionConstant.Deserialize(input)
	m.Value = input.ReadInt()
}

func (m *ServerSessionConstantInteger) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSessionConstantLong struct {
	MessageBase
	ServerSessionConstant
	Value float64
}

func NewServerSessionConstantLong() *ServerSessionConstantLong {
	return &ServerSessionConstantLong{MessageBase: MessageBase{MessageType_: "ServerSessionConstantLong", id_: 4175}}
}
func (m *ServerSessionConstantLong) Deserialize(input *DataWrapper) {
	m.ServerSessionConstant.Deserialize(input)
	m.Value = input.ReadDouble()
}

func (m *ServerSessionConstantLong) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSessionConstantString struct {
	MessageBase
	ServerSessionConstant
	Value string
}

func NewServerSessionConstantString() *ServerSessionConstantString {
	return &ServerSessionConstantString{MessageBase: MessageBase{MessageType_: "ServerSessionConstantString", id_: 7359}}
}
func (m *ServerSessionConstantString) Deserialize(input *DataWrapper) {
	m.ServerSessionConstant.Deserialize(input)
	m.Value = input.ReadUTF()
}

func (m *ServerSessionConstantString) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSessionConstantsMessage struct {
	MessageBase
	Variables *Vector[ServerSessionConstantI]
}

func NewServerSessionConstantsMessage() *ServerSessionConstantsMessage {
	return &ServerSessionConstantsMessage{MessageBase: MessageBase{MessageType_: "ServerSessionConstantsMessage", id_: 9337}}
}
func (m *ServerSessionConstantsMessage) Deserialize(input *DataWrapper) {
	m.Variables = NewVector[ServerSessionConstantI]()
	variablesLen := int(input.ReadShort())
	for i := 0; i < variablesLen; i++ {
		foundServerSessionConstant := getDynamicType(input)
		if castedServerSessionConstant, ok := foundServerSessionConstant.(ServerSessionConstantI); ok {
			castedServerSessionConstant.Deserialize(input)
			m.Variables.Push(&castedServerSessionConstant)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ServerSessionConstantI, got: " + fmt.Sprintf("%T", foundServerSessionConstant))
		}
	}
}

func (m *ServerSessionConstantsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerSettingsMessage struct {
	MessageBase
	Lang              string
	Community         int8
	GameType          int8
	IsMonoAccount     bool
	ArenaLeaveBanTime int
	ItemMaxLevel      int32
	HasFreeAutopilot  bool
}

func NewServerSettingsMessage() *ServerSettingsMessage {
	return &ServerSettingsMessage{MessageBase: MessageBase{MessageType_: "ServerSettingsMessage", id_: 154}}
}
func (m *ServerSettingsMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.IsMonoAccount = (byteBox0>>0)&1 != 0
	m.HasFreeAutopilot = (byteBox0>>1)&1 != 0
	m.Lang = input.ReadUTF()
	m.Community = input.ReadByte()
	m.GameType = input.ReadByte()
	m.ArenaLeaveBanTime = input.ReadVarUhShort()
	m.ItemMaxLevel = input.ReadInt()
}

func (m *ServerSettingsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServerStatusUpdateMessage struct {
	MessageBase
	Server *GameServerInformations
}

func NewServerStatusUpdateMessage() *ServerStatusUpdateMessage {
	return &ServerStatusUpdateMessage{MessageBase: MessageBase{MessageType_: "ServerStatusUpdateMessage", id_: 4424}}
}
func (m *ServerStatusUpdateMessage) Deserialize(input *DataWrapper) {
	m.Server = NewGameServerInformations()
	m.Server.Deserialize(input)
}

func (m *ServerStatusUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ServersListMessage struct {
	MessageBase
	Servers               *Vector[GameServerInformations]
	CanCreateNewCharacter bool
}

func NewServersListMessage() *ServersListMessage {
	return &ServersListMessage{MessageBase: MessageBase{MessageType_: "ServersListMessage", id_: 9500}}
}
func (m *ServersListMessage) Deserialize(input *DataWrapper) {
	m.Servers = NewVector[GameServerInformations]()
	serversLen := int(input.ReadShort())
	for i := 0; i < serversLen; i++ {
		GameServerInformations := NewGameServerInformations()
		GameServerInformations.Deserialize(input)
		m.Servers.Push(GameServerInformations)
	}
	m.CanCreateNewCharacter = input.ReadBoolean()
}

func (m *ServersListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SetCharacterRestrictionsMessage struct {
	MessageBase
	ActorId      float64
	Restrictions *ActorRestrictionsInformations
}

func NewSetCharacterRestrictionsMessage() *SetCharacterRestrictionsMessage {
	return &SetCharacterRestrictionsMessage{MessageBase: MessageBase{MessageType_: "SetCharacterRestrictionsMessage", id_: 1324}}
}
func (m *SetCharacterRestrictionsMessage) Deserialize(input *DataWrapper) {
	m.ActorId = input.ReadDouble()
	m.Restrictions = NewActorRestrictionsInformations()
	m.Restrictions.Deserialize(input)
}

func (m *SetCharacterRestrictionsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SetEnableAVARequestMessage struct {
	MessageBase
	Enable bool
}

func NewSetEnableAVARequestMessage() *SetEnableAVARequestMessage {
	return &SetEnableAVARequestMessage{MessageBase: MessageBase{MessageType_: "SetEnableAVARequestMessage", id_: 6858}}
}
func (m *SetEnableAVARequestMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *SetEnableAVARequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SetEnablePVPRequestMessage struct {
	MessageBase
	Enable bool
}

func NewSetEnablePVPRequestMessage() *SetEnablePVPRequestMessage {
	return &SetEnablePVPRequestMessage{MessageBase: MessageBase{MessageType_: "SetEnablePVPRequestMessage", id_: 3251}}
}
func (m *SetEnablePVPRequestMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *SetEnablePVPRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SetUpdateMessage struct {
	MessageBase
	SetId      int
	SetObjects *Vector[int]
	SetEffects *Vector[ObjectEffectI]
}

func NewSetUpdateMessage() *SetUpdateMessage {
	return &SetUpdateMessage{MessageBase: MessageBase{MessageType_: "SetUpdateMessage", id_: 7483}}
}
func (m *SetUpdateMessage) Deserialize(input *DataWrapper) {
	m.SetId = input.ReadVarUhShort()
	m.SetObjects = NewVector[int]()
	setObjectsLen := int(input.ReadShort())
	for i := 0; i < setObjectsLen; i++ {
		val := input.ReadVarInt()
		m.SetObjects.Push(&val)
	}
	m.SetEffects = NewVector[ObjectEffectI]()
	setEffectsLen := int(input.ReadShort())
	for i := 0; i < setEffectsLen; i++ {
		foundObjectEffect := getDynamicType(input)
		if castedObjectEffect, ok := foundObjectEffect.(ObjectEffectI); ok {
			castedObjectEffect.Deserialize(input)
			m.SetEffects.Push(&castedObjectEffect)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ObjectEffectI, got: " + fmt.Sprintf("%T", foundObjectEffect))
		}
	}
}

func (m *SetUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutI interface {
	Deserialize(input *DataWrapper)
}

type Shortcut struct {
	MessageBase
	Slot int8
}

func NewShortcut() *Shortcut {
	return &Shortcut{MessageBase: MessageBase{MessageType_: "Shortcut", id_: 5117}}
}
func (m *Shortcut) Deserialize(input *DataWrapper) {
	m.Slot = input.ReadByte()
}

func (m *Shortcut) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarAddErrorMessage struct {
	MessageBase
	Error int8
}

func NewShortcutBarAddErrorMessage() *ShortcutBarAddErrorMessage {
	return &ShortcutBarAddErrorMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarAddErrorMessage", id_: 1627}}
}
func (m *ShortcutBarAddErrorMessage) Deserialize(input *DataWrapper) {
	m.Error = input.ReadByte()
}

func (m *ShortcutBarAddErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarAddRequestMessage struct {
	MessageBase
	BarType  int8
	Shortcut ShortcutI
}

func NewShortcutBarAddRequestMessage() *ShortcutBarAddRequestMessage {
	return &ShortcutBarAddRequestMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarAddRequestMessage", id_: 6013}}
}
func (m *ShortcutBarAddRequestMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Shortcut = getDynamicType(input)
	m.Shortcut.Deserialize(input)
}

func (m *ShortcutBarAddRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarContentMessage struct {
	MessageBase
	BarType   int8
	Shortcuts *Vector[ShortcutI]
}

func NewShortcutBarContentMessage() *ShortcutBarContentMessage {
	return &ShortcutBarContentMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarContentMessage", id_: 9158}}
}
func (m *ShortcutBarContentMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Shortcuts = NewVector[ShortcutI]()
	shortcutsLen := int(input.ReadShort())
	for i := 0; i < shortcutsLen; i++ {
		foundShortcut := getDynamicType(input)
		if castedShortcut, ok := foundShortcut.(ShortcutI); ok {
			castedShortcut.Deserialize(input)
			m.Shortcuts.Push(&castedShortcut)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ShortcutI, got: " + fmt.Sprintf("%T", foundShortcut))
		}
	}
}

func (m *ShortcutBarContentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarRefreshMessage struct {
	MessageBase
	BarType  int8
	Shortcut ShortcutI
}

func NewShortcutBarRefreshMessage() *ShortcutBarRefreshMessage {
	return &ShortcutBarRefreshMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarRefreshMessage", id_: 5972}}
}
func (m *ShortcutBarRefreshMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Shortcut = getDynamicType(input)
	m.Shortcut.Deserialize(input)
}

func (m *ShortcutBarRefreshMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarRemoveErrorMessage struct {
	MessageBase
	Error int8
}

func NewShortcutBarRemoveErrorMessage() *ShortcutBarRemoveErrorMessage {
	return &ShortcutBarRemoveErrorMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarRemoveErrorMessage", id_: 4981}}
}
func (m *ShortcutBarRemoveErrorMessage) Deserialize(input *DataWrapper) {
	m.Error = input.ReadByte()
}

func (m *ShortcutBarRemoveErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarRemoveRequestMessage struct {
	MessageBase
	BarType int8
	Slot    int8
}

func NewShortcutBarRemoveRequestMessage() *ShortcutBarRemoveRequestMessage {
	return &ShortcutBarRemoveRequestMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarRemoveRequestMessage", id_: 2126}}
}
func (m *ShortcutBarRemoveRequestMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Slot = input.ReadByte()
}

func (m *ShortcutBarRemoveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarRemovedMessage struct {
	MessageBase
	BarType int8
	Slot    int8
}

func NewShortcutBarRemovedMessage() *ShortcutBarRemovedMessage {
	return &ShortcutBarRemovedMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarRemovedMessage", id_: 8757}}
}
func (m *ShortcutBarRemovedMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Slot = input.ReadByte()
}

func (m *ShortcutBarRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarReplacedMessage struct {
	MessageBase
	BarType  int8
	Shortcut ShortcutI
}

func NewShortcutBarReplacedMessage() *ShortcutBarReplacedMessage {
	return &ShortcutBarReplacedMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarReplacedMessage", id_: 125}}
}
func (m *ShortcutBarReplacedMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.Shortcut = getDynamicType(input)
	m.Shortcut.Deserialize(input)
}

func (m *ShortcutBarReplacedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarSwapErrorMessage struct {
	MessageBase
	Error int8
}

func NewShortcutBarSwapErrorMessage() *ShortcutBarSwapErrorMessage {
	return &ShortcutBarSwapErrorMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarSwapErrorMessage", id_: 6501}}
}
func (m *ShortcutBarSwapErrorMessage) Deserialize(input *DataWrapper) {
	m.Error = input.ReadByte()
}

func (m *ShortcutBarSwapErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutBarSwapRequestMessage struct {
	MessageBase
	BarType    int8
	FirstSlot  int8
	SecondSlot int8
}

func NewShortcutBarSwapRequestMessage() *ShortcutBarSwapRequestMessage {
	return &ShortcutBarSwapRequestMessage{MessageBase: MessageBase{MessageType_: "ShortcutBarSwapRequestMessage", id_: 45}}
}
func (m *ShortcutBarSwapRequestMessage) Deserialize(input *DataWrapper) {
	m.BarType = input.ReadByte()
	m.FirstSlot = input.ReadByte()
	m.SecondSlot = input.ReadByte()
}

func (m *ShortcutBarSwapRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutEmote struct {
	MessageBase
	Shortcut
	EmoteId uint16
}

func NewShortcutEmote() *ShortcutEmote {
	return &ShortcutEmote{MessageBase: MessageBase{MessageType_: "ShortcutEmote", id_: 1189}}
}
func (m *ShortcutEmote) Deserialize(input *DataWrapper) {
	m.Shortcut.Deserialize(input)
	m.EmoteId = input.ReadUnsignedShort()
}

func (m *ShortcutEmote) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutEntitiesPreset struct {
	MessageBase
	Shortcut
	PresetId int16
}

func NewShortcutEntitiesPreset() *ShortcutEntitiesPreset {
	return &ShortcutEntitiesPreset{MessageBase: MessageBase{MessageType_: "ShortcutEntitiesPreset", id_: 3288}}
}
func (m *ShortcutEntitiesPreset) Deserialize(input *DataWrapper) {
	m.Shortcut.Deserialize(input)
	m.PresetId = input.ReadShort()
}

func (m *ShortcutEntitiesPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutObject struct {
	MessageBase
	Shortcut
}

func NewShortcutObject() *ShortcutObject {
	return &ShortcutObject{MessageBase: MessageBase{MessageType_: "ShortcutObject", id_: 8861}}
}
func (m *ShortcutObject) Deserialize(input *DataWrapper) {
	m.Shortcut.Deserialize(input)
}

func (m *ShortcutObject) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutObjectItem struct {
	MessageBase
	ShortcutObject
	ItemUID int32
	ItemGID int32
}

func NewShortcutObjectItem() *ShortcutObjectItem {
	return &ShortcutObjectItem{MessageBase: MessageBase{MessageType_: "ShortcutObjectItem", id_: 2079}}
}
func (m *ShortcutObjectItem) Deserialize(input *DataWrapper) {
	m.ShortcutObject.Deserialize(input)
	m.ItemUID = input.ReadInt()
	m.ItemGID = input.ReadInt()
}

func (m *ShortcutObjectItem) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutObjectPreset struct {
	MessageBase
	ShortcutObject
	PresetId int16
}

func NewShortcutObjectPreset() *ShortcutObjectPreset {
	return &ShortcutObjectPreset{MessageBase: MessageBase{MessageType_: "ShortcutObjectPreset", id_: 1697}}
}
func (m *ShortcutObjectPreset) Deserialize(input *DataWrapper) {
	m.ShortcutObject.Deserialize(input)
	m.PresetId = input.ReadShort()
}

func (m *ShortcutObjectPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutSmiley struct {
	MessageBase
	Shortcut
	SmileyId int
}

func NewShortcutSmiley() *ShortcutSmiley {
	return &ShortcutSmiley{MessageBase: MessageBase{MessageType_: "ShortcutSmiley", id_: 4118}}
}
func (m *ShortcutSmiley) Deserialize(input *DataWrapper) {
	m.Shortcut.Deserialize(input)
	m.SmileyId = input.ReadVarUhShort()
}

func (m *ShortcutSmiley) IsDeserializeFunctionComplete() bool {
	return true
}

type ShortcutSpell struct {
	MessageBase
	Shortcut
	SpellId int
}

func NewShortcutSpell() *ShortcutSpell {
	return &ShortcutSpell{MessageBase: MessageBase{MessageType_: "ShortcutSpell", id_: 576}}
}
func (m *ShortcutSpell) Deserialize(input *DataWrapper) {
	m.Shortcut.Deserialize(input)
	m.SpellId = input.ReadVarUhShort()
}

func (m *ShortcutSpell) IsDeserializeFunctionComplete() bool {
	return true
}

type ShowCellMessage struct {
	MessageBase
	SourceId float64
	CellId   int
}

func NewShowCellMessage() *ShowCellMessage {
	return &ShowCellMessage{MessageBase: MessageBase{MessageType_: "ShowCellMessage", id_: 9194}}
}
func (m *ShowCellMessage) Deserialize(input *DataWrapper) {
	m.SourceId = input.ReadDouble()
	m.CellId = input.ReadVarUhShort()
}

func (m *ShowCellMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShowCellRequestMessage struct {
	MessageBase
	CellId int
}

func NewShowCellRequestMessage() *ShowCellRequestMessage {
	return &ShowCellRequestMessage{MessageBase: MessageBase{MessageType_: "ShowCellRequestMessage", id_: 4804}}
}
func (m *ShowCellRequestMessage) Deserialize(input *DataWrapper) {
	m.CellId = input.ReadVarUhShort()
}

func (m *ShowCellRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ShowCellSpectatorMessage struct {
	MessageBase
	ShowCellMessage
	PlayerName string
}

func NewShowCellSpectatorMessage() *ShowCellSpectatorMessage {
	return &ShowCellSpectatorMessage{MessageBase: MessageBase{MessageType_: "ShowCellSpectatorMessage", id_: 4927}}
}
func (m *ShowCellSpectatorMessage) Deserialize(input *DataWrapper) {
	m.ShowCellMessage.Deserialize(input)
	m.PlayerName = input.ReadUTF()
}

func (m *ShowCellSpectatorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SimpleCharacterCharacteristicForPreset struct {
	MessageBase
	Keyword     string
	Base        int
	Additionnal int
}

func NewSimpleCharacterCharacteristicForPreset() *SimpleCharacterCharacteristicForPreset {
	return &SimpleCharacterCharacteristicForPreset{MessageBase: MessageBase{MessageType_: "SimpleCharacterCharacteristicForPreset", id_: 361}}
}
func (m *SimpleCharacterCharacteristicForPreset) Deserialize(input *DataWrapper) {
	m.Keyword = input.ReadUTF()
	m.Base = input.ReadVarInt()
	m.Additionnal = input.ReadVarInt()
}

func (m *SimpleCharacterCharacteristicForPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type SkillActionDescriptionI interface {
	Deserialize(input *DataWrapper)
}

type SkillActionDescription struct {
	MessageBase
	SkillId int
}

func NewSkillActionDescription() *SkillActionDescription {
	return &SkillActionDescription{MessageBase: MessageBase{MessageType_: "SkillActionDescription", id_: 3573}}
}
func (m *SkillActionDescription) Deserialize(input *DataWrapper) {
	m.SkillId = input.ReadVarUhShort()
}

func (m *SkillActionDescription) IsDeserializeFunctionComplete() bool {
	return true
}

type SkillActionDescriptionCollect struct {
	MessageBase
	SkillActionDescriptionTimed
	Min int
	Max int
}

func NewSkillActionDescriptionCollect() *SkillActionDescriptionCollect {
	return &SkillActionDescriptionCollect{MessageBase: MessageBase{MessageType_: "SkillActionDescriptionCollect", id_: 5684}}
}
func (m *SkillActionDescriptionCollect) Deserialize(input *DataWrapper) {
	m.SkillActionDescriptionTimed.Deserialize(input)
	m.Min = input.ReadVarUhShort()
	m.Max = input.ReadVarUhShort()
}

func (m *SkillActionDescriptionCollect) IsDeserializeFunctionComplete() bool {
	return true
}

type SkillActionDescriptionCraft struct {
	MessageBase
	SkillActionDescription
	Probability int8
}

func NewSkillActionDescriptionCraft() *SkillActionDescriptionCraft {
	return &SkillActionDescriptionCraft{MessageBase: MessageBase{MessageType_: "SkillActionDescriptionCraft", id_: 5905}}
}
func (m *SkillActionDescriptionCraft) Deserialize(input *DataWrapper) {
	m.SkillActionDescription.Deserialize(input)
	m.Probability = input.ReadByte()
}

func (m *SkillActionDescriptionCraft) IsDeserializeFunctionComplete() bool {
	return true
}

type SkillActionDescriptionTimed struct {
	MessageBase
	SkillActionDescription
	Time uint8
}

func NewSkillActionDescriptionTimed() *SkillActionDescriptionTimed {
	return &SkillActionDescriptionTimed{MessageBase: MessageBase{MessageType_: "SkillActionDescriptionTimed", id_: 1078}}
}
func (m *SkillActionDescriptionTimed) Deserialize(input *DataWrapper) {
	m.SkillActionDescription.Deserialize(input)
	m.Time = input.ReadUnsignedByte()
}

func (m *SkillActionDescriptionTimed) IsDeserializeFunctionComplete() bool {
	return true
}

type SlaveNoLongerControledMessage struct {
	MessageBase
	MasterId float64
	SlaveId  float64
}

func NewSlaveNoLongerControledMessage() *SlaveNoLongerControledMessage {
	return &SlaveNoLongerControledMessage{MessageBase: MessageBase{MessageType_: "SlaveNoLongerControledMessage", id_: 1268}}
}
func (m *SlaveNoLongerControledMessage) Deserialize(input *DataWrapper) {
	m.MasterId = input.ReadDouble()
	m.SlaveId = input.ReadDouble()
}

func (m *SlaveNoLongerControledMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SlaveSwitchContextMessage struct {
	MessageBase
	MasterId    float64
	SlaveId     float64
	SlaveTurn   int
	SlaveSpells *Vector[SpellItem]
	SlaveStats  *CharacterCharacteristicsInformations
	Shortcuts   *Vector[ShortcutI]
}

func NewSlaveSwitchContextMessage() *SlaveSwitchContextMessage {
	return &SlaveSwitchContextMessage{MessageBase: MessageBase{MessageType_: "SlaveSwitchContextMessage", id_: 974}}
}
func (m *SlaveSwitchContextMessage) Deserialize(input *DataWrapper) {
	m.MasterId = input.ReadDouble()
	m.SlaveId = input.ReadDouble()
	m.SlaveTurn = input.ReadVarUhShort()
	m.SlaveSpells = NewVector[SpellItem]()
	slaveSpellsLen := int(input.ReadShort())
	for i := 0; i < slaveSpellsLen; i++ {
		SpellItem := NewSpellItem()
		SpellItem.Deserialize(input)
		m.SlaveSpells.Push(SpellItem)
	}
	m.SlaveStats = NewCharacterCharacteristicsInformations()
	m.SlaveStats.Deserialize(input)
	m.Shortcuts = NewVector[ShortcutI]()
	shortcutsLen := int(input.ReadShort())
	for i := 0; i < shortcutsLen; i++ {
		foundShortcut := getDynamicType(input)
		if castedShortcut, ok := foundShortcut.(ShortcutI); ok {
			castedShortcut.Deserialize(input)
			m.Shortcuts.Push(&castedShortcut)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement ShortcutI, got: " + fmt.Sprintf("%T", foundShortcut))
		}
	}
}

func (m *SlaveSwitchContextMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialApplicationInformation struct {
	MessageBase
	PlayerInfo   *ApplicationPlayerInformation
	ApplyText    string
	CreationDate float64
}

func NewSocialApplicationInformation() *SocialApplicationInformation {
	return &SocialApplicationInformation{MessageBase: MessageBase{MessageType_: "SocialApplicationInformation", id_: 4014}}
}
func (m *SocialApplicationInformation) Deserialize(input *DataWrapper) {
	m.PlayerInfo = NewApplicationPlayerInformation()
	m.PlayerInfo.Deserialize(input)
	m.ApplyText = input.ReadUTF()
	m.CreationDate = input.ReadDouble()
}

func (m *SocialApplicationInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialEmblem struct {
	MessageBase
	SymbolShape     int
	SymbolColor     int32
	BackgroundShape int8
	BackgroundColor int32
}

func NewSocialEmblem() *SocialEmblem {
	return &SocialEmblem{MessageBase: MessageBase{MessageType_: "SocialEmblem", id_: 6817}}
}
func (m *SocialEmblem) Deserialize(input *DataWrapper) {
	m.SymbolShape = input.ReadVarUhShort()
	m.SymbolColor = input.ReadInt()
	m.BackgroundShape = input.ReadByte()
	m.BackgroundColor = input.ReadInt()
}

func (m *SocialEmblem) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialFight struct {
	MessageBase
	SocialFightInfo *SocialFightInfo
	Attackers       *Vector[CharacterMinimalPlusLookInformations]
	Defenders       *Vector[CharacterMinimalPlusLookInformations]
	Phase           *FightPhase
}

func NewSocialFight() *SocialFight {
	return &SocialFight{MessageBase: MessageBase{MessageType_: "SocialFight", id_: 2810}}
}
func (m *SocialFight) Deserialize(input *DataWrapper) {
	m.SocialFightInfo = NewSocialFightInfo()
	m.SocialFightInfo.Deserialize(input)
	m.Attackers = NewVector[CharacterMinimalPlusLookInformations]()
	attackersLen := int(input.ReadShort())
	for i := 0; i < attackersLen; i++ {
		CharacterMinimalPlusLookInformations := NewCharacterMinimalPlusLookInformations()
		CharacterMinimalPlusLookInformations.Deserialize(input)
		m.Attackers.Push(CharacterMinimalPlusLookInformations)
	}
	m.Defenders = NewVector[CharacterMinimalPlusLookInformations]()
	defendersLen := int(input.ReadShort())
	for i := 0; i < defendersLen; i++ {
		CharacterMinimalPlusLookInformations := NewCharacterMinimalPlusLookInformations()
		CharacterMinimalPlusLookInformations.Deserialize(input)
		m.Defenders.Push(CharacterMinimalPlusLookInformations)
	}
	m.Phase = NewFightPhase()
	m.Phase.Deserialize(input)
}

func (m *SocialFight) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialFightInfo struct {
	MessageBase
	FightId   int
	FightType int8
	MapId     float64
}

func NewSocialFightInfo() *SocialFightInfo {
	return &SocialFightInfo{MessageBase: MessageBase{MessageType_: "SocialFightInfo", id_: 2355}}
}
func (m *SocialFightInfo) Deserialize(input *DataWrapper) {
	m.FightId = input.ReadVarUhShort()
	m.FightType = input.ReadByte()
	m.MapId = input.ReadDouble()
}

func (m *SocialFightInfo) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialFightJoinRequestMessage struct {
	MessageBase
	SocialFightInfo *SocialFightInfo
}

func NewSocialFightJoinRequestMessage() *SocialFightJoinRequestMessage {
	return &SocialFightJoinRequestMessage{MessageBase: MessageBase{MessageType_: "SocialFightJoinRequestMessage", id_: 335}}
}
func (m *SocialFightJoinRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialFightInfo = NewSocialFightInfo()
	m.SocialFightInfo.Deserialize(input)
}

func (m *SocialFightJoinRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialFightLeaveRequestMessage struct {
	MessageBase
	SocialFightInfo *SocialFightInfo
}

func NewSocialFightLeaveRequestMessage() *SocialFightLeaveRequestMessage {
	return &SocialFightLeaveRequestMessage{MessageBase: MessageBase{MessageType_: "SocialFightLeaveRequestMessage", id_: 995}}
}
func (m *SocialFightLeaveRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialFightInfo = NewSocialFightInfo()
	m.SocialFightInfo.Deserialize(input)
}

func (m *SocialFightLeaveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialFightTakePlaceRequestMessage struct {
	MessageBase
	SocialFightInfo     *SocialFightInfo
	ReplacedCharacterId int64
}

func NewSocialFightTakePlaceRequestMessage() *SocialFightTakePlaceRequestMessage {
	return &SocialFightTakePlaceRequestMessage{MessageBase: MessageBase{MessageType_: "SocialFightTakePlaceRequestMessage", id_: 7755}}
}
func (m *SocialFightTakePlaceRequestMessage) Deserialize(input *DataWrapper) {
	m.SocialFightInfo = NewSocialFightInfo()
	m.SocialFightInfo.Deserialize(input)
	m.ReplacedCharacterId = input.ReadVarUhLong()
}

func (m *SocialFightTakePlaceRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialMember struct {
	MessageBase
	CharacterMinimalInformations
	Breed                    int8
	Sex                      bool
	Connected                int8
	HoursSinceLastConnection uint16
	AccountId                int32
	Status                   PlayerStatusI
	RankId                   int32
	EnrollmentDate           float64
}

func NewSocialMember() *SocialMember {
	return &SocialMember{MessageBase: MessageBase{MessageType_: "SocialMember", id_: 9920}}
}
func (m *SocialMember) Deserialize(input *DataWrapper) {
	m.CharacterMinimalInformations.Deserialize(input)
	m.Breed = input.ReadByte()
	m.Sex = input.ReadBoolean()
	m.Connected = input.ReadByte()
	m.HoursSinceLastConnection = input.ReadUnsignedShort()
	m.AccountId = input.ReadInt()
	m.Status = getDynamicType(input)
	m.Status.Deserialize(input)
	m.RankId = input.ReadInt()
	m.EnrollmentDate = input.ReadDouble()
}

func (m *SocialMember) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialNoticeMessage struct {
	MessageBase
	Content    string
	Timestamp  int32
	MemberId   int64
	MemberName string
}

func NewSocialNoticeMessage() *SocialNoticeMessage {
	return &SocialNoticeMessage{MessageBase: MessageBase{MessageType_: "SocialNoticeMessage", id_: 4859}}
}
func (m *SocialNoticeMessage) Deserialize(input *DataWrapper) {
	m.Content = input.ReadUTF()
	m.Timestamp = input.ReadInt()
	m.MemberId = input.ReadVarUhLong()
	m.MemberName = input.ReadUTF()
}

func (m *SocialNoticeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialNoticeSetErrorMessage struct {
	MessageBase
	Reason int8
}

func NewSocialNoticeSetErrorMessage() *SocialNoticeSetErrorMessage {
	return &SocialNoticeSetErrorMessage{MessageBase: MessageBase{MessageType_: "SocialNoticeSetErrorMessage", id_: 3100}}
}
func (m *SocialNoticeSetErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *SocialNoticeSetErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialNoticeSetRequestMessage struct {
	MessageBase
}

func NewSocialNoticeSetRequestMessage() *SocialNoticeSetRequestMessage {
	return &SocialNoticeSetRequestMessage{MessageBase: MessageBase{MessageType_: "SocialNoticeSetRequestMessage", id_: 3682}}
}
func (m *SocialNoticeSetRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *SocialNoticeSetRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SocialRecruitmentInformation struct {
	MessageBase
	SocialId                int
	RecruitmentType         int8
	RecruitmentTitle        string
	RecruitmentText         string
	SelectedLanguages       *Vector[int]
	SelectedCriterion       *Vector[int]
	MinLevel                int16
	MinLevelFacultative     bool
	InvalidatedByModeration bool
	LastEditPlayerName      string
	LastEditDate            float64
	RecruitmentAutoLocked   bool
}

func NewSocialRecruitmentInformation() *SocialRecruitmentInformation {
	return &SocialRecruitmentInformation{MessageBase: MessageBase{MessageType_: "SocialRecruitmentInformation", id_: 2211}}
}
func (m *SocialRecruitmentInformation) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.MinLevelFacultative = (byteBox0>>0)&1 != 0
	m.InvalidatedByModeration = (byteBox0>>1)&1 != 0
	m.RecruitmentAutoLocked = (byteBox0>>2)&1 != 0
	m.SocialId = input.ReadVarUhInt()
	m.RecruitmentType = input.ReadByte()
	m.RecruitmentTitle = input.ReadUTF()
	m.RecruitmentText = input.ReadUTF()
	m.SelectedLanguages = NewVector[int]()
	selectedLanguagesLen := int(input.ReadShort())
	for i := 0; i < selectedLanguagesLen; i++ {
		val := input.ReadVarInt()
		m.SelectedLanguages.Push(&val)
	}
	m.SelectedCriterion = NewVector[int]()
	selectedCriterionLen := int(input.ReadShort())
	for i := 0; i < selectedCriterionLen; i++ {
		val := input.ReadVarInt()
		m.SelectedCriterion.Push(&val)
	}
	m.MinLevel = input.ReadShort()
	m.LastEditPlayerName = input.ReadUTF()
	m.LastEditDate = input.ReadDouble()
}

func (m *SocialRecruitmentInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpawnCharacterInformation struct {
	MessageBase
	SpawnInformation
	Name  string
	Level int
}

func NewSpawnCharacterInformation() *SpawnCharacterInformation {
	return &SpawnCharacterInformation{MessageBase: MessageBase{MessageType_: "SpawnCharacterInformation", id_: 3409}}
}
func (m *SpawnCharacterInformation) Deserialize(input *DataWrapper) {
	m.SpawnInformation.Deserialize(input)
	m.Name = input.ReadUTF()
	m.Level = input.ReadVarUhShort()
}

func (m *SpawnCharacterInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpawnCompanionInformation struct {
	MessageBase
	SpawnInformation
	ModelId    int8
	Level      int
	SummonerId float64
	OwnerId    float64
}

func NewSpawnCompanionInformation() *SpawnCompanionInformation {
	return &SpawnCompanionInformation{MessageBase: MessageBase{MessageType_: "SpawnCompanionInformation", id_: 4847}}
}
func (m *SpawnCompanionInformation) Deserialize(input *DataWrapper) {
	m.SpawnInformation.Deserialize(input)
	m.ModelId = input.ReadByte()
	m.Level = input.ReadVarUhShort()
	m.SummonerId = input.ReadDouble()
	m.OwnerId = input.ReadDouble()
}

func (m *SpawnCompanionInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpawnInformationI interface {
	Deserialize(input *DataWrapper)
}

type SpawnInformation struct {
	MessageBase
}

func NewSpawnInformation() *SpawnInformation {
	return &SpawnInformation{MessageBase: MessageBase{MessageType_: "SpawnInformation", id_: 339}}
}
func (m *SpawnInformation) Deserialize(input *DataWrapper) {
}

func (m *SpawnInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpawnMonsterInformation struct {
	MessageBase
	BaseSpawnMonsterInformation
	CreatureGrade int8
}

func NewSpawnMonsterInformation() *SpawnMonsterInformation {
	return &SpawnMonsterInformation{MessageBase: MessageBase{MessageType_: "SpawnMonsterInformation", id_: 571}}
}
func (m *SpawnMonsterInformation) Deserialize(input *DataWrapper) {
	m.BaseSpawnMonsterInformation.Deserialize(input)
	m.CreatureGrade = input.ReadByte()
}

func (m *SpawnMonsterInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpawnScaledMonsterInformation struct {
	MessageBase
	BaseSpawnMonsterInformation
	CreatureLevel int16
}

func NewSpawnScaledMonsterInformation() *SpawnScaledMonsterInformation {
	return &SpawnScaledMonsterInformation{MessageBase: MessageBase{MessageType_: "SpawnScaledMonsterInformation", id_: 8568}}
}
func (m *SpawnScaledMonsterInformation) Deserialize(input *DataWrapper) {
	m.BaseSpawnMonsterInformation.Deserialize(input)
	m.CreatureLevel = input.ReadShort()
}

func (m *SpawnScaledMonsterInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellForPreset struct {
	MessageBase
	SpellId   int
	Shortcuts *Vector[int16]
}

func NewSpellForPreset() *SpellForPreset {
	return &SpellForPreset{MessageBase: MessageBase{MessageType_: "SpellForPreset", id_: 1457}}
}
func (m *SpellForPreset) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
	m.Shortcuts = NewVector[int16]()
	shortcutsLen := int(input.ReadShort())
	for i := 0; i < shortcutsLen; i++ {
		val := input.ReadShort()
		m.Shortcuts.Push(&val)
	}
}

func (m *SpellForPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellItem struct {
	MessageBase
	Item
	SpellId    int32
	SpellLevel int16
}

func NewSpellItem() *SpellItem {
	return &SpellItem{MessageBase: MessageBase{MessageType_: "SpellItem", id_: 8615}}
}
func (m *SpellItem) Deserialize(input *DataWrapper) {
	m.Item.Deserialize(input)
	m.SpellId = input.ReadInt()
	m.SpellLevel = input.ReadShort()
}

func (m *SpellItem) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellListMessage struct {
	MessageBase
	SpellPrevisualization bool
	Spells                *Vector[SpellItem]
}

func NewSpellListMessage() *SpellListMessage {
	return &SpellListMessage{MessageBase: MessageBase{MessageType_: "SpellListMessage", id_: 7427}}
}
func (m *SpellListMessage) Deserialize(input *DataWrapper) {
	m.SpellPrevisualization = input.ReadBoolean()
	m.Spells = NewVector[SpellItem]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		SpellItem := NewSpellItem()
		SpellItem.Deserialize(input)
		m.Spells.Push(SpellItem)
	}
}

func (m *SpellListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellModifierMessage struct {
	MessageBase
	SpellId      int
	ActionType   int8
	ModifierType int8
	Context      int32
	Equipment    int32
}

func NewSpellModifierMessage() *SpellModifierMessage {
	return &SpellModifierMessage{MessageBase: MessageBase{MessageType_: "SpellModifierMessage", id_: 2892}}
}
func (m *SpellModifierMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
	m.ActionType = input.ReadByte()
	m.ModifierType = input.ReadByte()
	m.Context = input.ReadInt()
	m.Equipment = input.ReadInt()
}

func (m *SpellModifierMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellVariantActivationMessage struct {
	MessageBase
	SpellId int
	Result  bool
}

func NewSpellVariantActivationMessage() *SpellVariantActivationMessage {
	return &SpellVariantActivationMessage{MessageBase: MessageBase{MessageType_: "SpellVariantActivationMessage", id_: 7767}}
}
func (m *SpellVariantActivationMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
	m.Result = input.ReadBoolean()
}

func (m *SpellVariantActivationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellVariantActivationRequestMessage struct {
	MessageBase
	SpellId int
}

func NewSpellVariantActivationRequestMessage() *SpellVariantActivationRequestMessage {
	return &SpellVariantActivationRequestMessage{MessageBase: MessageBase{MessageType_: "SpellVariantActivationRequestMessage", id_: 1715}}
}
func (m *SpellVariantActivationRequestMessage) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhShort()
}

func (m *SpellVariantActivationRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpellsPreset struct {
	MessageBase
	Preset
	Spells *Vector[SpellForPreset]
}

func NewSpellsPreset() *SpellsPreset {
	return &SpellsPreset{MessageBase: MessageBase{MessageType_: "SpellsPreset", id_: 7774}}
}
func (m *SpellsPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.Spells = NewVector[SpellForPreset]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		SpellForPreset := NewSpellForPreset()
		SpellForPreset.Deserialize(input)
		m.Spells.Push(SpellForPreset)
	}
}

func (m *SpellsPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type SpouseGetInformationsMessage struct {
	MessageBase
}

func NewSpouseGetInformationsMessage() *SpouseGetInformationsMessage {
	return &SpouseGetInformationsMessage{MessageBase: MessageBase{MessageType_: "SpouseGetInformationsMessage", id_: 9594}}
}
func (m *SpouseGetInformationsMessage) Deserialize(input *DataWrapper) {
}

func (m *SpouseGetInformationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpouseInformationsMessage struct {
	MessageBase
	Spouse FriendSpouseInformationsI
}

func NewSpouseInformationsMessage() *SpouseInformationsMessage {
	return &SpouseInformationsMessage{MessageBase: MessageBase{MessageType_: "SpouseInformationsMessage", id_: 7779}}
}
func (m *SpouseInformationsMessage) Deserialize(input *DataWrapper) {
	m.Spouse = getDynamicType(input)
	m.Spouse.Deserialize(input)
}

func (m *SpouseInformationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SpouseStatusMessage struct {
	MessageBase
	HasSpouse bool
}

func NewSpouseStatusMessage() *SpouseStatusMessage {
	return &SpouseStatusMessage{MessageBase: MessageBase{MessageType_: "SpouseStatusMessage", id_: 8361}}
}
func (m *SpouseStatusMessage) Deserialize(input *DataWrapper) {
	m.HasSpouse = input.ReadBoolean()
}

func (m *SpouseStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartExchangeTaxCollectorEquipmentMessage struct {
	MessageBase
	Uid float64
}

func NewStartExchangeTaxCollectorEquipmentMessage() *StartExchangeTaxCollectorEquipmentMessage {
	return &StartExchangeTaxCollectorEquipmentMessage{MessageBase: MessageBase{MessageType_: "StartExchangeTaxCollectorEquipmentMessage", id_: 878}}
}
func (m *StartExchangeTaxCollectorEquipmentMessage) Deserialize(input *DataWrapper) {
	m.Uid = input.ReadDouble()
}

func (m *StartExchangeTaxCollectorEquipmentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartGuildChestContributionMessage struct {
	MessageBase
}

func NewStartGuildChestContributionMessage() *StartGuildChestContributionMessage {
	return &StartGuildChestContributionMessage{MessageBase: MessageBase{MessageType_: "StartGuildChestContributionMessage", id_: 9862}}
}
func (m *StartGuildChestContributionMessage) Deserialize(input *DataWrapper) {
}

func (m *StartGuildChestContributionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartListenAllianceFightMessage struct {
	MessageBase
}

func NewStartListenAllianceFightMessage() *StartListenAllianceFightMessage {
	return &StartListenAllianceFightMessage{MessageBase: MessageBase{MessageType_: "StartListenAllianceFightMessage", id_: 448}}
}
func (m *StartListenAllianceFightMessage) Deserialize(input *DataWrapper) {
}

func (m *StartListenAllianceFightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartListenGuildChestStructureMessage struct {
	MessageBase
}

func NewStartListenGuildChestStructureMessage() *StartListenGuildChestStructureMessage {
	return &StartListenGuildChestStructureMessage{MessageBase: MessageBase{MessageType_: "StartListenGuildChestStructureMessage", id_: 9892}}
}
func (m *StartListenGuildChestStructureMessage) Deserialize(input *DataWrapper) {
}

func (m *StartListenGuildChestStructureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartListenNuggetsMessage struct {
	MessageBase
}

func NewStartListenNuggetsMessage() *StartListenNuggetsMessage {
	return &StartListenNuggetsMessage{MessageBase: MessageBase{MessageType_: "StartListenNuggetsMessage", id_: 4559}}
}
func (m *StartListenNuggetsMessage) Deserialize(input *DataWrapper) {
}

func (m *StartListenNuggetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartListenTaxCollectorPresetsUpdatesMessage struct {
	MessageBase
}

func NewStartListenTaxCollectorPresetsUpdatesMessage() *StartListenTaxCollectorPresetsUpdatesMessage {
	return &StartListenTaxCollectorPresetsUpdatesMessage{MessageBase: MessageBase{MessageType_: "StartListenTaxCollectorPresetsUpdatesMessage", id_: 3876}}
}
func (m *StartListenTaxCollectorPresetsUpdatesMessage) Deserialize(input *DataWrapper) {
}

func (m *StartListenTaxCollectorPresetsUpdatesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StartListenTaxCollectorUpdatesMessage struct {
	MessageBase
	TaxCollectorId float64
}

func NewStartListenTaxCollectorUpdatesMessage() *StartListenTaxCollectorUpdatesMessage {
	return &StartListenTaxCollectorUpdatesMessage{MessageBase: MessageBase{MessageType_: "StartListenTaxCollectorUpdatesMessage", id_: 659}}
}
func (m *StartListenTaxCollectorUpdatesMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
}

func (m *StartListenTaxCollectorUpdatesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StatedElement struct {
	MessageBase
	ElementId     int32
	ElementCellId int
	ElementState  int
	OnCurrentMap  bool
}

func NewStatedElement() *StatedElement {
	return &StatedElement{MessageBase: MessageBase{MessageType_: "StatedElement", id_: 1041}}
}
func (m *StatedElement) Deserialize(input *DataWrapper) {
	m.ElementId = input.ReadInt()
	m.ElementCellId = input.ReadVarUhShort()
	m.ElementState = input.ReadVarUhInt()
	m.OnCurrentMap = input.ReadBoolean()
}

func (m *StatedElement) IsDeserializeFunctionComplete() bool {
	return true
}

type StatedElementUpdatedMessage struct {
	MessageBase
	StatedElement *StatedElement
}

func NewStatedElementUpdatedMessage() *StatedElementUpdatedMessage {
	return &StatedElementUpdatedMessage{MessageBase: MessageBase{MessageType_: "StatedElementUpdatedMessage", id_: 7859}}
}
func (m *StatedElementUpdatedMessage) Deserialize(input *DataWrapper) {
	m.StatedElement = NewStatedElement()
	m.StatedElement.Deserialize(input)
}

func (m *StatedElementUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StatedMapUpdateMessage struct {
	MessageBase
	StatedElements *Vector[StatedElement]
}

func NewStatedMapUpdateMessage() *StatedMapUpdateMessage {
	return &StatedMapUpdateMessage{MessageBase: MessageBase{MessageType_: "StatedMapUpdateMessage", id_: 2054}}
}
func (m *StatedMapUpdateMessage) Deserialize(input *DataWrapper) {
	m.StatedElements = NewVector[StatedElement]()
	statedElementsLen := int(input.ReadShort())
	for i := 0; i < statedElementsLen; i++ {
		StatedElement := NewStatedElement()
		StatedElement.Deserialize(input)
		m.StatedElements.Push(StatedElement)
	}
}

func (m *StatedMapUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataI interface {
	Deserialize(input *DataWrapper)
}

type StatisticData struct {
	MessageBase
}

func NewStatisticData() *StatisticData {
	return &StatisticData{MessageBase: MessageBase{MessageType_: "StatisticData", id_: 1815}}
}
func (m *StatisticData) Deserialize(input *DataWrapper) {
}

func (m *StatisticData) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataBoolean struct {
	MessageBase
	StatisticData
	Value bool
}

func NewStatisticDataBoolean() *StatisticDataBoolean {
	return &StatisticDataBoolean{MessageBase: MessageBase{MessageType_: "StatisticDataBoolean", id_: 7901}}
}
func (m *StatisticDataBoolean) Deserialize(input *DataWrapper) {
	m.StatisticData.Deserialize(input)
	m.Value = input.ReadBoolean()
}

func (m *StatisticDataBoolean) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataByte struct {
	MessageBase
	StatisticData
	Value int8
}

func NewStatisticDataByte() *StatisticDataByte {
	return &StatisticDataByte{MessageBase: MessageBase{MessageType_: "StatisticDataByte", id_: 4573}}
}
func (m *StatisticDataByte) Deserialize(input *DataWrapper) {
	m.StatisticData.Deserialize(input)
	m.Value = input.ReadByte()
}

func (m *StatisticDataByte) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataInt struct {
	MessageBase
	StatisticData
	Value int32
}

func NewStatisticDataInt() *StatisticDataInt {
	return &StatisticDataInt{MessageBase: MessageBase{MessageType_: "StatisticDataInt", id_: 7834}}
}
func (m *StatisticDataInt) Deserialize(input *DataWrapper) {
	m.StatisticData.Deserialize(input)
	m.Value = input.ReadInt()
}

func (m *StatisticDataInt) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataShort struct {
	MessageBase
	StatisticData
	Value int16
}

func NewStatisticDataShort() *StatisticDataShort {
	return &StatisticDataShort{MessageBase: MessageBase{MessageType_: "StatisticDataShort", id_: 1762}}
}
func (m *StatisticDataShort) Deserialize(input *DataWrapper) {
	m.StatisticData.Deserialize(input)
	m.Value = input.ReadShort()
}

func (m *StatisticDataShort) IsDeserializeFunctionComplete() bool {
	return true
}

type StatisticDataString struct {
	MessageBase
	StatisticData
	Value string
}

func NewStatisticDataString() *StatisticDataString {
	return &StatisticDataString{MessageBase: MessageBase{MessageType_: "StatisticDataString", id_: 4102}}
}
func (m *StatisticDataString) Deserialize(input *DataWrapper) {
	m.StatisticData.Deserialize(input)
	m.Value = input.ReadUTF()
}

func (m *StatisticDataString) IsDeserializeFunctionComplete() bool {
	return true
}

type StatsPreset struct {
	MessageBase
	Preset
	Stats *Vector[SimpleCharacterCharacteristicForPreset]
}

func NewStatsPreset() *StatsPreset {
	return &StatsPreset{MessageBase: MessageBase{MessageType_: "StatsPreset", id_: 1993}}
}
func (m *StatsPreset) Deserialize(input *DataWrapper) {
	m.Preset.Deserialize(input)
	m.Stats = NewVector[SimpleCharacterCharacteristicForPreset]()
	statsLen := int(input.ReadShort())
	for i := 0; i < statsLen; i++ {
		SimpleCharacterCharacteristicForPreset := NewSimpleCharacterCharacteristicForPreset()
		SimpleCharacterCharacteristicForPreset.Deserialize(input)
		m.Stats.Push(SimpleCharacterCharacteristicForPreset)
	}
}

func (m *StatsPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type StatsUpgradeRequestMessage struct {
	MessageBase
	UseAdditionnal bool
	StatId         int8
	BoostPoint     int
}

func NewStatsUpgradeRequestMessage() *StatsUpgradeRequestMessage {
	return &StatsUpgradeRequestMessage{MessageBase: MessageBase{MessageType_: "StatsUpgradeRequestMessage", id_: 5002}}
}
func (m *StatsUpgradeRequestMessage) Deserialize(input *DataWrapper) {
	m.UseAdditionnal = input.ReadBoolean()
	m.StatId = input.ReadByte()
	m.BoostPoint = input.ReadVarUhShort()
}

func (m *StatsUpgradeRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StatsUpgradeResultMessage struct {
	MessageBase
	Result        int8
	NbCharacBoost int
}

func NewStatsUpgradeResultMessage() *StatsUpgradeResultMessage {
	return &StatsUpgradeResultMessage{MessageBase: MessageBase{MessageType_: "StatsUpgradeResultMessage", id_: 3065}}
}
func (m *StatsUpgradeResultMessage) Deserialize(input *DataWrapper) {
	m.Result = input.ReadByte()
	m.NbCharacBoost = input.ReadVarUhShort()
}

func (m *StatsUpgradeResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopGuildChestContributionMessage struct {
	MessageBase
}

func NewStopGuildChestContributionMessage() *StopGuildChestContributionMessage {
	return &StopGuildChestContributionMessage{MessageBase: MessageBase{MessageType_: "StopGuildChestContributionMessage", id_: 1053}}
}
func (m *StopGuildChestContributionMessage) Deserialize(input *DataWrapper) {
}

func (m *StopGuildChestContributionMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopListenAllianceFightMessage struct {
	MessageBase
}

func NewStopListenAllianceFightMessage() *StopListenAllianceFightMessage {
	return &StopListenAllianceFightMessage{MessageBase: MessageBase{MessageType_: "StopListenAllianceFightMessage", id_: 6339}}
}
func (m *StopListenAllianceFightMessage) Deserialize(input *DataWrapper) {
}

func (m *StopListenAllianceFightMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopListenGuildChestStructureMessage struct {
	MessageBase
}

func NewStopListenGuildChestStructureMessage() *StopListenGuildChestStructureMessage {
	return &StopListenGuildChestStructureMessage{MessageBase: MessageBase{MessageType_: "StopListenGuildChestStructureMessage", id_: 3081}}
}
func (m *StopListenGuildChestStructureMessage) Deserialize(input *DataWrapper) {
}

func (m *StopListenGuildChestStructureMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopListenNuggetsMessage struct {
	MessageBase
}

func NewStopListenNuggetsMessage() *StopListenNuggetsMessage {
	return &StopListenNuggetsMessage{MessageBase: MessageBase{MessageType_: "StopListenNuggetsMessage", id_: 4818}}
}
func (m *StopListenNuggetsMessage) Deserialize(input *DataWrapper) {
}

func (m *StopListenNuggetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopListenTaxCollectorPresetsUpdatesMessage struct {
	MessageBase
}

func NewStopListenTaxCollectorPresetsUpdatesMessage() *StopListenTaxCollectorPresetsUpdatesMessage {
	return &StopListenTaxCollectorPresetsUpdatesMessage{MessageBase: MessageBase{MessageType_: "StopListenTaxCollectorPresetsUpdatesMessage", id_: 4043}}
}
func (m *StopListenTaxCollectorPresetsUpdatesMessage) Deserialize(input *DataWrapper) {
}

func (m *StopListenTaxCollectorPresetsUpdatesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopListenTaxCollectorUpdatesMessage struct {
	MessageBase
	TaxCollectorId float64
}

func NewStopListenTaxCollectorUpdatesMessage() *StopListenTaxCollectorUpdatesMessage {
	return &StopListenTaxCollectorUpdatesMessage{MessageBase: MessageBase{MessageType_: "StopListenTaxCollectorUpdatesMessage", id_: 4576}}
}
func (m *StopListenTaxCollectorUpdatesMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
}

func (m *StopListenTaxCollectorUpdatesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StopToListenRunningFightRequestMessage struct {
	MessageBase
}

func NewStopToListenRunningFightRequestMessage() *StopToListenRunningFightRequestMessage {
	return &StopToListenRunningFightRequestMessage{MessageBase: MessageBase{MessageType_: "StopToListenRunningFightRequestMessage", id_: 3109}}
}
func (m *StopToListenRunningFightRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *StopToListenRunningFightRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageInventoryContentMessage struct {
	MessageBase
	InventoryContentMessage
}

func NewStorageInventoryContentMessage() *StorageInventoryContentMessage {
	return &StorageInventoryContentMessage{MessageBase: MessageBase{MessageType_: "StorageInventoryContentMessage", id_: 6526}}
}
func (m *StorageInventoryContentMessage) Deserialize(input *DataWrapper) {
	m.InventoryContentMessage.Deserialize(input)
}

func (m *StorageInventoryContentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageKamasUpdateMessage struct {
	MessageBase
	KamasTotal int64
}

func NewStorageKamasUpdateMessage() *StorageKamasUpdateMessage {
	return &StorageKamasUpdateMessage{MessageBase: MessageBase{MessageType_: "StorageKamasUpdateMessage", id_: 8968}}
}
func (m *StorageKamasUpdateMessage) Deserialize(input *DataWrapper) {
	m.KamasTotal = input.ReadVarUhLong()
}

func (m *StorageKamasUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageObjectRemoveMessage struct {
	MessageBase
	ObjectUID int
}

func NewStorageObjectRemoveMessage() *StorageObjectRemoveMessage {
	return &StorageObjectRemoveMessage{MessageBase: MessageBase{MessageType_: "StorageObjectRemoveMessage", id_: 8450}}
}
func (m *StorageObjectRemoveMessage) Deserialize(input *DataWrapper) {
	m.ObjectUID = input.ReadVarUhInt()
}

func (m *StorageObjectRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageObjectUpdateMessage struct {
	MessageBase
	Object *ObjectItem
}

func NewStorageObjectUpdateMessage() *StorageObjectUpdateMessage {
	return &StorageObjectUpdateMessage{MessageBase: MessageBase{MessageType_: "StorageObjectUpdateMessage", id_: 2670}}
}
func (m *StorageObjectUpdateMessage) Deserialize(input *DataWrapper) {
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
}

func (m *StorageObjectUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageObjectsRemoveMessage struct {
	MessageBase
	ObjectUIDList *Vector[int]
}

func NewStorageObjectsRemoveMessage() *StorageObjectsRemoveMessage {
	return &StorageObjectsRemoveMessage{MessageBase: MessageBase{MessageType_: "StorageObjectsRemoveMessage", id_: 1673}}
}
func (m *StorageObjectsRemoveMessage) Deserialize(input *DataWrapper) {
	m.ObjectUIDList = NewVector[int]()
	objectUIDListLen := int(input.ReadShort())
	for i := 0; i < objectUIDListLen; i++ {
		val := input.ReadVarInt()
		m.ObjectUIDList.Push(&val)
	}
}

func (m *StorageObjectsRemoveMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageObjectsUpdateMessage struct {
	MessageBase
	ObjectList *Vector[ObjectItem]
}

func NewStorageObjectsUpdateMessage() *StorageObjectsUpdateMessage {
	return &StorageObjectsUpdateMessage{MessageBase: MessageBase{MessageType_: "StorageObjectsUpdateMessage", id_: 5323}}
}
func (m *StorageObjectsUpdateMessage) Deserialize(input *DataWrapper) {
	m.ObjectList = NewVector[ObjectItem]()
	objectListLen := int(input.ReadShort())
	for i := 0; i < objectListLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.ObjectList.Push(ObjectItem)
	}
}

func (m *StorageObjectsUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type StorageTabInformation struct {
	MessageBase
	Name               string
	TabNumber          int
	Picto              int
	OpenRight          int
	DropRight          int
	TakeRight          int
	DropTypeLimitation *Vector[int]
}

func NewStorageTabInformation() *StorageTabInformation {
	return &StorageTabInformation{MessageBase: MessageBase{MessageType_: "StorageTabInformation", id_: 8947}}
}
func (m *StorageTabInformation) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.TabNumber = input.ReadVarUhInt()
	m.Picto = input.ReadVarUhInt()
	m.OpenRight = input.ReadVarUhInt()
	m.DropRight = input.ReadVarUhInt()
	m.TakeRight = input.ReadVarUhInt()
	m.DropTypeLimitation = NewVector[int]()
	dropTypeLimitationLen := int(input.ReadShort())
	for i := 0; i < dropTypeLimitationLen; i++ {
		val := input.ReadVarInt()
		m.DropTypeLimitation.Push(&val)
	}
}

func (m *StorageTabInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type SubEntity struct {
	MessageBase
	BindingPointCategory int8
	BindingPointIndex    int8
	SubEntityLook        *EntityLook
}

func NewSubEntity() *SubEntity {
	return &SubEntity{MessageBase: MessageBase{MessageType_: "SubEntity", id_: 9491}}
}
func (m *SubEntity) Deserialize(input *DataWrapper) {
	m.BindingPointCategory = input.ReadByte()
	m.BindingPointIndex = input.ReadByte()
	m.SubEntityLook = NewEntityLook()
	m.SubEntityLook.Deserialize(input)
}

func (m *SubEntity) IsDeserializeFunctionComplete() bool {
	return true
}

type SubareaRewardRateMessage struct {
	MessageBase
	SubAreaRate int
}

func NewSubareaRewardRateMessage() *SubareaRewardRateMessage {
	return &SubareaRewardRateMessage{MessageBase: MessageBase{MessageType_: "SubareaRewardRateMessage", id_: 1678}}
}
func (m *SubareaRewardRateMessage) Deserialize(input *DataWrapper) {
	m.SubAreaRate = input.ReadVarShort()
}

func (m *SubareaRewardRateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SubscriptionLimitationMessage struct {
	MessageBase
	Reason int8
}

func NewSubscriptionLimitationMessage() *SubscriptionLimitationMessage {
	return &SubscriptionLimitationMessage{MessageBase: MessageBase{MessageType_: "SubscriptionLimitationMessage", id_: 8244}}
}
func (m *SubscriptionLimitationMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *SubscriptionLimitationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SubscriptionZoneMessage struct {
	MessageBase
	Active bool
}

func NewSubscriptionZoneMessage() *SubscriptionZoneMessage {
	return &SubscriptionZoneMessage{MessageBase: MessageBase{MessageType_: "SubscriptionZoneMessage", id_: 8183}}
}
func (m *SubscriptionZoneMessage) Deserialize(input *DataWrapper) {
	m.Active = input.ReadBoolean()
}

func (m *SubscriptionZoneMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderAccepted struct {
	MessageBase
	SurrenderResponse
}

func NewSurrenderAccepted() *SurrenderAccepted {
	return &SurrenderAccepted{MessageBase: MessageBase{MessageType_: "SurrenderAccepted", id_: 8859}}
}
func (m *SurrenderAccepted) Deserialize(input *DataWrapper) {
	m.SurrenderResponse.Deserialize(input)
}

func (m *SurrenderAccepted) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderInfoRequestMessage struct {
	MessageBase
}

func NewSurrenderInfoRequestMessage() *SurrenderInfoRequestMessage {
	return &SurrenderInfoRequestMessage{MessageBase: MessageBase{MessageType_: "SurrenderInfoRequestMessage", id_: 4015}}
}
func (m *SurrenderInfoRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *SurrenderInfoRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderInfoResponseMessage struct {
	MessageBase
	HasSanction           bool
	SurrenderResponse     SurrenderResponseI
	SurrenderVoteResponse SurrenderVoteResponseI
}

func NewSurrenderInfoResponseMessage() *SurrenderInfoResponseMessage {
	return &SurrenderInfoResponseMessage{MessageBase: MessageBase{MessageType_: "SurrenderInfoResponseMessage", id_: 99}}
}
func (m *SurrenderInfoResponseMessage) Deserialize(input *DataWrapper) {
	m.HasSanction = input.ReadBoolean()
	m.SurrenderResponse = getDynamicType(input)
	m.SurrenderResponse.Deserialize(input)
	m.SurrenderVoteResponse = getDynamicType(input)
	m.SurrenderVoteResponse.Deserialize(input)
}

func (m *SurrenderInfoResponseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderRefused struct {
	MessageBase
	SurrenderResponse
}

func NewSurrenderRefused() *SurrenderRefused {
	return &SurrenderRefused{MessageBase: MessageBase{MessageType_: "SurrenderRefused", id_: 8906}}
}
func (m *SurrenderRefused) Deserialize(input *DataWrapper) {
	m.SurrenderResponse.Deserialize(input)
}

func (m *SurrenderRefused) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderRefusedBeforeTurn struct {
	MessageBase
	SurrenderRefused
	MinTurnForSurrender int32
}

func NewSurrenderRefusedBeforeTurn() *SurrenderRefusedBeforeTurn {
	return &SurrenderRefusedBeforeTurn{MessageBase: MessageBase{MessageType_: "SurrenderRefusedBeforeTurn", id_: 9548}}
}
func (m *SurrenderRefusedBeforeTurn) Deserialize(input *DataWrapper) {
	m.SurrenderRefused.Deserialize(input)
	m.MinTurnForSurrender = input.ReadInt()
}

func (m *SurrenderRefusedBeforeTurn) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderRefusedBeforeVote struct {
	MessageBase
	SurrenderRefused
}

func NewSurrenderRefusedBeforeVote() *SurrenderRefusedBeforeVote {
	return &SurrenderRefusedBeforeVote{MessageBase: MessageBase{MessageType_: "SurrenderRefusedBeforeVote", id_: 2726}}
}
func (m *SurrenderRefusedBeforeVote) Deserialize(input *DataWrapper) {
	m.SurrenderRefused.Deserialize(input)
}

func (m *SurrenderRefusedBeforeVote) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderResponseI interface {
	Deserialize(input *DataWrapper)
}

type SurrenderResponse struct {
	MessageBase
}

func NewSurrenderResponse() *SurrenderResponse {
	return &SurrenderResponse{MessageBase: MessageBase{MessageType_: "SurrenderResponse", id_: 8655}}
}
func (m *SurrenderResponse) Deserialize(input *DataWrapper) {
}

func (m *SurrenderResponse) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderStateMessage struct {
	MessageBase
	CanSurrender bool
	PermitVote   bool
}

func NewSurrenderStateMessage() *SurrenderStateMessage {
	return &SurrenderStateMessage{MessageBase: MessageBase{MessageType_: "SurrenderStateMessage", id_: 6944}}
}
func (m *SurrenderStateMessage) Deserialize(input *DataWrapper) {
	byteBox0 := input.ReadByte()
	m.CanSurrender = (byteBox0>>0)&1 != 0
	m.PermitVote = (byteBox0>>1)&1 != 0
}

func (m *SurrenderStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteAccepted struct {
	MessageBase
	SurrenderVoteResponse
}

func NewSurrenderVoteAccepted() *SurrenderVoteAccepted {
	return &SurrenderVoteAccepted{MessageBase: MessageBase{MessageType_: "SurrenderVoteAccepted", id_: 8687}}
}
func (m *SurrenderVoteAccepted) Deserialize(input *DataWrapper) {
	m.SurrenderVoteResponse.Deserialize(input)
}

func (m *SurrenderVoteAccepted) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteCastMessage struct {
	MessageBase
	Vote bool
}

func NewSurrenderVoteCastMessage() *SurrenderVoteCastMessage {
	return &SurrenderVoteCastMessage{MessageBase: MessageBase{MessageType_: "SurrenderVoteCastMessage", id_: 4209}}
}
func (m *SurrenderVoteCastMessage) Deserialize(input *DataWrapper) {
	m.Vote = input.ReadBoolean()
}

func (m *SurrenderVoteCastMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteEndMessage struct {
	MessageBase
	VoteResult bool
}

func NewSurrenderVoteEndMessage() *SurrenderVoteEndMessage {
	return &SurrenderVoteEndMessage{MessageBase: MessageBase{MessageType_: "SurrenderVoteEndMessage", id_: 6083}}
}
func (m *SurrenderVoteEndMessage) Deserialize(input *DataWrapper) {
	m.VoteResult = input.ReadBoolean()
}

func (m *SurrenderVoteEndMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteRefused struct {
	MessageBase
	SurrenderVoteResponse
}

func NewSurrenderVoteRefused() *SurrenderVoteRefused {
	return &SurrenderVoteRefused{MessageBase: MessageBase{MessageType_: "SurrenderVoteRefused", id_: 1140}}
}
func (m *SurrenderVoteRefused) Deserialize(input *DataWrapper) {
	m.SurrenderVoteResponse.Deserialize(input)
}

func (m *SurrenderVoteRefused) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteRefusedAlreadyAsked struct {
	MessageBase
	SurrenderVoteRefused
}

func NewSurrenderVoteRefusedAlreadyAsked() *SurrenderVoteRefusedAlreadyAsked {
	return &SurrenderVoteRefusedAlreadyAsked{MessageBase: MessageBase{MessageType_: "SurrenderVoteRefusedAlreadyAsked", id_: 8978}}
}
func (m *SurrenderVoteRefusedAlreadyAsked) Deserialize(input *DataWrapper) {
	m.SurrenderVoteRefused.Deserialize(input)
}

func (m *SurrenderVoteRefusedAlreadyAsked) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteRefusedBeforeTurn struct {
	MessageBase
	SurrenderVoteRefused
	MinTurnForSurrenderVote int32
}

func NewSurrenderVoteRefusedBeforeTurn() *SurrenderVoteRefusedBeforeTurn {
	return &SurrenderVoteRefusedBeforeTurn{MessageBase: MessageBase{MessageType_: "SurrenderVoteRefusedBeforeTurn", id_: 9709}}
}
func (m *SurrenderVoteRefusedBeforeTurn) Deserialize(input *DataWrapper) {
	m.SurrenderVoteRefused.Deserialize(input)
	m.MinTurnForSurrenderVote = input.ReadInt()
}

func (m *SurrenderVoteRefusedBeforeTurn) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteRefusedWaitBetweenVotes struct {
	MessageBase
	SurrenderVoteRefused
	NextVoteTimestamp int32
}

func NewSurrenderVoteRefusedWaitBetweenVotes() *SurrenderVoteRefusedWaitBetweenVotes {
	return &SurrenderVoteRefusedWaitBetweenVotes{MessageBase: MessageBase{MessageType_: "SurrenderVoteRefusedWaitBetweenVotes", id_: 5188}}
}
func (m *SurrenderVoteRefusedWaitBetweenVotes) Deserialize(input *DataWrapper) {
	m.SurrenderVoteRefused.Deserialize(input)
	m.NextVoteTimestamp = input.ReadInt()
}

func (m *SurrenderVoteRefusedWaitBetweenVotes) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteResponseI interface {
	Deserialize(input *DataWrapper)
}

type SurrenderVoteResponse struct {
	MessageBase
}

func NewSurrenderVoteResponse() *SurrenderVoteResponse {
	return &SurrenderVoteResponse{MessageBase: MessageBase{MessageType_: "SurrenderVoteResponse", id_: 3674}}
}
func (m *SurrenderVoteResponse) Deserialize(input *DataWrapper) {
}

func (m *SurrenderVoteResponse) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteStartMessage struct {
	MessageBase
	AlreadyCastedVote    bool
	NumberOfParticipants int32
	CastedVoteNumber     int32
	VoteDuration         int32
}

func NewSurrenderVoteStartMessage() *SurrenderVoteStartMessage {
	return &SurrenderVoteStartMessage{MessageBase: MessageBase{MessageType_: "SurrenderVoteStartMessage", id_: 6177}}
}
func (m *SurrenderVoteStartMessage) Deserialize(input *DataWrapper) {
	m.AlreadyCastedVote = input.ReadBoolean()
	m.NumberOfParticipants = input.ReadInt()
	m.CastedVoteNumber = input.ReadInt()
	m.VoteDuration = input.ReadInt()
}

func (m *SurrenderVoteStartMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SurrenderVoteUpdateMessage struct {
	MessageBase
}

func NewSurrenderVoteUpdateMessage() *SurrenderVoteUpdateMessage {
	return &SurrenderVoteUpdateMessage{MessageBase: MessageBase{MessageType_: "SurrenderVoteUpdateMessage", id_: 6154}}
}
func (m *SurrenderVoteUpdateMessage) Deserialize(input *DataWrapper) {
}

func (m *SurrenderVoteUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SwitchArenaXpRewardsModeMessage struct {
	MessageBase
	XpRewards bool
}

func NewSwitchArenaXpRewardsModeMessage() *SwitchArenaXpRewardsModeMessage {
	return &SwitchArenaXpRewardsModeMessage{MessageBase: MessageBase{MessageType_: "SwitchArenaXpRewardsModeMessage", id_: 4870}}
}
func (m *SwitchArenaXpRewardsModeMessage) Deserialize(input *DataWrapper) {
	m.XpRewards = input.ReadBoolean()
}

func (m *SwitchArenaXpRewardsModeMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SymbioticObjectAssociateRequestMessage struct {
	MessageBase
	SymbioteUID int
	SymbiotePos uint8
	HostUID     int
	HostPos     uint8
}

func NewSymbioticObjectAssociateRequestMessage() *SymbioticObjectAssociateRequestMessage {
	return &SymbioticObjectAssociateRequestMessage{MessageBase: MessageBase{MessageType_: "SymbioticObjectAssociateRequestMessage", id_: 9614}}
}
func (m *SymbioticObjectAssociateRequestMessage) Deserialize(input *DataWrapper) {
	m.SymbioteUID = input.ReadVarUhInt()
	m.SymbiotePos = input.ReadUnsignedByte()
	m.HostUID = input.ReadVarUhInt()
	m.HostPos = input.ReadUnsignedByte()
}

func (m *SymbioticObjectAssociateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SymbioticObjectAssociatedMessage struct {
	MessageBase
	HostUID int
}

func NewSymbioticObjectAssociatedMessage() *SymbioticObjectAssociatedMessage {
	return &SymbioticObjectAssociatedMessage{MessageBase: MessageBase{MessageType_: "SymbioticObjectAssociatedMessage", id_: 7196}}
}
func (m *SymbioticObjectAssociatedMessage) Deserialize(input *DataWrapper) {
	m.HostUID = input.ReadVarUhInt()
}

func (m *SymbioticObjectAssociatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SymbioticObjectErrorMessage struct {
	MessageBase
	ObjectErrorMessage
	ErrorCode int8
}

func NewSymbioticObjectErrorMessage() *SymbioticObjectErrorMessage {
	return &SymbioticObjectErrorMessage{MessageBase: MessageBase{MessageType_: "SymbioticObjectErrorMessage", id_: 2086}}
}
func (m *SymbioticObjectErrorMessage) Deserialize(input *DataWrapper) {
	m.ObjectErrorMessage.Deserialize(input)
	m.ErrorCode = input.ReadByte()
}

func (m *SymbioticObjectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type SystemMessageDisplayMessage struct {
	MessageBase
	HangUp     bool
	MsgId      int
	Parameters *Vector[string]
}

func NewSystemMessageDisplayMessage() *SystemMessageDisplayMessage {
	return &SystemMessageDisplayMessage{MessageBase: MessageBase{MessageType_: "SystemMessageDisplayMessage", id_: 5943}}
}
func (m *SystemMessageDisplayMessage) Deserialize(input *DataWrapper) {
	m.HangUp = input.ReadBoolean()
	m.MsgId = input.ReadVarUhShort()
	m.Parameters = NewVector[string]()
	parametersLen := int(input.ReadShort())
	for i := 0; i < parametersLen; i++ {
		val := input.ReadUTF()
		m.Parameters.Push(&val)
	}
}

func (m *SystemMessageDisplayMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorAddedMessage struct {
	MessageBase
	CallerId    int64
	Description TaxCollectorInformationsI
}

func NewTaxCollectorAddedMessage() *TaxCollectorAddedMessage {
	return &TaxCollectorAddedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorAddedMessage", id_: 7370}}
}
func (m *TaxCollectorAddedMessage) Deserialize(input *DataWrapper) {
	m.CallerId = input.ReadVarUhLong()
	m.Description = getDynamicType(input)
	m.Description.Deserialize(input)
}

func (m *TaxCollectorAddedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorAttackedMessage struct {
	MessageBase
	FirstNameId int
	LastNameId  int
	WorldX      int16
	WorldY      int16
	MapId       float64
	SubAreaId   int
	Alliance    *BasicAllianceInformations
}

func NewTaxCollectorAttackedMessage() *TaxCollectorAttackedMessage {
	return &TaxCollectorAttackedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorAttackedMessage", id_: 5361}}
}
func (m *TaxCollectorAttackedMessage) Deserialize(input *DataWrapper) {
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.Alliance = NewBasicAllianceInformations()
	m.Alliance.Deserialize(input)
}

func (m *TaxCollectorAttackedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorAttackedResultMessage struct {
	MessageBase
	DeadOrAlive bool
	BasicInfos  *TaxCollectorBasicInformations
	Alliance    *BasicAllianceInformations
}

func NewTaxCollectorAttackedResultMessage() *TaxCollectorAttackedResultMessage {
	return &TaxCollectorAttackedResultMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorAttackedResultMessage", id_: 4787}}
}
func (m *TaxCollectorAttackedResultMessage) Deserialize(input *DataWrapper) {
	m.DeadOrAlive = input.ReadBoolean()
	m.BasicInfos = NewTaxCollectorBasicInformations()
	m.BasicInfos.Deserialize(input)
	m.Alliance = NewBasicAllianceInformations()
	m.Alliance.Deserialize(input)
}

func (m *TaxCollectorAttackedResultMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorBasicInformations struct {
	MessageBase
	FirstNameId int
	LastNameId  int
	WorldX      int16
	WorldY      int16
	MapId       float64
	SubAreaId   int
}

func NewTaxCollectorBasicInformations() *TaxCollectorBasicInformations {
	return &TaxCollectorBasicInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorBasicInformations", id_: 4890}}
}
func (m *TaxCollectorBasicInformations) Deserialize(input *DataWrapper) {
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
}

func (m *TaxCollectorBasicInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorComplementaryInformationsI interface {
	Deserialize(input *DataWrapper)
}

type TaxCollectorComplementaryInformations struct {
	MessageBase
}

func NewTaxCollectorComplementaryInformations() *TaxCollectorComplementaryInformations {
	return &TaxCollectorComplementaryInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorComplementaryInformations", id_: 1982}}
}
func (m *TaxCollectorComplementaryInformations) Deserialize(input *DataWrapper) {
}

func (m *TaxCollectorComplementaryInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorDialogQuestionBasicMessage struct {
	MessageBase
	AllianceInfo *BasicAllianceInformations
}

func NewTaxCollectorDialogQuestionBasicMessage() *TaxCollectorDialogQuestionBasicMessage {
	return &TaxCollectorDialogQuestionBasicMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorDialogQuestionBasicMessage", id_: 3500}}
}
func (m *TaxCollectorDialogQuestionBasicMessage) Deserialize(input *DataWrapper) {
	m.AllianceInfo = NewBasicAllianceInformations()
	m.AllianceInfo.Deserialize(input)
}

func (m *TaxCollectorDialogQuestionBasicMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorDialogQuestionExtendedMessage struct {
	MessageBase
	TaxCollectorDialogQuestionBasicMessage
	MaxPods            int
	Prospecting        int
	Alliance           *BasicNamedAllianceInformations
	TaxCollectorsCount int8
	TaxCollectorAttack int32
	Pods               int
	ItemsValue         int64
}

func NewTaxCollectorDialogQuestionExtendedMessage() *TaxCollectorDialogQuestionExtendedMessage {
	return &TaxCollectorDialogQuestionExtendedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorDialogQuestionExtendedMessage", id_: 8713}}
}
func (m *TaxCollectorDialogQuestionExtendedMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorDialogQuestionBasicMessage.Deserialize(input)
	m.MaxPods = input.ReadVarUhShort()
	m.Prospecting = input.ReadVarUhShort()
	m.Alliance = NewBasicNamedAllianceInformations()
	m.Alliance.Deserialize(input)
	m.TaxCollectorsCount = input.ReadByte()
	m.TaxCollectorAttack = input.ReadInt()
	m.Pods = input.ReadVarUhInt()
	m.ItemsValue = input.ReadVarUhLong()
}

func (m *TaxCollectorDialogQuestionExtendedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorEquipmentUpdateMessage struct {
	MessageBase
	UniqueId        float64
	Object          *ObjectItem
	Added           bool
	Characteristics *CharacterCharacteristics
}

func NewTaxCollectorEquipmentUpdateMessage() *TaxCollectorEquipmentUpdateMessage {
	return &TaxCollectorEquipmentUpdateMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorEquipmentUpdateMessage", id_: 2451}}
}
func (m *TaxCollectorEquipmentUpdateMessage) Deserialize(input *DataWrapper) {
	m.UniqueId = input.ReadDouble()
	m.Object = NewObjectItem()
	m.Object.Deserialize(input)
	m.Added = input.ReadBoolean()
	m.Characteristics = NewCharacterCharacteristics()
	m.Characteristics.Deserialize(input)
}

func (m *TaxCollectorEquipmentUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorErrorMessage struct {
	MessageBase
	Reason int8
}

func NewTaxCollectorErrorMessage() *TaxCollectorErrorMessage {
	return &TaxCollectorErrorMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorErrorMessage", id_: 2186}}
}
func (m *TaxCollectorErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *TaxCollectorErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorHarvestedMessage struct {
	MessageBase
	TaxCollectorId float64
	HarvesterId    int64
	HarvesterName  string
}

func NewTaxCollectorHarvestedMessage() *TaxCollectorHarvestedMessage {
	return &TaxCollectorHarvestedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorHarvestedMessage", id_: 3704}}
}
func (m *TaxCollectorHarvestedMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
	m.HarvesterId = input.ReadVarUhLong()
	m.HarvesterName = input.ReadUTF()
}

func (m *TaxCollectorHarvestedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorInformationsI interface {
	Deserialize(input *DataWrapper)
}

type TaxCollectorInformations struct {
	MessageBase
	UniqueId         float64
	FirstNameId      int
	LastNameId       int
	AllianceIdentity *AllianceInformation
	AdditionalInfos  *AdditionalTaxCollectorInformation
	WorldX           int16
	WorldY           int16
	SubAreaId        int
	State            int8
	Look             *EntityLook
	Complements      *Vector[TaxCollectorComplementaryInformationsI]
	Characteristics  *CharacterCharacteristics
	Equipments       *Vector[ObjectItem]
	Spells           *Vector[TaxCollectorOrderedSpell]
}

func NewTaxCollectorInformations() *TaxCollectorInformations {
	return &TaxCollectorInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorInformations", id_: 4158}}
}
func (m *TaxCollectorInformations) Deserialize(input *DataWrapper) {
	m.UniqueId = input.ReadDouble()
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
	m.AllianceIdentity = NewAllianceInformation()
	m.AllianceIdentity.Deserialize(input)
	m.AdditionalInfos = NewAdditionalTaxCollectorInformation()
	m.AdditionalInfos.Deserialize(input)
	m.WorldX = input.ReadShort()
	m.WorldY = input.ReadShort()
	m.SubAreaId = input.ReadVarUhShort()
	m.State = input.ReadByte()
	m.Look = NewEntityLook()
	m.Look.Deserialize(input)
	m.Complements = NewVector[TaxCollectorComplementaryInformationsI]()
	complementsLen := int(input.ReadShort())
	for i := 0; i < complementsLen; i++ {
		foundTaxCollectorComplementaryInformations := getDynamicType(input)
		if castedTaxCollectorComplementaryInformations, ok := foundTaxCollectorComplementaryInformations.(TaxCollectorComplementaryInformationsI); ok {
			castedTaxCollectorComplementaryInformations.Deserialize(input)
			m.Complements.Push(&castedTaxCollectorComplementaryInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement TaxCollectorComplementaryInformationsI, got: " + fmt.Sprintf("%T", foundTaxCollectorComplementaryInformations))
		}
	}
	m.Characteristics = NewCharacterCharacteristics()
	m.Characteristics.Deserialize(input)
	m.Equipments = NewVector[ObjectItem]()
	equipmentsLen := int(input.ReadShort())
	for i := 0; i < equipmentsLen; i++ {
		ObjectItem := NewObjectItem()
		ObjectItem.Deserialize(input)
		m.Equipments.Push(ObjectItem)
	}
	m.Spells = NewVector[TaxCollectorOrderedSpell]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		TaxCollectorOrderedSpell := NewTaxCollectorOrderedSpell()
		TaxCollectorOrderedSpell.Deserialize(input)
		m.Spells.Push(TaxCollectorOrderedSpell)
	}
}

func (m *TaxCollectorInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorLootInformations struct {
	MessageBase
	TaxCollectorComplementaryInformations
	Pods       int
	ItemsValue int64
}

func NewTaxCollectorLootInformations() *TaxCollectorLootInformations {
	return &TaxCollectorLootInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorLootInformations", id_: 4183}}
}
func (m *TaxCollectorLootInformations) Deserialize(input *DataWrapper) {
	m.TaxCollectorComplementaryInformations.Deserialize(input)
	m.Pods = input.ReadVarUhInt()
	m.ItemsValue = input.ReadVarUhLong()
}

func (m *TaxCollectorLootInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorMovement struct {
	MessageBase
	MovementType int8
	BasicInfos   *TaxCollectorBasicInformations
	PlayerId     int64
	PlayerName   string
}

func NewTaxCollectorMovement() *TaxCollectorMovement {
	return &TaxCollectorMovement{MessageBase: MessageBase{MessageType_: "TaxCollectorMovement", id_: 7487}}
}
func (m *TaxCollectorMovement) Deserialize(input *DataWrapper) {
	m.MovementType = input.ReadByte()
	m.BasicInfos = NewTaxCollectorBasicInformations()
	m.BasicInfos.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
	m.PlayerName = input.ReadUTF()
}

func (m *TaxCollectorMovement) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorMovementsOfflineMessage struct {
	MessageBase
	Movements *Vector[TaxCollectorMovement]
}

func NewTaxCollectorMovementsOfflineMessage() *TaxCollectorMovementsOfflineMessage {
	return &TaxCollectorMovementsOfflineMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorMovementsOfflineMessage", id_: 4833}}
}
func (m *TaxCollectorMovementsOfflineMessage) Deserialize(input *DataWrapper) {
	m.Movements = NewVector[TaxCollectorMovement]()
	movementsLen := int(input.ReadShort())
	for i := 0; i < movementsLen; i++ {
		TaxCollectorMovement := NewTaxCollectorMovement()
		TaxCollectorMovement.Deserialize(input)
		m.Movements.Push(TaxCollectorMovement)
	}
}

func (m *TaxCollectorMovementsOfflineMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorOrderedSpell struct {
	MessageBase
	SpellId int
	Slot    int8
}

func NewTaxCollectorOrderedSpell() *TaxCollectorOrderedSpell {
	return &TaxCollectorOrderedSpell{MessageBase: MessageBase{MessageType_: "TaxCollectorOrderedSpell", id_: 3173}}
}
func (m *TaxCollectorOrderedSpell) Deserialize(input *DataWrapper) {
	m.SpellId = input.ReadVarUhInt()
	m.Slot = input.ReadByte()
}

func (m *TaxCollectorOrderedSpell) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorOrderedSpellUpdatedMessage struct {
	MessageBase
	TaxCollectorId     float64
	TaxCollectorSpells *Vector[TaxCollectorOrderedSpell]
}

func NewTaxCollectorOrderedSpellUpdatedMessage() *TaxCollectorOrderedSpellUpdatedMessage {
	return &TaxCollectorOrderedSpellUpdatedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorOrderedSpellUpdatedMessage", id_: 2428}}
}
func (m *TaxCollectorOrderedSpellUpdatedMessage) Deserialize(input *DataWrapper) {
	m.TaxCollectorId = input.ReadDouble()
	m.TaxCollectorSpells = NewVector[TaxCollectorOrderedSpell]()
	taxCollectorSpellsLen := int(input.ReadShort())
	for i := 0; i < taxCollectorSpellsLen; i++ {
		TaxCollectorOrderedSpell := NewTaxCollectorOrderedSpell()
		TaxCollectorOrderedSpell.Deserialize(input)
		m.TaxCollectorSpells.Push(TaxCollectorOrderedSpell)
	}
}

func (m *TaxCollectorOrderedSpellUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorPreset struct {
	MessageBase
	PresetId        *Uuid
	Spells          *Vector[TaxCollectorOrderedSpell]
	Characteristics *CharacterCharacteristics
}

func NewTaxCollectorPreset() *TaxCollectorPreset {
	return &TaxCollectorPreset{MessageBase: MessageBase{MessageType_: "TaxCollectorPreset", id_: 1854}}
}
func (m *TaxCollectorPreset) Deserialize(input *DataWrapper) {
	m.PresetId = NewUuid()
	m.PresetId.Deserialize(input)
	m.Spells = NewVector[TaxCollectorOrderedSpell]()
	spellsLen := int(input.ReadShort())
	for i := 0; i < spellsLen; i++ {
		TaxCollectorOrderedSpell := NewTaxCollectorOrderedSpell()
		TaxCollectorOrderedSpell.Deserialize(input)
		m.Spells.Push(TaxCollectorOrderedSpell)
	}
	m.Characteristics = NewCharacterCharacteristics()
	m.Characteristics.Deserialize(input)
}

func (m *TaxCollectorPreset) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorPresetSpellUpdatedMessage struct {
	MessageBase
	PresetId           *Uuid
	TaxCollectorSpells *Vector[TaxCollectorOrderedSpell]
}

func NewTaxCollectorPresetSpellUpdatedMessage() *TaxCollectorPresetSpellUpdatedMessage {
	return &TaxCollectorPresetSpellUpdatedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorPresetSpellUpdatedMessage", id_: 2628}}
}
func (m *TaxCollectorPresetSpellUpdatedMessage) Deserialize(input *DataWrapper) {
	m.PresetId = NewUuid()
	m.PresetId.Deserialize(input)
	m.TaxCollectorSpells = NewVector[TaxCollectorOrderedSpell]()
	taxCollectorSpellsLen := int(input.ReadShort())
	for i := 0; i < taxCollectorSpellsLen; i++ {
		TaxCollectorOrderedSpell := NewTaxCollectorOrderedSpell()
		TaxCollectorOrderedSpell.Deserialize(input)
		m.TaxCollectorSpells.Push(TaxCollectorOrderedSpell)
	}
}

func (m *TaxCollectorPresetSpellUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorPresetsMessage struct {
	MessageBase
	Presets *Vector[TaxCollectorPreset]
}

func NewTaxCollectorPresetsMessage() *TaxCollectorPresetsMessage {
	return &TaxCollectorPresetsMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorPresetsMessage", id_: 9900}}
}
func (m *TaxCollectorPresetsMessage) Deserialize(input *DataWrapper) {
	m.Presets = NewVector[TaxCollectorPreset]()
	presetsLen := int(input.ReadShort())
	for i := 0; i < presetsLen; i++ {
		TaxCollectorPreset := NewTaxCollectorPreset()
		TaxCollectorPreset.Deserialize(input)
		m.Presets.Push(TaxCollectorPreset)
	}
}

func (m *TaxCollectorPresetsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorRemovedMessage struct {
	MessageBase
	CollectorId float64
}

func NewTaxCollectorRemovedMessage() *TaxCollectorRemovedMessage {
	return &TaxCollectorRemovedMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorRemovedMessage", id_: 2310}}
}
func (m *TaxCollectorRemovedMessage) Deserialize(input *DataWrapper) {
	m.CollectorId = input.ReadDouble()
}

func (m *TaxCollectorRemovedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorStateUpdateMessage struct {
	MessageBase
	UniqueId float64
	State    int8
}

func NewTaxCollectorStateUpdateMessage() *TaxCollectorStateUpdateMessage {
	return &TaxCollectorStateUpdateMessage{MessageBase: MessageBase{MessageType_: "TaxCollectorStateUpdateMessage", id_: 5744}}
}
func (m *TaxCollectorStateUpdateMessage) Deserialize(input *DataWrapper) {
	m.UniqueId = input.ReadDouble()
	m.State = input.ReadByte()
}

func (m *TaxCollectorStateUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorStaticInformationsI interface {
	Deserialize(input *DataWrapper)
}

type TaxCollectorStaticInformations struct {
	MessageBase
	FirstNameId      int
	LastNameId       int
	AllianceIdentity *AllianceInformation
	CallerId         int64
	Uid              string
}

func NewTaxCollectorStaticInformations() *TaxCollectorStaticInformations {
	return &TaxCollectorStaticInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorStaticInformations", id_: 1672}}
}
func (m *TaxCollectorStaticInformations) Deserialize(input *DataWrapper) {
	m.FirstNameId = input.ReadVarUhShort()
	m.LastNameId = input.ReadVarUhShort()
	m.AllianceIdentity = NewAllianceInformation()
	m.AllianceIdentity.Deserialize(input)
	m.CallerId = input.ReadVarUhLong()
	m.Uid = input.ReadUTF()
}

func (m *TaxCollectorStaticInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TaxCollectorWaitingForHelpInformations struct {
	MessageBase
	TaxCollectorComplementaryInformations
	WaitingForHelpInfo *ProtectedEntityWaitingForHelpInfo
}

func NewTaxCollectorWaitingForHelpInformations() *TaxCollectorWaitingForHelpInformations {
	return &TaxCollectorWaitingForHelpInformations{MessageBase: MessageBase{MessageType_: "TaxCollectorWaitingForHelpInformations", id_: 5931}}
}
func (m *TaxCollectorWaitingForHelpInformations) Deserialize(input *DataWrapper) {
	m.TaxCollectorComplementaryInformations.Deserialize(input)
	m.WaitingForHelpInfo = NewProtectedEntityWaitingForHelpInfo()
	m.WaitingForHelpInfo.Deserialize(input)
}

func (m *TaxCollectorWaitingForHelpInformations) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportBuddiesAnswerMessage struct {
	MessageBase
	Accept bool
}

func NewTeleportBuddiesAnswerMessage() *TeleportBuddiesAnswerMessage {
	return &TeleportBuddiesAnswerMessage{MessageBase: MessageBase{MessageType_: "TeleportBuddiesAnswerMessage", id_: 368}}
}
func (m *TeleportBuddiesAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
}

func (m *TeleportBuddiesAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportBuddiesMessage struct {
	MessageBase
	DungeonId int
}

func NewTeleportBuddiesMessage() *TeleportBuddiesMessage {
	return &TeleportBuddiesMessage{MessageBase: MessageBase{MessageType_: "TeleportBuddiesMessage", id_: 9554}}
}
func (m *TeleportBuddiesMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
}

func (m *TeleportBuddiesMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportBuddiesRequestedMessage struct {
	MessageBase
	DungeonId         int
	InviterId         int64
	InvalidBuddiesIds *Vector[int64]
}

func NewTeleportBuddiesRequestedMessage() *TeleportBuddiesRequestedMessage {
	return &TeleportBuddiesRequestedMessage{MessageBase: MessageBase{MessageType_: "TeleportBuddiesRequestedMessage", id_: 2454}}
}
func (m *TeleportBuddiesRequestedMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.InviterId = input.ReadVarUhLong()
	m.InvalidBuddiesIds = NewVector[int64]()
	invalidBuddiesIdsLen := int(input.ReadShort())
	for i := 0; i < invalidBuddiesIdsLen; i++ {
		val := input.ReadVarLong()
		m.InvalidBuddiesIds.Push(&val)
	}
}

func (m *TeleportBuddiesRequestedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportDestination struct {
	MessageBase
	Type      int8
	MapId     float64
	SubAreaId int
	Level     int
	Cost      int
}

func NewTeleportDestination() *TeleportDestination {
	return &TeleportDestination{MessageBase: MessageBase{MessageType_: "TeleportDestination", id_: 1570}}
}
func (m *TeleportDestination) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
	m.MapId = input.ReadDouble()
	m.SubAreaId = input.ReadVarUhShort()
	m.Level = input.ReadVarUhShort()
	m.Cost = input.ReadVarUhShort()
}

func (m *TeleportDestination) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportDestinationsMessage struct {
	MessageBase
	Type         int8
	Destinations *Vector[TeleportDestination]
}

func NewTeleportDestinationsMessage() *TeleportDestinationsMessage {
	return &TeleportDestinationsMessage{MessageBase: MessageBase{MessageType_: "TeleportDestinationsMessage", id_: 7615}}
}
func (m *TeleportDestinationsMessage) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
	m.Destinations = NewVector[TeleportDestination]()
	destinationsLen := int(input.ReadShort())
	for i := 0; i < destinationsLen; i++ {
		TeleportDestination := NewTeleportDestination()
		TeleportDestination.Deserialize(input)
		m.Destinations.Push(TeleportDestination)
	}
}

func (m *TeleportDestinationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportHavenBagAnswerMessage struct {
	MessageBase
	Accept bool
}

func NewTeleportHavenBagAnswerMessage() *TeleportHavenBagAnswerMessage {
	return &TeleportHavenBagAnswerMessage{MessageBase: MessageBase{MessageType_: "TeleportHavenBagAnswerMessage", id_: 9340}}
}
func (m *TeleportHavenBagAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
}

func (m *TeleportHavenBagAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportHavenBagRequestMessage struct {
	MessageBase
	GuestId int64
}

func NewTeleportHavenBagRequestMessage() *TeleportHavenBagRequestMessage {
	return &TeleportHavenBagRequestMessage{MessageBase: MessageBase{MessageType_: "TeleportHavenBagRequestMessage", id_: 8587}}
}
func (m *TeleportHavenBagRequestMessage) Deserialize(input *DataWrapper) {
	m.GuestId = input.ReadVarUhLong()
}

func (m *TeleportHavenBagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportOnSameMapMessage struct {
	MessageBase
	TargetId float64
	CellId   int
}

func NewTeleportOnSameMapMessage() *TeleportOnSameMapMessage {
	return &TeleportOnSameMapMessage{MessageBase: MessageBase{MessageType_: "TeleportOnSameMapMessage", id_: 6669}}
}
func (m *TeleportOnSameMapMessage) Deserialize(input *DataWrapper) {
	m.TargetId = input.ReadDouble()
	m.CellId = input.ReadVarUhShort()
}

func (m *TeleportOnSameMapMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportPlayerAnswerMessage struct {
	MessageBase
	Accept      bool
	RequesterId int64
}

func NewTeleportPlayerAnswerMessage() *TeleportPlayerAnswerMessage {
	return &TeleportPlayerAnswerMessage{MessageBase: MessageBase{MessageType_: "TeleportPlayerAnswerMessage", id_: 4603}}
}
func (m *TeleportPlayerAnswerMessage) Deserialize(input *DataWrapper) {
	m.Accept = input.ReadBoolean()
	m.RequesterId = input.ReadVarUhLong()
}

func (m *TeleportPlayerAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportPlayerCloseMessage struct {
	MessageBase
	MapId       float64
	RequesterId int64
}

func NewTeleportPlayerCloseMessage() *TeleportPlayerCloseMessage {
	return &TeleportPlayerCloseMessage{MessageBase: MessageBase{MessageType_: "TeleportPlayerCloseMessage", id_: 4378}}
}
func (m *TeleportPlayerCloseMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.RequesterId = input.ReadVarUhLong()
}

func (m *TeleportPlayerCloseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportPlayerOfferMessage struct {
	MessageBase
	MapId       float64
	Message     string
	TimeLeft    int
	RequesterId int64
}

func NewTeleportPlayerOfferMessage() *TeleportPlayerOfferMessage {
	return &TeleportPlayerOfferMessage{MessageBase: MessageBase{MessageType_: "TeleportPlayerOfferMessage", id_: 9777}}
}
func (m *TeleportPlayerOfferMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.Message = input.ReadUTF()
	m.TimeLeft = input.ReadVarUhInt()
	m.RequesterId = input.ReadVarUhLong()
}

func (m *TeleportPlayerOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportRequestMessage struct {
	MessageBase
	SourceType      int8
	DestinationType int8
	MapId           float64
}

func NewTeleportRequestMessage() *TeleportRequestMessage {
	return &TeleportRequestMessage{MessageBase: MessageBase{MessageType_: "TeleportRequestMessage", id_: 9439}}
}
func (m *TeleportRequestMessage) Deserialize(input *DataWrapper) {
	m.SourceType = input.ReadByte()
	m.DestinationType = input.ReadByte()
	m.MapId = input.ReadDouble()
}

func (m *TeleportRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportToBuddyAnswerMessage struct {
	MessageBase
	DungeonId int
	BuddyId   int64
	Accept    bool
}

func NewTeleportToBuddyAnswerMessage() *TeleportToBuddyAnswerMessage {
	return &TeleportToBuddyAnswerMessage{MessageBase: MessageBase{MessageType_: "TeleportToBuddyAnswerMessage", id_: 3588}}
}
func (m *TeleportToBuddyAnswerMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.BuddyId = input.ReadVarUhLong()
	m.Accept = input.ReadBoolean()
}

func (m *TeleportToBuddyAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportToBuddyCloseMessage struct {
	MessageBase
	DungeonId int
	BuddyId   int64
}

func NewTeleportToBuddyCloseMessage() *TeleportToBuddyCloseMessage {
	return &TeleportToBuddyCloseMessage{MessageBase: MessageBase{MessageType_: "TeleportToBuddyCloseMessage", id_: 4968}}
}
func (m *TeleportToBuddyCloseMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.BuddyId = input.ReadVarUhLong()
}

func (m *TeleportToBuddyCloseMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TeleportToBuddyOfferMessage struct {
	MessageBase
	DungeonId int
	BuddyId   int64
	TimeLeft  int
}

func NewTeleportToBuddyOfferMessage() *TeleportToBuddyOfferMessage {
	return &TeleportToBuddyOfferMessage{MessageBase: MessageBase{MessageType_: "TeleportToBuddyOfferMessage", id_: 5491}}
}
func (m *TeleportToBuddyOfferMessage) Deserialize(input *DataWrapper) {
	m.DungeonId = input.ReadVarUhShort()
	m.BuddyId = input.ReadVarUhLong()
	m.TimeLeft = input.ReadVarUhInt()
}

func (m *TeleportToBuddyOfferMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TextInformationMessage struct {
	MessageBase
	MsgType    int8
	MsgId      int
	Parameters *Vector[string]
}

func NewTextInformationMessage() *TextInformationMessage {
	return &TextInformationMessage{MessageBase: MessageBase{MessageType_: "TextInformationMessage", id_: 3766}}
}
func (m *TextInformationMessage) Deserialize(input *DataWrapper) {
	m.MsgType = input.ReadByte()
	m.MsgId = input.ReadVarUhShort()
	m.Parameters = NewVector[string]()
	parametersLen := int(input.ReadShort())
	for i := 0; i < parametersLen; i++ {
		val := input.ReadUTF()
		m.Parameters.Push(&val)
	}
}

func (m *TextInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitleGainedMessage struct {
	MessageBase
	TitleId int
}

func NewTitleGainedMessage() *TitleGainedMessage {
	return &TitleGainedMessage{MessageBase: MessageBase{MessageType_: "TitleGainedMessage", id_: 455}}
}
func (m *TitleGainedMessage) Deserialize(input *DataWrapper) {
	m.TitleId = input.ReadVarUhShort()
}

func (m *TitleGainedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitleLostMessage struct {
	MessageBase
	TitleId int
}

func NewTitleLostMessage() *TitleLostMessage {
	return &TitleLostMessage{MessageBase: MessageBase{MessageType_: "TitleLostMessage", id_: 4759}}
}
func (m *TitleLostMessage) Deserialize(input *DataWrapper) {
	m.TitleId = input.ReadVarUhShort()
}

func (m *TitleLostMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitleSelectErrorMessage struct {
	MessageBase
	Reason int8
}

func NewTitleSelectErrorMessage() *TitleSelectErrorMessage {
	return &TitleSelectErrorMessage{MessageBase: MessageBase{MessageType_: "TitleSelectErrorMessage", id_: 3338}}
}
func (m *TitleSelectErrorMessage) Deserialize(input *DataWrapper) {
	m.Reason = input.ReadByte()
}

func (m *TitleSelectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitleSelectRequestMessage struct {
	MessageBase
	TitleId int
}

func NewTitleSelectRequestMessage() *TitleSelectRequestMessage {
	return &TitleSelectRequestMessage{MessageBase: MessageBase{MessageType_: "TitleSelectRequestMessage", id_: 5375}}
}
func (m *TitleSelectRequestMessage) Deserialize(input *DataWrapper) {
	m.TitleId = input.ReadVarUhShort()
}

func (m *TitleSelectRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitleSelectedMessage struct {
	MessageBase
	TitleId int
}

func NewTitleSelectedMessage() *TitleSelectedMessage {
	return &TitleSelectedMessage{MessageBase: MessageBase{MessageType_: "TitleSelectedMessage", id_: 1653}}
}
func (m *TitleSelectedMessage) Deserialize(input *DataWrapper) {
	m.TitleId = input.ReadVarUhShort()
}

func (m *TitleSelectedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitlesAndOrnamentsListMessage struct {
	MessageBase
	Titles         *Vector[int]
	Ornaments      *Vector[int]
	ActiveTitle    int
	ActiveOrnament int
}

func NewTitlesAndOrnamentsListMessage() *TitlesAndOrnamentsListMessage {
	return &TitlesAndOrnamentsListMessage{MessageBase: MessageBase{MessageType_: "TitlesAndOrnamentsListMessage", id_: 3749}}
}
func (m *TitlesAndOrnamentsListMessage) Deserialize(input *DataWrapper) {
	m.Titles = NewVector[int]()
	titlesLen := int(input.ReadShort())
	for i := 0; i < titlesLen; i++ {
		val := input.ReadVarShort()
		m.Titles.Push(&val)
	}
	m.Ornaments = NewVector[int]()
	ornamentsLen := int(input.ReadShort())
	for i := 0; i < ornamentsLen; i++ {
		val := input.ReadVarShort()
		m.Ornaments.Push(&val)
	}
	m.ActiveTitle = input.ReadVarUhShort()
	m.ActiveOrnament = input.ReadVarUhShort()
}

func (m *TitlesAndOrnamentsListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TitlesAndOrnamentsListRequestMessage struct {
	MessageBase
}

func NewTitlesAndOrnamentsListRequestMessage() *TitlesAndOrnamentsListRequestMessage {
	return &TitlesAndOrnamentsListRequestMessage{MessageBase: MessageBase{MessageType_: "TitlesAndOrnamentsListRequestMessage", id_: 483}}
}
func (m *TitlesAndOrnamentsListRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *TitlesAndOrnamentsListRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TopTaxCollectorListMessage struct {
	MessageBase
	DungeonTaxCollectorsInformation *Vector[TaxCollectorInformationsI]
	WorldTaxCollectorsInformation   *Vector[TaxCollectorInformationsI]
}

func NewTopTaxCollectorListMessage() *TopTaxCollectorListMessage {
	return &TopTaxCollectorListMessage{MessageBase: MessageBase{MessageType_: "TopTaxCollectorListMessage", id_: 3893}}
}
func (m *TopTaxCollectorListMessage) Deserialize(input *DataWrapper) {
	m.DungeonTaxCollectorsInformation = NewVector[TaxCollectorInformationsI]()
	dungeonTaxCollectorsInformationLen := int(input.ReadShort())
	for i := 0; i < dungeonTaxCollectorsInformationLen; i++ {
		foundTaxCollectorInformations := getDynamicType(input)
		if castedTaxCollectorInformations, ok := foundTaxCollectorInformations.(TaxCollectorInformationsI); ok {
			castedTaxCollectorInformations.Deserialize(input)
			m.DungeonTaxCollectorsInformation.Push(&castedTaxCollectorInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement TaxCollectorInformationsI, got: " + fmt.Sprintf("%T", foundTaxCollectorInformations))
		}
	}
	m.WorldTaxCollectorsInformation = NewVector[TaxCollectorInformationsI]()
	worldTaxCollectorsInformationLen := int(input.ReadShort())
	for i := 0; i < worldTaxCollectorsInformationLen; i++ {
		foundTaxCollectorInformations := getDynamicType(input)
		if castedTaxCollectorInformations, ok := foundTaxCollectorInformations.(TaxCollectorInformationsI); ok {
			castedTaxCollectorInformations.Deserialize(input)
			m.WorldTaxCollectorsInformation.Push(&castedTaxCollectorInformations)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement TaxCollectorInformationsI, got: " + fmt.Sprintf("%T", foundTaxCollectorInformations))
		}
	}
}

func (m *TopTaxCollectorListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntAvailableRetryCountUpdateMessage struct {
	MessageBase
	QuestType           int8
	AvailableRetryCount int32
}

func NewTreasureHuntAvailableRetryCountUpdateMessage() *TreasureHuntAvailableRetryCountUpdateMessage {
	return &TreasureHuntAvailableRetryCountUpdateMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntAvailableRetryCountUpdateMessage", id_: 1628}}
}
func (m *TreasureHuntAvailableRetryCountUpdateMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.AvailableRetryCount = input.ReadInt()
}

func (m *TreasureHuntAvailableRetryCountUpdateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntDigRequestAnswerFailedMessage struct {
	MessageBase
	TreasureHuntDigRequestAnswerMessage
	WrongFlagCount int8
}

func NewTreasureHuntDigRequestAnswerFailedMessage() *TreasureHuntDigRequestAnswerFailedMessage {
	return &TreasureHuntDigRequestAnswerFailedMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntDigRequestAnswerFailedMessage", id_: 2459}}
}
func (m *TreasureHuntDigRequestAnswerFailedMessage) Deserialize(input *DataWrapper) {
	m.TreasureHuntDigRequestAnswerMessage.Deserialize(input)
	m.WrongFlagCount = input.ReadByte()
}

func (m *TreasureHuntDigRequestAnswerFailedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntDigRequestAnswerMessage struct {
	MessageBase
	QuestType int8
	Result    int8
}

func NewTreasureHuntDigRequestAnswerMessage() *TreasureHuntDigRequestAnswerMessage {
	return &TreasureHuntDigRequestAnswerMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntDigRequestAnswerMessage", id_: 3567}}
}
func (m *TreasureHuntDigRequestAnswerMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.Result = input.ReadByte()
}

func (m *TreasureHuntDigRequestAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntDigRequestMessage struct {
	MessageBase
	QuestType int8
}

func NewTreasureHuntDigRequestMessage() *TreasureHuntDigRequestMessage {
	return &TreasureHuntDigRequestMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntDigRequestMessage", id_: 6696}}
}
func (m *TreasureHuntDigRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
}

func (m *TreasureHuntDigRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntFinishedMessage struct {
	MessageBase
	QuestType int8
}

func NewTreasureHuntFinishedMessage() *TreasureHuntFinishedMessage {
	return &TreasureHuntFinishedMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntFinishedMessage", id_: 1937}}
}
func (m *TreasureHuntFinishedMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
}

func (m *TreasureHuntFinishedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntFlag struct {
	MessageBase
	MapId float64
	State int8
}

func NewTreasureHuntFlag() *TreasureHuntFlag {
	return &TreasureHuntFlag{MessageBase: MessageBase{MessageType_: "TreasureHuntFlag", id_: 8258}}
}
func (m *TreasureHuntFlag) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
	m.State = input.ReadByte()
}

func (m *TreasureHuntFlag) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntFlagRemoveRequestMessage struct {
	MessageBase
	QuestType int8
	Index     int8
}

func NewTreasureHuntFlagRemoveRequestMessage() *TreasureHuntFlagRemoveRequestMessage {
	return &TreasureHuntFlagRemoveRequestMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntFlagRemoveRequestMessage", id_: 2928}}
}
func (m *TreasureHuntFlagRemoveRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.Index = input.ReadByte()
}

func (m *TreasureHuntFlagRemoveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntFlagRequestAnswerMessage struct {
	MessageBase
	QuestType int8
	Result    int8
	Index     int8
}

func NewTreasureHuntFlagRequestAnswerMessage() *TreasureHuntFlagRequestAnswerMessage {
	return &TreasureHuntFlagRequestAnswerMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntFlagRequestAnswerMessage", id_: 6871}}
}
func (m *TreasureHuntFlagRequestAnswerMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.Result = input.ReadByte()
	m.Index = input.ReadByte()
}

func (m *TreasureHuntFlagRequestAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntFlagRequestMessage struct {
	MessageBase
	QuestType int8
	Index     int8
}

func NewTreasureHuntFlagRequestMessage() *TreasureHuntFlagRequestMessage {
	return &TreasureHuntFlagRequestMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntFlagRequestMessage", id_: 6775}}
}
func (m *TreasureHuntFlagRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.Index = input.ReadByte()
}

func (m *TreasureHuntFlagRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntGiveUpRequestMessage struct {
	MessageBase
	QuestType int8
}

func NewTreasureHuntGiveUpRequestMessage() *TreasureHuntGiveUpRequestMessage {
	return &TreasureHuntGiveUpRequestMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntGiveUpRequestMessage", id_: 143}}
}
func (m *TreasureHuntGiveUpRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
}

func (m *TreasureHuntGiveUpRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntLegendaryRequestMessage struct {
	MessageBase
	LegendaryId int
}

func NewTreasureHuntLegendaryRequestMessage() *TreasureHuntLegendaryRequestMessage {
	return &TreasureHuntLegendaryRequestMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntLegendaryRequestMessage", id_: 7183}}
}
func (m *TreasureHuntLegendaryRequestMessage) Deserialize(input *DataWrapper) {
	m.LegendaryId = input.ReadVarUhShort()
}

func (m *TreasureHuntLegendaryRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntMessage struct {
	MessageBase
	QuestType           int8
	StartMapId          float64
	KnownStepsList      *Vector[TreasureHuntStepI]
	TotalStepCount      int8
	CheckPointCurrent   int
	CheckPointTotal     int
	AvailableRetryCount int32
	Flags               *Vector[TreasureHuntFlag]
}

func NewTreasureHuntMessage() *TreasureHuntMessage {
	return &TreasureHuntMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntMessage", id_: 7235}}
}
func (m *TreasureHuntMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.StartMapId = input.ReadDouble()
	m.KnownStepsList = NewVector[TreasureHuntStepI]()
	knownStepsListLen := int(input.ReadShort())
	for i := 0; i < knownStepsListLen; i++ {
		foundTreasureHuntStep := getDynamicType(input)
		if castedTreasureHuntStep, ok := foundTreasureHuntStep.(TreasureHuntStepI); ok {
			castedTreasureHuntStep.Deserialize(input)
			m.KnownStepsList.Push(&castedTreasureHuntStep)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement TreasureHuntStepI, got: " + fmt.Sprintf("%T", foundTreasureHuntStep))
		}
	}
	m.TotalStepCount = input.ReadByte()
	m.CheckPointCurrent = input.ReadVarUhInt()
	m.CheckPointTotal = input.ReadVarUhInt()
	m.AvailableRetryCount = input.ReadInt()
	m.Flags = NewVector[TreasureHuntFlag]()
	flagsLen := int(input.ReadShort())
	for i := 0; i < flagsLen; i++ {
		TreasureHuntFlag := NewTreasureHuntFlag()
		TreasureHuntFlag.Deserialize(input)
		m.Flags.Push(TreasureHuntFlag)
	}
}

func (m *TreasureHuntMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntRequestAnswerMessage struct {
	MessageBase
	QuestType int8
	Result    int8
}

func NewTreasureHuntRequestAnswerMessage() *TreasureHuntRequestAnswerMessage {
	return &TreasureHuntRequestAnswerMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntRequestAnswerMessage", id_: 7470}}
}
func (m *TreasureHuntRequestAnswerMessage) Deserialize(input *DataWrapper) {
	m.QuestType = input.ReadByte()
	m.Result = input.ReadByte()
}

func (m *TreasureHuntRequestAnswerMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntShowLegendaryUIMessage struct {
	MessageBase
	AvailableLegendaryIds *Vector[int]
}

func NewTreasureHuntShowLegendaryUIMessage() *TreasureHuntShowLegendaryUIMessage {
	return &TreasureHuntShowLegendaryUIMessage{MessageBase: MessageBase{MessageType_: "TreasureHuntShowLegendaryUIMessage", id_: 8368}}
}
func (m *TreasureHuntShowLegendaryUIMessage) Deserialize(input *DataWrapper) {
	m.AvailableLegendaryIds = NewVector[int]()
	availableLegendaryIdsLen := int(input.ReadShort())
	for i := 0; i < availableLegendaryIdsLen; i++ {
		val := input.ReadVarShort()
		m.AvailableLegendaryIds.Push(&val)
	}
}

func (m *TreasureHuntShowLegendaryUIMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepI interface {
	Deserialize(input *DataWrapper)
}

type TreasureHuntStep struct {
	MessageBase
}

func NewTreasureHuntStep() *TreasureHuntStep {
	return &TreasureHuntStep{MessageBase: MessageBase{MessageType_: "TreasureHuntStep", id_: 8185}}
}
func (m *TreasureHuntStep) Deserialize(input *DataWrapper) {
}

func (m *TreasureHuntStep) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepDig struct {
	MessageBase
	TreasureHuntStep
}

func NewTreasureHuntStepDig() *TreasureHuntStepDig {
	return &TreasureHuntStepDig{MessageBase: MessageBase{MessageType_: "TreasureHuntStepDig", id_: 5858}}
}
func (m *TreasureHuntStepDig) Deserialize(input *DataWrapper) {
	m.TreasureHuntStep.Deserialize(input)
}

func (m *TreasureHuntStepDig) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepFight struct {
	MessageBase
	TreasureHuntStep
}

func NewTreasureHuntStepFight() *TreasureHuntStepFight {
	return &TreasureHuntStepFight{MessageBase: MessageBase{MessageType_: "TreasureHuntStepFight", id_: 9719}}
}
func (m *TreasureHuntStepFight) Deserialize(input *DataWrapper) {
	m.TreasureHuntStep.Deserialize(input)
}

func (m *TreasureHuntStepFight) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepFollowDirection struct {
	MessageBase
	TreasureHuntStep
	Direction int8
	MapCount  int
}

func NewTreasureHuntStepFollowDirection() *TreasureHuntStepFollowDirection {
	return &TreasureHuntStepFollowDirection{MessageBase: MessageBase{MessageType_: "TreasureHuntStepFollowDirection", id_: 9008}}
}
func (m *TreasureHuntStepFollowDirection) Deserialize(input *DataWrapper) {
	m.TreasureHuntStep.Deserialize(input)
	m.Direction = input.ReadByte()
	m.MapCount = input.ReadVarUhShort()
}

func (m *TreasureHuntStepFollowDirection) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepFollowDirectionToHint struct {
	MessageBase
	TreasureHuntStep
	Direction int8
	NpcId     int
}

func NewTreasureHuntStepFollowDirectionToHint() *TreasureHuntStepFollowDirectionToHint {
	return &TreasureHuntStepFollowDirectionToHint{MessageBase: MessageBase{MessageType_: "TreasureHuntStepFollowDirectionToHint", id_: 8809}}
}
func (m *TreasureHuntStepFollowDirectionToHint) Deserialize(input *DataWrapper) {
	m.TreasureHuntStep.Deserialize(input)
	m.Direction = input.ReadByte()
	m.NpcId = input.ReadVarUhShort()
}

func (m *TreasureHuntStepFollowDirectionToHint) IsDeserializeFunctionComplete() bool {
	return true
}

type TreasureHuntStepFollowDirectionToPOI struct {
	MessageBase
	TreasureHuntStep
	Direction  int8
	PoiLabelId int
}

func NewTreasureHuntStepFollowDirectionToPOI() *TreasureHuntStepFollowDirectionToPOI {
	return &TreasureHuntStepFollowDirectionToPOI{MessageBase: MessageBase{MessageType_: "TreasureHuntStepFollowDirectionToPOI", id_: 9275}}
}
func (m *TreasureHuntStepFollowDirectionToPOI) Deserialize(input *DataWrapper) {
	m.TreasureHuntStep.Deserialize(input)
	m.Direction = input.ReadByte()
	m.PoiLabelId = input.ReadVarUhShort()
}

func (m *TreasureHuntStepFollowDirectionToPOI) IsDeserializeFunctionComplete() bool {
	return true
}

type TrustCertificate struct {
	MessageBase
	Id   int32
	Hash string
}

func NewTrustCertificate() *TrustCertificate {
	return &TrustCertificate{MessageBase: MessageBase{MessageType_: "TrustCertificate", id_: 3311}}
}
func (m *TrustCertificate) Deserialize(input *DataWrapper) {
	m.Id = input.ReadInt()
	m.Hash = input.ReadUTF()
}

func (m *TrustCertificate) IsDeserializeFunctionComplete() bool {
	return true
}

type TrustStatusMessage struct {
	MessageBase
	Certified bool
}

func NewTrustStatusMessage() *TrustStatusMessage {
	return &TrustStatusMessage{MessageBase: MessageBase{MessageType_: "TrustStatusMessage", id_: 3339}}
}
func (m *TrustStatusMessage) Deserialize(input *DataWrapper) {
	m.Certified = input.ReadBoolean()
}

func (m *TrustStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UnfollowQuestObjectiveRequestMessage struct {
	MessageBase
	QuestId     int
	ObjectiveId int16
}

func NewUnfollowQuestObjectiveRequestMessage() *UnfollowQuestObjectiveRequestMessage {
	return &UnfollowQuestObjectiveRequestMessage{MessageBase: MessageBase{MessageType_: "UnfollowQuestObjectiveRequestMessage", id_: 2136}}
}
func (m *UnfollowQuestObjectiveRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestId = input.ReadVarUhShort()
	m.ObjectiveId = input.ReadShort()
}

func (m *UnfollowQuestObjectiveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateAllGuildRankRequestMessage struct {
	MessageBase
	Ranks *Vector[RankInformation]
}

func NewUpdateAllGuildRankRequestMessage() *UpdateAllGuildRankRequestMessage {
	return &UpdateAllGuildRankRequestMessage{MessageBase: MessageBase{MessageType_: "UpdateAllGuildRankRequestMessage", id_: 1965}}
}
func (m *UpdateAllGuildRankRequestMessage) Deserialize(input *DataWrapper) {
	m.Ranks = NewVector[RankInformation]()
	ranksLen := int(input.ReadShort())
	for i := 0; i < ranksLen; i++ {
		RankInformation := NewRankInformation()
		RankInformation.Deserialize(input)
		m.Ranks.Push(RankInformation)
	}
}

func (m *UpdateAllGuildRankRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateGuildRankRequestMessage struct {
	MessageBase
	Rank *RankInformation
}

func NewUpdateGuildRankRequestMessage() *UpdateGuildRankRequestMessage {
	return &UpdateGuildRankRequestMessage{MessageBase: MessageBase{MessageType_: "UpdateGuildRankRequestMessage", id_: 9846}}
}
func (m *UpdateGuildRankRequestMessage) Deserialize(input *DataWrapper) {
	m.Rank = NewRankInformation()
	m.Rank.Deserialize(input)
}

func (m *UpdateGuildRankRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateGuildRightsMessage struct {
	MessageBase
	RankId int
	Rights *Vector[int]
}

func NewUpdateGuildRightsMessage() *UpdateGuildRightsMessage {
	return &UpdateGuildRightsMessage{MessageBase: MessageBase{MessageType_: "UpdateGuildRightsMessage", id_: 3888}}
}
func (m *UpdateGuildRightsMessage) Deserialize(input *DataWrapper) {
	m.RankId = input.ReadVarUhInt()
	m.Rights = NewVector[int]()
	rightsLen := int(input.ReadShort())
	for i := 0; i < rightsLen; i++ {
		val := input.ReadVarInt()
		m.Rights.Push(&val)
	}
}

func (m *UpdateGuildRightsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateLifePointsMessage struct {
	MessageBase
	LifePoints    int
	MaxLifePoints int
}

func NewUpdateLifePointsMessage() *UpdateLifePointsMessage {
	return &UpdateLifePointsMessage{MessageBase: MessageBase{MessageType_: "UpdateLifePointsMessage", id_: 1395}}
}
func (m *UpdateLifePointsMessage) Deserialize(input *DataWrapper) {
	m.LifePoints = input.ReadVarUhInt()
	m.MaxLifePoints = input.ReadVarUhInt()
}

func (m *UpdateLifePointsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateMapPlayersAgressableStatusMessage struct {
	MessageBase
	PlayerAvAMessages *Vector[AgressableStatusMessage]
}

func NewUpdateMapPlayersAgressableStatusMessage() *UpdateMapPlayersAgressableStatusMessage {
	return &UpdateMapPlayersAgressableStatusMessage{MessageBase: MessageBase{MessageType_: "UpdateMapPlayersAgressableStatusMessage", id_: 1751}}
}
func (m *UpdateMapPlayersAgressableStatusMessage) Deserialize(input *DataWrapper) {
	m.PlayerAvAMessages = NewVector[AgressableStatusMessage]()
	playerAvAMessagesLen := int(input.ReadShort())
	for i := 0; i < playerAvAMessagesLen; i++ {
		AgressableStatusMessage := NewAgressableStatusMessage()
		AgressableStatusMessage.Deserialize(input)
		m.PlayerAvAMessages.Push(AgressableStatusMessage)
	}
}

func (m *UpdateMapPlayersAgressableStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateMountBooleanCharacteristic struct {
	MessageBase
	UpdateMountCharacteristic
	Value bool
}

func NewUpdateMountBooleanCharacteristic() *UpdateMountBooleanCharacteristic {
	return &UpdateMountBooleanCharacteristic{MessageBase: MessageBase{MessageType_: "UpdateMountBooleanCharacteristic", id_: 2137}}
}
func (m *UpdateMountBooleanCharacteristic) Deserialize(input *DataWrapper) {
	m.UpdateMountCharacteristic.Deserialize(input)
	m.Value = input.ReadBoolean()
}

func (m *UpdateMountBooleanCharacteristic) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateMountCharacteristicI interface {
	Deserialize(input *DataWrapper)
}

type UpdateMountCharacteristic struct {
	MessageBase
	Type int8
}

func NewUpdateMountCharacteristic() *UpdateMountCharacteristic {
	return &UpdateMountCharacteristic{MessageBase: MessageBase{MessageType_: "UpdateMountCharacteristic", id_: 470}}
}
func (m *UpdateMountCharacteristic) Deserialize(input *DataWrapper) {
	m.Type = input.ReadByte()
}

func (m *UpdateMountCharacteristic) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateMountCharacteristicsMessage struct {
	MessageBase
	RideId            int
	BoostToUpdateList *Vector[UpdateMountCharacteristicI]
}

func NewUpdateMountCharacteristicsMessage() *UpdateMountCharacteristicsMessage {
	return &UpdateMountCharacteristicsMessage{MessageBase: MessageBase{MessageType_: "UpdateMountCharacteristicsMessage", id_: 1346}}
}
func (m *UpdateMountCharacteristicsMessage) Deserialize(input *DataWrapper) {
	m.RideId = input.ReadVarInt()
	m.BoostToUpdateList = NewVector[UpdateMountCharacteristicI]()
	boostToUpdateListLen := int(input.ReadShort())
	for i := 0; i < boostToUpdateListLen; i++ {
		foundUpdateMountCharacteristic := getDynamicType(input)
		if castedUpdateMountCharacteristic, ok := foundUpdateMountCharacteristic.(UpdateMountCharacteristicI); ok {
			castedUpdateMountCharacteristic.Deserialize(input)
			m.BoostToUpdateList.Push(&castedUpdateMountCharacteristic)
		} else {
			// Handle the case where the assertion fails, if necessary
			panic("getDynamicType returned a type that does not implement UpdateMountCharacteristicI, got: " + fmt.Sprintf("%T", foundUpdateMountCharacteristic))
		}
	}
}

func (m *UpdateMountCharacteristicsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateMountIntegerCharacteristic struct {
	MessageBase
	UpdateMountCharacteristic
	Value int32
}

func NewUpdateMountIntegerCharacteristic() *UpdateMountIntegerCharacteristic {
	return &UpdateMountIntegerCharacteristic{MessageBase: MessageBase{MessageType_: "UpdateMountIntegerCharacteristic", id_: 5600}}
}
func (m *UpdateMountIntegerCharacteristic) Deserialize(input *DataWrapper) {
	m.UpdateMountCharacteristic.Deserialize(input)
	m.Value = input.ReadInt()
}

func (m *UpdateMountIntegerCharacteristic) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateRecruitmentInformationMessage struct {
	MessageBase
	RecruitmentData *GuildRecruitmentInformation
}

func NewUpdateRecruitmentInformationMessage() *UpdateRecruitmentInformationMessage {
	return &UpdateRecruitmentInformationMessage{MessageBase: MessageBase{MessageType_: "UpdateRecruitmentInformationMessage", id_: 691}}
}
func (m *UpdateRecruitmentInformationMessage) Deserialize(input *DataWrapper) {
	m.RecruitmentData = NewGuildRecruitmentInformation()
	m.RecruitmentData.Deserialize(input)
}

func (m *UpdateRecruitmentInformationMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdateSelfAgressableStatusMessage struct {
	MessageBase
	Status        int8
	ProbationTime float64
	RoleAvAId     int32
	PictoScore    int32
}

func NewUpdateSelfAgressableStatusMessage() *UpdateSelfAgressableStatusMessage {
	return &UpdateSelfAgressableStatusMessage{MessageBase: MessageBase{MessageType_: "UpdateSelfAgressableStatusMessage", id_: 5808}}
}
func (m *UpdateSelfAgressableStatusMessage) Deserialize(input *DataWrapper) {
	m.Status = input.ReadByte()
	m.ProbationTime = input.ReadDouble()
	m.RoleAvAId = input.ReadInt()
	m.PictoScore = input.ReadInt()
}

func (m *UpdateSelfAgressableStatusMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type UpdatedStorageTabInformation struct {
	MessageBase
	Name               string
	TabNumber          int
	Picto              int
	DropTypeLimitation *Vector[int]
}

func NewUpdatedStorageTabInformation() *UpdatedStorageTabInformation {
	return &UpdatedStorageTabInformation{MessageBase: MessageBase{MessageType_: "UpdatedStorageTabInformation", id_: 570}}
}
func (m *UpdatedStorageTabInformation) Deserialize(input *DataWrapper) {
	m.Name = input.ReadUTF()
	m.TabNumber = input.ReadVarUhInt()
	m.Picto = input.ReadVarUhInt()
	m.DropTypeLimitation = NewVector[int]()
	dropTypeLimitationLen := int(input.ReadShort())
	for i := 0; i < dropTypeLimitationLen; i++ {
		val := input.ReadVarInt()
		m.DropTypeLimitation.Push(&val)
	}
}

func (m *UpdatedStorageTabInformation) IsDeserializeFunctionComplete() bool {
	return true
}

type Uuid struct {
	MessageBase
	UuidString string
}

func NewUuid() *Uuid {
	return &Uuid{MessageBase: MessageBase{MessageType_: "Uuid", id_: 8662}}
}
func (m *Uuid) Deserialize(input *DataWrapper) {
	m.UuidString = input.ReadUTF()
}

func (m *Uuid) IsDeserializeFunctionComplete() bool {
	return true
}

type Version struct {
	MessageBase
	Major     int8
	Minor     int8
	Code      int8
	Build     int32
	BuildType int8
}

func NewVersion() *Version {
	return &Version{MessageBase: MessageBase{MessageType_: "Version", id_: 580}}
}
func (m *Version) Deserialize(input *DataWrapper) {
	m.Major = input.ReadByte()
	m.Minor = input.ReadByte()
	m.Code = input.ReadByte()
	m.Build = input.ReadInt()
	m.BuildType = input.ReadByte()
}

func (m *Version) IsDeserializeFunctionComplete() bool {
	return true
}

type WarnOnPermaDeathMessage struct {
	MessageBase
	Enable bool
}

func NewWarnOnPermaDeathMessage() *WarnOnPermaDeathMessage {
	return &WarnOnPermaDeathMessage{MessageBase: MessageBase{MessageType_: "WarnOnPermaDeathMessage", id_: 4732}}
}
func (m *WarnOnPermaDeathMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *WarnOnPermaDeathMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WarnOnPermaDeathStateMessage struct {
	MessageBase
	Enable bool
}

func NewWarnOnPermaDeathStateMessage() *WarnOnPermaDeathStateMessage {
	return &WarnOnPermaDeathStateMessage{MessageBase: MessageBase{MessageType_: "WarnOnPermaDeathStateMessage", id_: 5243}}
}
func (m *WarnOnPermaDeathStateMessage) Deserialize(input *DataWrapper) {
	m.Enable = input.ReadBoolean()
}

func (m *WarnOnPermaDeathStateMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WatchInventoryContentMessage struct {
	MessageBase
	InventoryContentMessage
}

func NewWatchInventoryContentMessage() *WatchInventoryContentMessage {
	return &WatchInventoryContentMessage{MessageBase: MessageBase{MessageType_: "WatchInventoryContentMessage", id_: 8887}}
}
func (m *WatchInventoryContentMessage) Deserialize(input *DataWrapper) {
	m.InventoryContentMessage.Deserialize(input)
}

func (m *WatchInventoryContentMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WatchQuestListMessage struct {
	MessageBase
	QuestListMessage
	PlayerId int64
}

func NewWatchQuestListMessage() *WatchQuestListMessage {
	return &WatchQuestListMessage{MessageBase: MessageBase{MessageType_: "WatchQuestListMessage", id_: 5644}}
}
func (m *WatchQuestListMessage) Deserialize(input *DataWrapper) {
	m.QuestListMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *WatchQuestListMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WatchQuestStepInfoMessage struct {
	MessageBase
	QuestStepInfoMessage
	PlayerId int64
}

func NewWatchQuestStepInfoMessage() *WatchQuestStepInfoMessage {
	return &WatchQuestStepInfoMessage{MessageBase: MessageBase{MessageType_: "WatchQuestStepInfoMessage", id_: 141}}
}
func (m *WatchQuestStepInfoMessage) Deserialize(input *DataWrapper) {
	m.QuestStepInfoMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *WatchQuestStepInfoMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WatchQuestStepInfoRequestMessage struct {
	MessageBase
	QuestStepInfoRequestMessage
	PlayerId int64
}

func NewWatchQuestStepInfoRequestMessage() *WatchQuestStepInfoRequestMessage {
	return &WatchQuestStepInfoRequestMessage{MessageBase: MessageBase{MessageType_: "WatchQuestStepInfoRequestMessage", id_: 4330}}
}
func (m *WatchQuestStepInfoRequestMessage) Deserialize(input *DataWrapper) {
	m.QuestStepInfoRequestMessage.Deserialize(input)
	m.PlayerId = input.ReadVarUhLong()
}

func (m *WatchQuestStepInfoRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WrapperObjectAssociatedMessage struct {
	MessageBase
	SymbioticObjectAssociatedMessage
}

func NewWrapperObjectAssociatedMessage() *WrapperObjectAssociatedMessage {
	return &WrapperObjectAssociatedMessage{MessageBase: MessageBase{MessageType_: "WrapperObjectAssociatedMessage", id_: 3871}}
}
func (m *WrapperObjectAssociatedMessage) Deserialize(input *DataWrapper) {
	m.SymbioticObjectAssociatedMessage.Deserialize(input)
}

func (m *WrapperObjectAssociatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WrapperObjectDissociateRequestMessage struct {
	MessageBase
	HostUID int
	HostPos uint8
}

func NewWrapperObjectDissociateRequestMessage() *WrapperObjectDissociateRequestMessage {
	return &WrapperObjectDissociateRequestMessage{MessageBase: MessageBase{MessageType_: "WrapperObjectDissociateRequestMessage", id_: 5244}}
}
func (m *WrapperObjectDissociateRequestMessage) Deserialize(input *DataWrapper) {
	m.HostUID = input.ReadVarUhInt()
	m.HostPos = input.ReadUnsignedByte()
}

func (m *WrapperObjectDissociateRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type WrapperObjectErrorMessage struct {
	MessageBase
	SymbioticObjectErrorMessage
}

func NewWrapperObjectErrorMessage() *WrapperObjectErrorMessage {
	return &WrapperObjectErrorMessage{MessageBase: MessageBase{MessageType_: "WrapperObjectErrorMessage", id_: 5215}}
}
func (m *WrapperObjectErrorMessage) Deserialize(input *DataWrapper) {
	m.SymbioticObjectErrorMessage.Deserialize(input)
}

func (m *WrapperObjectErrorMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ZaapDestinationsMessage struct {
	MessageBase
	TeleportDestinationsMessage
	SpawnMapId float64
}

func NewZaapDestinationsMessage() *ZaapDestinationsMessage {
	return &ZaapDestinationsMessage{MessageBase: MessageBase{MessageType_: "ZaapDestinationsMessage", id_: 9132}}
}
func (m *ZaapDestinationsMessage) Deserialize(input *DataWrapper) {
	m.TeleportDestinationsMessage.Deserialize(input)
	m.SpawnMapId = input.ReadDouble()
}

func (m *ZaapDestinationsMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ZaapRespawnSaveRequestMessage struct {
	MessageBase
}

func NewZaapRespawnSaveRequestMessage() *ZaapRespawnSaveRequestMessage {
	return &ZaapRespawnSaveRequestMessage{MessageBase: MessageBase{MessageType_: "ZaapRespawnSaveRequestMessage", id_: 3373}}
}
func (m *ZaapRespawnSaveRequestMessage) Deserialize(input *DataWrapper) {
}

func (m *ZaapRespawnSaveRequestMessage) IsDeserializeFunctionComplete() bool {
	return true
}

type ZaapRespawnUpdatedMessage struct {
	MessageBase
	MapId float64
}

func NewZaapRespawnUpdatedMessage() *ZaapRespawnUpdatedMessage {
	return &ZaapRespawnUpdatedMessage{MessageBase: MessageBase{MessageType_: "ZaapRespawnUpdatedMessage", id_: 9315}}
}
func (m *ZaapRespawnUpdatedMessage) Deserialize(input *DataWrapper) {
	m.MapId = input.ReadDouble()
}

func (m *ZaapRespawnUpdatedMessage) IsDeserializeFunctionComplete() bool {
	return true
}

func getNetworkMessageById(id int) NetworkMessage {
	switch id {
	case 5172:
		return NewAbstractGameActionFightTargetedAbilityMessage()
	case 9631:
		return NewAbstractGameActionMessage()
	case 1587:
		return NewAbstractGameActionWithAckMessage()
	case 5451:
		return NewAbstractPartyEventMessage()
	case 6938:
		return NewAbstractPartyMemberInFightMessage()
	case 2039:
		return NewAbstractPartyMessage()
	case 9621:
		return NewAccessoryPreviewErrorMessage()
	case 1503:
		return NewAccessoryPreviewMessage()
	case 375:
		return NewAccessoryPreviewRequestMessage()
	case 8908:
		return NewAccountCapabilitiesMessage()
	case 7345:
		return NewAccountHouseMessage()
	case 4545:
		return NewAccountInformationsUpdateMessage()
	case 590:
		return NewAccountLinkRequiredMessage()
	case 2295:
		return NewAccountLoggingKickedMessage()
	case 5336:
		return NewAccountSubscriptionElapsedDurationMessage()
	case 1205:
		return NewAchievementAlmostFinishedDetailedListMessage()
	case 9909:
		return NewAchievementAlmostFinishedDetailedListRequestMessage()
	case 2020:
		return NewAchievementDetailedListMessage()
	case 7960:
		return NewAchievementDetailedListRequestMessage()
	case 2058:
		return NewAchievementDetailsMessage()
	case 7495:
		return NewAchievementDetailsRequestMessage()
	case 1898:
		return NewAchievementFinishedInformationMessage()
	case 1474:
		return NewAchievementFinishedMessage()
	case 9652:
		return NewAchievementListMessage()
	case 3079:
		return NewAchievementRewardErrorMessage()
	case 1789:
		return NewAchievementRewardRequestMessage()
	case 1060:
		return NewAchievementRewardSuccessMessage()
	case 3443:
		return NewAchievementsPioneerRanksMessage()
	case 518:
		return NewAchievementsPioneerRanksRequestMessage()
	case 2270:
		return NewAcquaintanceAddedMessage()
	case 2291:
		return NewAcquaintanceSearchErrorMessage()
	case 1642:
		return NewAcquaintanceSearchMessage()
	case 8632:
		return NewAcquaintanceServerListMessage()
	case 4481:
		return NewAcquaintancesGetListMessage()
	case 5647:
		return NewAcquaintancesListMessage()
	case 5903:
		return NewActivityHideRequestMessage()
	case 5738:
		return NewActivityLockRequestMessage()
	case 5717:
		return NewActivitySuggestionsMessage()
	case 5447:
		return NewActivitySuggestionsRequestMessage()
	case 1826:
		return NewAddListenerOnSynchronizedStorageMessage()
	case 8298:
		return NewAddTaxCollectorOrderedSpellMessage()
	case 6564:
		return NewAddTaxCollectorPresetSpellMessage()
	case 9773:
		return NewAdminCommandMessage()
	case 8282:
		return NewAdminQuietCommandMessage()
	case 5019:
		return NewAlignmentRankUpdateMessage()
	case 7642:
		return NewAlignmentWarEffortDonatePreviewMessage()
	case 5431:
		return NewAlignmentWarEffortDonateRequestMessage()
	case 1517:
		return NewAlignmentWarEffortDonationResultMessage()
	case 2045:
		return NewAlignmentWarEffortProgressionMessage()
	case 4321:
		return NewAlignmentWarEffortProgressionRequestMessage()
	case 1620:
		return NewAllianceAllRanksUpdateRequestMessage()
	case 9692:
		return NewAllianceApplicationAnswerMessage()
	case 8801:
		return NewAllianceApplicationDeletedMessage()
	case 4844:
		return NewAllianceApplicationIsAnsweredMessage()
	case 8909:
		return NewAllianceApplicationListenMessage()
	case 8886:
		return NewAllianceApplicationPresenceMessage()
	case 1686:
		return NewAllianceApplicationReceivedMessage()
	case 8751:
		return NewAllianceBulletinMessage()
	case 8685:
		return NewAllianceBulletinSetErrorMessage()
	case 5995:
		return NewAllianceBulletinSetRequestMessage()
	case 1892:
		return NewAllianceChangeMemberRankMessage()
	case 7302:
		return NewAllianceCreationResultMessage()
	case 6534:
		return NewAllianceCreationStartedMessage()
	case 5413:
		return NewAllianceCreationValidMessage()
	case 6027:
		return NewAllianceDeleteApplicationRequestMessage()
	case 4210:
		return NewAllianceFactsErrorMessage()
	case 9269:
		return NewAllianceFactsMessage()
	case 593:
		return NewAllianceFactsRequestMessage()
	case 5310:
		return NewAllianceFightFighterAddedMessage()
	case 944:
		return NewAllianceFightFighterRemovedMessage()
	case 1947:
		return NewAllianceFightFinishedMessage()
	case 5386:
		return NewAllianceFightInfoMessage()
	case 1193:
		return NewAllianceFightPhaseUpdateMessage()
	case 9676:
		return NewAllianceFightStartedMessage()
	case 3631:
		return NewAllianceGetPlayerApplicationMessage()
	case 1212:
		return NewAllianceGetRecruitmentInformationMessage()
	case 4562:
		return NewAllianceInsiderInfoMessage()
	case 2763:
		return NewAllianceInsiderInfoRequestMessage()
	case 3558:
		return NewAllianceInvitationAnswerMessage()
	case 5856:
		return NewAllianceInvitationMessage()
	case 7264:
		return NewAllianceInvitationStateRecrutedMessage()
	case 6551:
		return NewAllianceInvitationStateRecruterMessage()
	case 9032:
		return NewAllianceInvitedMessage()
	case 8505:
		return NewAllianceIsThereAnyApplicationMessage()
	case 468:
		return NewAllianceJoinAutomaticallyRequestMessage()
	case 5220:
		return NewAllianceJoinedMessage()
	case 4578:
		return NewAllianceKickRequestMessage()
	case 6490:
		return NewAllianceLeftMessage()
	case 3610:
		return NewAllianceListApplicationAnswerMessage()
	case 3470:
		return NewAllianceListApplicationModifiedMessage()
	case 7241:
		return NewAllianceListApplicationRequestMessage()
	case 9553:
		return NewAllianceListMessage()
	case 3877:
		return NewAllianceMemberInformationUpdateMessage()
	case 626:
		return NewAllianceMemberLeavingMessage()
	case 5529:
		return NewAllianceMemberOnlineStatusMessage()
	case 3707:
		return NewAllianceMemberStartWarningOnConnectionMessage()
	case 1134:
		return NewAllianceMemberStopWarningOnConnectionMessage()
	case 3547:
		return NewAllianceMembershipMessage()
	case 5179:
		return NewAllianceModificationEmblemValidMessage()
	case 6811:
		return NewAllianceModificationNameAndTagValidMessage()
	case 3693:
		return NewAllianceModificationResultMessage()
	case 2149:
		return NewAllianceModificationStartedMessage()
	case 4239:
		return NewAllianceModificationValidMessage()
	case 4661:
		return NewAllianceMotdMessage()
	case 6006:
		return NewAllianceMotdSetErrorMessage()
	case 1488:
		return NewAllianceMotdSetRequestMessage()
	case 4178:
		return NewAlliancePartialListMessage()
	case 4969:
		return NewAlliancePlayerApplicationAbstractMessage()
	case 9706:
		return NewAlliancePlayerApplicationInformationMessage()
	case 7142:
		return NewAlliancePlayerNoApplicationInformationMessage()
	case 3125:
		return NewAlliancePrismDialogQuestionMessage()
	case 9486:
		return NewAllianceRankCreateRequestMessage()
	case 3428:
		return NewAllianceRankRemoveRequestMessage()
	case 64:
		return NewAllianceRankUpdateRequestMessage()
	case 4427:
		return NewAllianceRanksMessage()
	case 7629:
		return NewAllianceRanksRequestMessage()
	case 977:
		return NewAllianceRecruitmentInformationMessage()
	case 523:
		return NewAllianceRecruitmentInvalidateMessage()
	case 5154:
		return NewAllianceRightsUpdateMessage()
	case 5885:
		return NewAllianceSubmitApplicationMessage()
	case 2436:
		return NewAllianceSummaryMessage()
	case 4007:
		return NewAllianceSummaryRequestMessage()
	case 8299:
		return NewAllianceUpdateApplicationMessage()
	case 5387:
		return NewAllianceUpdateRecruitmentInformationMessage()
	case 3938:
		return NewAlmanachCalendarDateMessage()
	case 3137:
		return NewAlreadyConnectedMessage()
	case 8844:
		return NewAlterationAddedMessage()
	case 9284:
		return NewAlterationRemovedMessage()
	case 7721:
		return NewAlterationsMessage()
	case 563:
		return NewAlterationsUpdatedMessage()
	case 1124:
		return NewAnomalyOpenedMessage()
	case 9316:
		return NewAnomalyStateMessage()
	case 7452:
		return NewAnomalySubareaInformationRequestMessage()
	case 9235:
		return NewAnomalySubareaInformationResponseMessage()
	case 1373:
		return NewApplySpellModifierMessage()
	case 9461:
		return NewAreaFightModificatorUpdateMessage()
	case 2033:
		return NewArenaFightAnswerAcknowledgementMessage()
	case 1701:
		return NewArenaFighterIdleMessage()
	case 3724:
		return NewArenaFighterLeaveMessage()
	case 5424:
		return NewAtlasPointInformationsMessage()
	case 7505:
		return NewAuthenticationTicketAcceptedMessage()
	case 6808:
		return NewAuthenticationTicketMessage()
	case 5922:
		return NewAuthenticationTicketRefusedMessage()
	case 9375:
		return NewBasicAckMessage()
	case 7499:
		return NewBasicDateMessage()
	case 7194:
		return NewBasicLatencyStatsMessage()
	case 6273:
		return NewBasicLatencyStatsRequestMessage()
	case 2887:
		return NewBasicNoOperationMessage()
	case 7461:
		return NewBasicPingMessage()
	case 4877:
		return NewBasicPongMessage()
	case 2233:
		return NewBasicStatMessage()
	case 6918:
		return NewBasicStatWithDataMessage()
	case 4945:
		return NewBasicTimeMessage()
	case 390:
		return NewBasicWhoAmIRequestMessage()
	case 8673:
		return NewBasicWhoIsMessage()
	case 4629:
		return NewBasicWhoIsNoMatchMessage()
	case 6759:
		return NewBasicWhoIsRequestMessage()
	case 427:
		return NewBreachBonusMessage()
	case 1486:
		return NewBreachBranchesMessage()
	case 9989:
		return NewBreachBudgetMessage()
	case 6556:
		return NewBreachCharactersMessage()
	case 9138:
		return NewBreachEnterMessage()
	case 6366:
		return NewBreachExitRequestMessage()
	case 6746:
		return NewBreachExitResponseMessage()
	case 9314:
		return NewBreachGameFightEndMessage()
	case 2262:
		return NewBreachInvitationAnswerMessage()
	case 6049:
		return NewBreachInvitationCloseMessage()
	case 5842:
		return NewBreachInvitationOfferMessage()
	case 4414:
		return NewBreachInvitationRequestMessage()
	case 9260:
		return NewBreachInvitationResponseMessage()
	case 4588:
		return NewBreachKickRequestMessage()
	case 5018:
		return NewBreachKickResponseMessage()
	case 560:
		return NewBreachRewardBoughtMessage()
	case 3872:
		return NewBreachRewardBuyMessage()
	case 1741:
		return NewBreachRewardsMessage()
	case 8241:
		return NewBreachRoomLockedMessage()
	case 5483:
		return NewBreachRoomUnlockRequestMessage()
	case 7028:
		return NewBreachRoomUnlockResultMessage()
	case 21:
		return NewBreachSavedMessage()
	case 8989:
		return NewBreachStateMessage()
	case 2317:
		return NewBreachTeleportRequestMessage()
	case 1178:
		return NewBreachTeleportResponseMessage()
	case 4597:
		return NewBulletinMessage()
	case 8563:
		return NewChallengeAddMessage()
	case 2271:
		return NewChallengeBonusChoiceMessage()
	case 4926:
		return NewChallengeBonusChoiceSelectedMessage()
	case 2072:
		return NewChallengeFightJoinRefusedMessage()
	case 4436:
		return NewChallengeListMessage()
	case 4455:
		return NewChallengeModSelectMessage()
	case 4667:
		return NewChallengeModSelectedMessage()
	case 2779:
		return NewChallengeNumberMessage()
	case 8830:
		return NewChallengeProposalMessage()
	case 9700:
		return NewChallengeReadyMessage()
	case 5894:
		return NewChallengeResultMessage()
	case 8045:
		return NewChallengeSelectedMessage()
	case 5920:
		return NewChallengeSelectionMessage()
	case 9097:
		return NewChallengeTargetsMessage()
	case 2450:
		return NewChallengeTargetsRequestMessage()
	case 8427:
		return NewChallengeValidateMessage()
	case 980:
		return NewChangeHavenBagRoomRequestMessage()
	case 5242:
		return NewChangeMapMessage()
	case 4899:
		return NewChangeThemeRequestMessage()
	case 7739:
		return NewChannelEnablingChangeMessage()
	case 4965:
		return NewChannelEnablingMessage()
	case 2916:
		return NewCharacterAlignmentWarEffortProgressionMessage()
	case 946:
		return NewCharacterAlignmentWarEffortProgressionRequestMessage()
	case 4275:
		return NewCharacterCanBeCreatedRequestMessage()
	case 7317:
		return NewCharacterCanBeCreatedResultMessage()
	case 3451:
		return NewCharacterCapabilitiesMessage()
	case 491:
		return NewCharacterCreationRequestMessage()
	case 5979:
		return NewCharacterCreationResultMessage()
	case 4351:
		return NewCharacterDeletionErrorMessage()
	case 5348:
		return NewCharacterDeletionPrepareMessage()
	case 3535:
		return NewCharacterDeletionPrepareRequestMessage()
	case 1489:
		return NewCharacterDeletionRequestMessage()
	case 9701:
		return NewCharacterExperienceGainMessage()
	case 7638:
		return NewCharacterFirstSelectionMessage()
	case 3031:
		return NewCharacterLevelUpInformationMessage()
	case 5797:
		return NewCharacterLevelUpMessage()
	case 605:
		return NewCharacterLoadingCompleteMessage()
	case 5371:
		return NewCharacterNameSuggestionFailureMessage()
	case 2000:
		return NewCharacterNameSuggestionRequestMessage()
	case 2208:
		return NewCharacterNameSuggestionSuccessMessage()
	case 8786:
		return NewCharacterReplayRequestMessage()
	case 338:
		return NewCharacterReplayWithRemodelRequestMessage()
	case 1596:
		return NewCharacterSelectedErrorMessage()
	case 4050:
		return NewCharacterSelectedForceMessage()
	case 4057:
		return NewCharacterSelectedForceReadyMessage()
	case 4299:
		return NewCharacterSelectedSuccessMessage()
	case 6792:
		return NewCharacterSelectionMessage()
	case 3540:
		return NewCharacterSelectionWithRemodelMessage()
	case 4395:
		return NewCharacterStatsListMessage()
	case 7643:
		return NewCharactersListErrorMessage()
	case 8016:
		return NewCharactersListMessage()
	case 2412:
		return NewCharactersListRequestMessage()
	case 9633:
		return NewCharactersListWithRemodelingMessage()
	case 6914:
		return NewChatAbstractClientMessage()
	case 1770:
		return NewChatAbstractServerMessage()
	case 2080:
		return NewChatAdminServerMessage()
	case 3932:
		return NewChatClientMultiMessage()
	case 5473:
		return NewChatClientMultiWithObjectMessage()
	case 7053:
		return NewChatClientPrivateMessage()
	case 9502:
		return NewChatClientPrivateWithObjectMessage()
	case 5839:
		return NewChatCommunityChannelCommunityMessage()
	case 2893:
		return NewChatCommunityChannelSetCommunityRequestMessage()
	case 6135:
		return NewChatErrorMessage()
	case 942:
		return NewChatKolizeumServerMessage()
	case 8617:
		return NewChatServerCopyMessage()
	case 8059:
		return NewChatServerCopyWithObjectMessage()
	case 6772:
		return NewChatServerMessage()
	case 399:
		return NewChatServerWithObjectMessage()
	case 3973:
		return NewChatSmileyExtraPackListMessage()
	case 7020:
		return NewChatSmileyMessage()
	case 9020:
		return NewChatSmileyRequestMessage()
	case 5396:
		return NewCheckFileMessage()
	case 5970:
		return NewCheckFileRequestMessage()
	case 7220:
		return NewCheckIntegrityMessage()
	case 991:
		return NewCinematicMessage()
	case 7975:
		return NewClientKeyMessage()
	case 2467:
		return NewClientUIOpenedByObjectMessage()
	case 1039:
		return NewClientUIOpenedMessage()
	case 3498:
		return NewClientYouAreDrunkMessage()
	case 6165:
		return NewCloseHavenBagFurnitureSequenceRequestMessage()
	case 5999:
		return NewCompassResetMessage()
	case 872:
		return NewCompassUpdateMessage()
	case 9981:
		return NewCompassUpdatePartyMemberMessage()
	case 4778:
		return NewCompassUpdatePvpSeekMessage()
	case 1625:
		return NewConfirmationOfListeningTaxCollectorUpdatesMessage()
	case 869:
		return NewConsoleCommandsListMessage()
	case 9802:
		return NewConsoleEndMessage()
	case 7923:
		return NewConsoleMessage()
	case 3120:
		return NewConsumeAllGameActionItemMessage()
	case 2113:
		return NewConsumeGameActionItemMessage()
	case 2506:
		return NewContactAddFailureMessage()
	case 6346:
		return NewContactLookErrorMessage()
	case 4925:
		return NewContactLookMessage()
	case 6048:
		return NewContactLookRequestByIdMessage()
	case 2776:
		return NewContactLookRequestByNameMessage()
	case 7562:
		return NewContactLookRequestMessage()
	case 1740:
		return NewCreateGuildRankRequestMessage()
	case 7628:
		return NewCredentialsAcknowledgementMessage()
	case 5476:
		return NewCurrentMapInstanceMessage()
	case 7991:
		return NewCurrentMapMessage()
	case 9599:
		return NewCurrentServerStatusUpdateMessage()
	case 7828:
		return NewDebtsDeleteMessage()
	case 8856:
		return NewDebtsUpdateMessage()
	case 3737:
		return NewDebugClearHighlightCellsMessage()
	case 9357:
		return NewDebugHighlightCellsMessage()
	case 6256:
		return NewDebugInClientMessage()
	case 3985:
		return NewDecraftResultMessage()
	case 8901:
		return NewDiceRollRequestMessage()
	case 4632:
		return NewDisplayNumericalValuePaddockMessage()
	case 9246:
		return NewDocumentReadingBeginMessage()
	case 2370:
		return NewDumpedEntityStatsMessage()
	case 6819:
		return NewDungeonKeyRingMessage()
	case 6518:
		return NewDungeonKeyRingUpdateMessage()
	case 8056:
		return NewDungeonPartyFinderAvailableDungeonsMessage()
	case 9426:
		return NewDungeonPartyFinderAvailableDungeonsRequestMessage()
	case 6905:
		return NewDungeonPartyFinderListenErrorMessage()
	case 9359:
		return NewDungeonPartyFinderListenRequestMessage()
	case 3226:
		return NewDungeonPartyFinderRegisterErrorMessage()
	case 7102:
		return NewDungeonPartyFinderRegisterRequestMessage()
	case 9509:
		return NewDungeonPartyFinderRegisterSuccessMessage()
	case 9524:
		return NewDungeonPartyFinderRoomContentMessage()
	case 5056:
		return NewDungeonPartyFinderRoomContentUpdateMessage()
	case 8480:
		return NewEditHavenBagCancelRequestMessage()
	case 2362:
		return NewEditHavenBagFinishedMessage()
	case 6707:
		return NewEditHavenBagRequestMessage()
	case 9417:
		return NewEditHavenBagStartMessage()
	case 2112:
		return NewEmoteAddMessage()
	case 6038:
		return NewEmoteListMessage()
	case 8135:
		return NewEmotePlayAbstractMessage()
	case 7853:
		return NewEmotePlayErrorMessage()
	case 1886:
		return NewEmotePlayMassiveMessage()
	case 3198:
		return NewEmotePlayMessage()
	case 7754:
		return NewEmotePlayRequestMessage()
	case 4524:
		return NewEmoteRemoveMessage()
	case 2625:
		return NewEnabledChannelsMessage()
	case 4036:
		return NewEnterHavenBagRequestMessage()
	case 266:
		return NewEntitiesInformationMessage()
	case 6850:
		return NewEntityInformationMessage()
	case 1171:
		return NewEntityTalkMessage()
	case 8967:
		return NewErrorMapNotFoundMessage()
	case 5637:
		return NewEvolutiveObjectRecycleResultMessage()
	case 804:
		return NewExchangeAcceptMessage()
	case 3820:
		return NewExchangeBidHouseBuyMessage()
	case 2613:
		return NewExchangeBidHouseBuyResultMessage()
	case 3696:
		return NewExchangeBidHouseGenericItemAddedMessage()
	case 3347:
		return NewExchangeBidHouseGenericItemRemovedMessage()
	case 9001:
		return NewExchangeBidHouseInListAddedMessage()
	case 4180:
		return NewExchangeBidHouseInListRemovedMessage()
	case 9240:
		return NewExchangeBidHouseInListUpdatedMessage()
	case 1557:
		return NewExchangeBidHouseItemAddOkMessage()
	case 8101:
		return NewExchangeBidHouseItemRemoveOkMessage()
	case 6171:
		return NewExchangeBidHouseListMessage()
	case 1454:
		return NewExchangeBidHousePriceMessage()
	case 5862:
		return NewExchangeBidHouseSearchMessage()
	case 8802:
		return NewExchangeBidHouseTypeMessage()
	case 9295:
		return NewExchangeBidHouseUnsoldItemsMessage()
	case 7209:
		return NewExchangeBidPriceForSellerMessage()
	case 4274:
		return NewExchangeBidPriceMessage()
	case 8956:
		return NewExchangeBidSearchOkMessage()
	case 4582:
		return NewExchangeBuyMessage()
	case 9839:
		return NewExchangeBuyOkMessage()
	case 7440:
		return NewExchangeCraftCountModifiedMessage()
	case 7189:
		return NewExchangeCraftCountRequestMessage()
	case 2392:
		return NewExchangeCraftPaymentModificationRequestMessage()
	case 2319:
		return NewExchangeCraftPaymentModifiedMessage()
	case 95:
		return NewExchangeCraftResultMagicWithObjectDescMessage()
	case 7869:
		return NewExchangeCraftResultMessage()
	case 4819:
		return NewExchangeCraftResultWithObjectDescMessage()
	case 1423:
		return NewExchangeCraftResultWithObjectIdMessage()
	case 2584:
		return NewExchangeCrafterJobLevelupMessage()
	case 9232:
		return NewExchangeErrorMessage()
	case 3319:
		return NewExchangeHandleMountsMessage()
	case 4377:
		return NewExchangeIsReadyMessage()
	case 5298:
		return NewExchangeItemAutoCraftStopedMessage()
	case 4910:
		return NewExchangeKamaModifiedMessage()
	case 384:
		return NewExchangeLeaveMessage()
	case 6145:
		return NewExchangeMoneyMovementInformationMessage()
	case 4615:
		return NewExchangeMountFreeFromPaddockMessage()
	case 5267:
		return NewExchangeMountStableErrorMessage()
	case 7996:
		return NewExchangeMountSterilizeFromPaddockMessage()
	case 8350:
		return NewExchangeMountsPaddockAddMessage()
	case 9608:
		return NewExchangeMountsPaddockRemoveMessage()
	case 9743:
		return NewExchangeMountsStableAddMessage()
	case 2861:
		return NewExchangeMountsStableBornAddMessage()
	case 6129:
		return NewExchangeMountsStableRemoveMessage()
	case 3055:
		return NewExchangeMountsTakenFromPaddockMessage()
	case 4154:
		return NewExchangeMultiCraftCrafterCanUseHisRessourcesMessage()
	case 7279:
		return NewExchangeMultiCraftSetCrafterCanUseHisRessourcesMessage()
	case 8426:
		return NewExchangeObjectAddedMessage()
	case 3411:
		return NewExchangeObjectMessage()
	case 9367:
		return NewExchangeObjectModifiedInBagMessage()
	case 7078:
		return NewExchangeObjectModifiedMessage()
	case 1058:
		return NewExchangeObjectModifyPricedMessage()
	case 7773:
		return NewExchangeObjectMoveKamaMessage()
	case 5939:
		return NewExchangeObjectMoveMessage()
	case 3566:
		return NewExchangeObjectMovePricedMessage()
	case 1002:
		return NewExchangeObjectMoveToTabMessage()
	case 5697:
		return NewExchangeObjectPutInBagMessage()
	case 5602:
		return NewExchangeObjectRemovedFromBagMessage()
	case 8090:
		return NewExchangeObjectRemovedMessage()
	case 1681:
		return NewExchangeObjectTransfertAllFromInvMessage()
	case 4357:
		return NewExchangeObjectTransfertAllToInvMessage()
	case 9675:
		return NewExchangeObjectTransfertExistingFromInvMessage()
	case 3544:
		return NewExchangeObjectTransfertExistingToInvMessage()
	case 7537:
		return NewExchangeObjectTransfertListFromInvMessage()
	case 8793:
		return NewExchangeObjectTransfertListToInvMessage()
	case 166:
		return NewExchangeObjectTransfertListWithQuantityToInvMessage()
	case 8008:
		return NewExchangeObjectUseInWorkshopMessage()
	case 9703:
		return NewExchangeObjectsAddedMessage()
	case 7326:
		return NewExchangeObjectsModifiedMessage()
	case 8928:
		return NewExchangeObjectsRemovedMessage()
	case 2524:
		return NewExchangeOfflineSoldItemsMessage()
	case 4122:
		return NewExchangeOkMultiCraftMessage()
	case 2028:
		return NewExchangePlayerMultiCraftRequestMessage()
	case 9371:
		return NewExchangePlayerRequestMessage()
	case 7160:
		return NewExchangePodsModifiedMessage()
	case 9547:
		return NewExchangeReadyMessage()
	case 2953:
		return NewExchangeReplayStopMessage()
	case 2919:
		return NewExchangeRequestMessage()
	case 5627:
		return NewExchangeRequestOnMountStockMessage()
	case 1216:
		return NewExchangeRequestOnTaxCollectorMessage()
	case 1313:
		return NewExchangeRequestedMessage()
	case 5103:
		return NewExchangeRequestedTradeMessage()
	case 4616:
		return NewExchangeSellMessage()
	case 49:
		return NewExchangeSellOkMessage()
	case 3981:
		return NewExchangeSetCraftRecipeMessage()
	case 6203:
		return NewExchangeStartOkCraftMessage()
	case 4096:
		return NewExchangeStartOkCraftWithInformationMessage()
	case 9395:
		return NewExchangeStartOkEvolutiveObjectRecycleTradeMessage()
	case 1248:
		return NewExchangeStartOkJobIndexMessage()
	case 2274:
		return NewExchangeStartOkMountMessage()
	case 1232:
		return NewExchangeStartOkMountWithOutPaddockMessage()
	case 7458:
		return NewExchangeStartOkMulticraftCrafterMessage()
	case 5378:
		return NewExchangeStartOkMulticraftCustomerMessage()
	case 6130:
		return NewExchangeStartOkNpcShopMessage()
	case 8322:
		return NewExchangeStartOkNpcTradeMessage()
	case 1067:
		return NewExchangeStartOkRecycleTradeMessage()
	case 1662:
		return NewExchangeStartOkRunesTradeMessage()
	case 4280:
		return NewExchangeStartedBidBuyerMessage()
	case 9278:
		return NewExchangeStartedBidSellerMessage()
	case 3043:
		return NewExchangeStartedMessage()
	case 6115:
		return NewExchangeStartedMountStockMessage()
	case 9293:
		return NewExchangeStartedTaxCollectorEquipmentMessage()
	case 9791:
		return NewExchangeStartedTaxCollectorShopMessage()
	case 4135:
		return NewExchangeStartedWithMultiTabStorageMessage()
	case 5028:
		return NewExchangeStartedWithPodsMessage()
	case 2977:
		return NewExchangeStartedWithStorageMessage()
	case 3673:
		return NewExchangeStoppedMessage()
	case 3970:
		return NewExchangeTaxCollectorGetMessage()
	case 6572:
		return NewExchangeTypesExchangerDescriptionForUserMessage()
	case 2738:
		return NewExchangeTypesItemsExchangerDescriptionForUserMessage()
	case 4276:
		return NewExchangeWaitingResultMessage()
	case 1630:
		return NewExchangeWeightMessage()
	case 1472:
		return NewExitHavenBagRequestMessage()
	case 4354:
		return NewFighterStatsListMessage()
	case 4769:
		return NewFinishMoveListMessage()
	case 2859:
		return NewFinishMoveListRequestMessage()
	case 6930:
		return NewFinishMoveSetRequestMessage()
	case 885:
		return NewFocusedExchangeReadyMessage()
	case 2913:
		return NewFollowQuestObjectiveRequestMessage()
	case 6589:
		return NewFollowedQuestsMessage()
	case 5352:
		return NewForceAccountErrorMessage()
	case 5654:
		return NewForceAccountMessage()
	case 25:
		return NewForceAccountStatusMessage()
	case 5459:
		return NewForgettableSpellClientActionMessage()
	case 4353:
		return NewForgettableSpellDeleteMessage()
	case 41:
		return NewForgettableSpellEquipmentSlotsMessage()
	case 6155:
		return NewForgettableSpellListUpdateMessage()
	case 6674:
		return NewFriendAddFailureMessage()
	case 5713:
		return NewFriendAddRequestMessage()
	case 3185:
		return NewFriendAddedMessage()
	case 9081:
		return NewFriendDeleteRequestMessage()
	case 4930:
		return NewFriendDeleteResultMessage()
	case 2747:
		return NewFriendGuildSetWarnOnAchievementCompleteMessage()
	case 1328:
		return NewFriendGuildWarnOnAchievementCompleteStateMessage()
	case 5530:
		return NewFriendJoinRequestMessage()
	case 5816:
		return NewFriendSetStatusShareMessage()
	case 7385:
		return NewFriendSetWarnOnConnectionMessage()
	case 5437:
		return NewFriendSetWarnOnLevelGainMessage()
	case 3784:
		return NewFriendSpouseFollowWithCompassRequestMessage()
	case 2260:
		return NewFriendSpouseJoinRequestMessage()
	case 8565:
		return NewFriendStatusShareStateMessage()
	case 7293:
		return NewFriendUpdateMessage()
	case 584:
		return NewFriendWarnOnConnectionStateMessage()
	case 2158:
		return NewFriendWarnOnLevelGainStateMessage()
	case 14:
		return NewFriendsGetListMessage()
	case 4172:
		return NewFriendsListMessage()
	case 5751:
		return NewGameActionAcknowledgementMessage()
	case 5706:
		return NewGameActionFightActivateGlyphTrapMessage()
	case 5771:
		return NewGameActionFightCarryCharacterMessage()
	case 6910:
		return NewGameActionFightCastOnTargetRequestMessage()
	case 6438:
		return NewGameActionFightCastRequestMessage()
	case 1629:
		return NewGameActionFightChangeLookMessage()
	case 2405:
		return NewGameActionFightCloseCombatMessage()
	case 9724:
		return NewGameActionFightDeathMessage()
	case 8550:
		return NewGameActionFightDispellEffectMessage()
	case 9152:
		return NewGameActionFightDispellMessage()
	case 4714:
		return NewGameActionFightDispellSpellMessage()
	case 3071:
		return NewGameActionFightDispellableEffectMessage()
	case 7515:
		return NewGameActionFightDodgePointLossMessage()
	case 8009:
		return NewGameActionFightDropCharacterMessage()
	case 8976:
		return NewGameActionFightExchangePositionsMessage()
	case 2495:
		return NewGameActionFightInvisibilityMessage()
	case 7285:
		return NewGameActionFightInvisibleDetectedMessage()
	case 6293:
		return NewGameActionFightKillMessage()
	case 5703:
		return NewGameActionFightLifeAndShieldPointsLostMessage()
	case 6590:
		return NewGameActionFightLifePointsGainMessage()
	case 6444:
		return NewGameActionFightLifePointsLostMessage()
	case 432:
		return NewGameActionFightMarkCellsMessage()
	case 9731:
		return NewGameActionFightModifyEffectsDurationMessage()
	case 8549:
		return NewGameActionFightMultipleSummonMessage()
	case 393:
		return NewGameActionFightNoSpellCastMessage()
	case 8927:
		return NewGameActionFightPointsVariationMessage()
	case 1547:
		return NewGameActionFightReduceDamagesMessage()
	case 7259:
		return NewGameActionFightReflectDamagesMessage()
	case 2356:
		return NewGameActionFightReflectSpellMessage()
	case 7006:
		return NewGameActionFightSlideMessage()
	case 2679:
		return NewGameActionFightSpellCastMessage()
	case 766:
		return NewGameActionFightSpellCooldownVariationMessage()
	case 276:
		return NewGameActionFightSpellImmunityMessage()
	case 6352:
		return NewGameActionFightStealKamaMessage()
	case 7363:
		return NewGameActionFightSummonMessage()
	case 3805:
		return NewGameActionFightTackledMessage()
	case 9922:
		return NewGameActionFightTeleportOnSameMapMessage()
	case 8659:
		return NewGameActionFightThrowCharacterMessage()
	case 8838:
		return NewGameActionFightTriggerEffectMessage()
	case 6199:
		return NewGameActionFightTriggerGlyphTrapMessage()
	case 9827:
		return NewGameActionFightUnmarkCellsMessage()
	case 5071:
		return NewGameActionFightVanishMessage()
	case 8509:
		return NewGameActionItemAddMessage()
	case 5525:
		return NewGameActionItemConsumedMessage()
	case 6041:
		return NewGameActionItemListMessage()
	case 116:
		return NewGameActionNoopMessage()
	case 9805:
		return NewGameActionSpamMessage()
	case 6014:
		return NewGameActionUpdateEffectTriggerCountMessage()
	case 779:
		return NewGameCautiousMapMovementMessage()
	case 920:
		return NewGameCautiousMapMovementRequestMessage()
	case 223:
		return NewGameContextCreateErrorMessage()
	case 1595:
		return NewGameContextCreateMessage()
	case 5527:
		return NewGameContextCreateRequestMessage()
	case 1821:
		return NewGameContextDestroyMessage()
	case 2032:
		return NewGameContextKickMessage()
	case 5362:
		return NewGameContextMoveElementMessage()
	case 7368:
		return NewGameContextMoveMultipleElementsMessage()
	case 4314:
		return NewGameContextQuitMessage()
	case 9237:
		return NewGameContextReadyMessage()
	case 7865:
		return NewGameContextRefreshEntityLookMessage()
	case 3496:
		return NewGameContextRemoveElementMessage()
	case 7775:
		return NewGameContextRemoveElementWithEventMessage()
	case 5405:
		return NewGameContextRemoveMultipleElementsMessage()
	case 1167:
		return NewGameContextRemoveMultipleElementsWithEventsMessage()
	case 652:
		return NewGameDataPaddockObjectAddMessage()
	case 9121:
		return NewGameDataPaddockObjectListAddMessage()
	case 9218:
		return NewGameDataPaddockObjectRemoveMessage()
	case 8213:
		return NewGameDataPlayFarmObjectAnimationMessage()
	case 7948:
		return NewGameEntitiesDispositionMessage()
	case 2619:
		return NewGameEntityDispositionErrorMessage()
	case 4:
		return NewGameEntityDispositionMessage()
	case 2386:
		return NewGameFightEndMessage()
	case 109:
		return NewGameFightHumanReadyStateMessage()
	case 8166:
		return NewGameFightJoinMessage()
	case 4010:
		return NewGameFightJoinRequestMessage()
	case 6974:
		return NewGameFightLeaveMessage()
	case 8261:
		return NewGameFightNewRoundMessage()
	case 4448:
		return NewGameFightNewWaveMessage()
	case 3172:
		return NewGameFightOptionStateUpdateMessage()
	case 5955:
		return NewGameFightOptionToggleMessage()
	case 1045:
		return NewGameFightPauseMessage()
	case 7043:
		return NewGameFightPlacementPositionRequestMessage()
	case 282:
		return NewGameFightPlacementPossiblePositionsMessage()
	case 870:
		return NewGameFightPlacementSwapPositionsAcceptMessage()
	case 5173:
		return NewGameFightPlacementSwapPositionsCancelMessage()
	case 1579:
		return NewGameFightPlacementSwapPositionsCancelledMessage()
	case 6325:
		return NewGameFightPlacementSwapPositionsErrorMessage()
	case 5606:
		return NewGameFightPlacementSwapPositionsMessage()
	case 5124:
		return NewGameFightPlacementSwapPositionsOfferMessage()
	case 501:
		return NewGameFightPlacementSwapPositionsRequestMessage()
	case 4840:
		return NewGameFightReadyMessage()
	case 3786:
		return NewGameFightRefreshFighterMessage()
	case 7301:
		return NewGameFightRemoveTeamMemberMessage()
	case 2675:
		return NewGameFightResumeMessage()
	case 5652:
		return NewGameFightResumeWithSlavesMessage()
	case 5747:
		return NewGameFightShowFighterMessage()
	case 7583:
		return NewGameFightShowFighterRandomStaticPoseMessage()
	case 6318:
		return NewGameFightSpectateMessage()
	case 8994:
		return NewGameFightSpectatePlayerRequestMessage()
	case 3924:
		return NewGameFightSpectatorJoinMessage()
	case 9783:
		return NewGameFightStartMessage()
	case 6131:
		return NewGameFightStartingMessage()
	case 8985:
		return NewGameFightSynchronizeMessage()
	case 7900:
		return NewGameFightTurnEndMessage()
	case 3915:
		return NewGameFightTurnFinishMessage()
	case 1243:
		return NewGameFightTurnListMessage()
	case 9655:
		return NewGameFightTurnReadyMessage()
	case 379:
		return NewGameFightTurnReadyRequestMessage()
	case 7389:
		return NewGameFightTurnResumeMessage()
	case 217:
		return NewGameFightTurnStartMessage()
	case 3867:
		return NewGameFightTurnStartPlayingMessage()
	case 3874:
		return NewGameFightUpdateTeamMessage()
	case 8741:
		return NewGameMapChangeOrientationMessage()
	case 1190:
		return NewGameMapChangeOrientationRequestMessage()
	case 3256:
		return NewGameMapChangeOrientationsMessage()
	case 2486:
		return NewGameMapMovementCancelMessage()
	case 3317:
		return NewGameMapMovementConfirmMessage()
	case 6493:
		return NewGameMapMovementMessage()
	case 4548:
		return NewGameMapMovementRequestMessage()
	case 6322:
		return NewGameMapNoMovementMessage()
	case 3997:
		return NewGameRefreshMonsterBoostsMessage()
	case 6235:
		return NewGameRolePlayAggressionMessage()
	case 7230:
		return NewGameRolePlayArenaFightAnswerMessage()
	case 5667:
		return NewGameRolePlayArenaFightPropositionMessage()
	case 3114:
		return NewGameRolePlayArenaFighterStatusMessage()
	case 953:
		return NewGameRolePlayArenaInvitationCandidatesAnswerMessage()
	case 7599:
		return NewGameRolePlayArenaLeagueRewardsMessage()
	case 1302:
		return NewGameRolePlayArenaPlayerBehavioursMessage()
	case 2855:
		return NewGameRolePlayArenaRegisterMessage()
	case 4586:
		return NewGameRolePlayArenaRegistrationStatusMessage()
	case 8542:
		return NewGameRolePlayArenaRegistrationWarningMessage()
	case 4751:
		return NewGameRolePlayArenaSwitchToFightServerMessage()
	case 6763:
		return NewGameRolePlayArenaSwitchToGameServerMessage()
	case 326:
		return NewGameRolePlayArenaUnregisterMessage()
	case 1665:
		return NewGameRolePlayArenaUpdatePlayerInfosMessage()
	case 9329:
		return NewGameRolePlayAttackMonsterRequestMessage()
	case 7896:
		return NewGameRolePlayDelayedActionFinishedMessage()
	case 4358:
		return NewGameRolePlayDelayedActionMessage()
	case 3110:
		return NewGameRolePlayDelayedObjectUseMessage()
	case 5826:
		return NewGameRolePlayFightRequestCanceledMessage()
	case 3818:
		return NewGameRolePlayFreeSoulRequestMessage()
	case 3824:
		return NewGameRolePlayGameOverMessage()
	case 9879:
		return NewGameRolePlayMonsterAngryAtPlayerMessage()
	case 5585:
		return NewGameRolePlayMonsterNotAngryAtPlayerMessage()
	case 1704:
		return NewGameRolePlayPlayerFightFriendlyAnswerMessage()
	case 1668:
		return NewGameRolePlayPlayerFightFriendlyAnsweredMessage()
	case 4626:
		return NewGameRolePlayPlayerFightFriendlyRequestedMessage()
	case 6628:
		return NewGameRolePlayPlayerFightRequestMessage()
	case 8693:
		return NewGameRolePlayPlayerLifeStatusMessage()
	case 3370:
		return NewGameRolePlayRemoveChallengeMessage()
	case 1818:
		return NewGameRolePlayShowActorMessage()
	case 5:
		return NewGameRolePlayShowActorWithEventMessage()
	case 7254:
		return NewGameRolePlayShowChallengeMessage()
	case 323:
		return NewGameRolePlayShowMultipleActorsMessage()
	case 1173:
		return NewGameRolePlaySpellAnimMessage()
	case 1944:
		return NewGameRolePlayTaxCollectorFightRequestMessage()
	case 1521:
		return NewGoldAddedMessage()
	case 1816:
		return NewGroupTeleportPlayerAnswerMessage()
	case 2716:
		return NewGroupTeleportPlayerCloseMessage()
	case 3076:
		return NewGroupTeleportPlayerOfferMessage()
	case 7707:
		return NewGuestLimitationMessage()
	case 5810:
		return NewGuestModeMessage()
	case 6433:
		return NewGuidedModeQuitRequestMessage()
	case 625:
		return NewGuidedModeReturnRequestMessage()
	case 3927:
		return NewGuildApplicationAnswerMessage()
	case 8782:
		return NewGuildApplicationDeletedMessage()
	case 3637:
		return NewGuildApplicationIsAnsweredMessage()
	case 5367:
		return NewGuildApplicationListenMessage()
	case 9885:
		return NewGuildApplicationPresenceMessage()
	case 8148:
		return NewGuildApplicationReceivedMessage()
	case 1996:
		return NewGuildBulletinMessage()
	case 8324:
		return NewGuildBulletinSetErrorMessage()
	case 5517:
		return NewGuildBulletinSetRequestMessage()
	case 1951:
		return NewGuildChangeMemberParametersMessage()
	case 237:
		return NewGuildCharacsUpgradeRequestMessage()
	case 8050:
		return NewGuildChestTabContributionMessage()
	case 753:
		return NewGuildChestTabContributionsMessage()
	case 683:
		return NewGuildChestTabLastContributionMessage()
	case 4018:
		return NewGuildCreationResultMessage()
	case 5711:
		return NewGuildCreationStartedMessage()
	case 1720:
		return NewGuildCreationValidMessage()
	case 7132:
		return NewGuildDeleteApplicationRequestMessage()
	case 7863:
		return NewGuildFactsErrorMessage()
	case 5626:
		return NewGuildFactsMessage()
	case 6650:
		return NewGuildFactsRequestMessage()
	case 5518:
		return NewGuildGetChestTabContributionsRequestMessage()
	case 592:
		return NewGuildGetInformationsMessage()
	case 5398:
		return NewGuildGetPlayerApplicationMessage()
	case 4888:
		return NewGuildHouseRemoveMessage()
	case 1590:
		return NewGuildHouseUpdateInformationMessage()
	case 5207:
		return NewGuildHousesInformationMessage()
	case 4406:
		return NewGuildInformationsGeneralMessage()
	case 6708:
		return NewGuildInformationsMemberUpdateMessage()
	case 6362:
		return NewGuildInformationsMembersMessage()
	case 7168:
		return NewGuildInformationsPaddocksMessage()
	case 5328:
		return NewGuildInvitationAnswerMessage()
	case 8788:
		return NewGuildInvitationMessage()
	case 9851:
		return NewGuildInvitationStateRecrutedMessage()
	case 2343:
		return NewGuildInvitationStateRecruterMessage()
	case 4003:
		return NewGuildInvitedMessage()
	case 5069:
		return NewGuildIsThereAnyApplicationMessage()
	case 2737:
		return NewGuildJoinAutomaticallyRequestMessage()
	case 2814:
		return NewGuildJoinedMessage()
	case 9738:
		return NewGuildKickRequestMessage()
	case 3266:
		return NewGuildLeftMessage()
	case 5408:
		return NewGuildLevelUpMessage()
	case 948:
		return NewGuildListApplicationAnswerMessage()
	case 7224:
		return NewGuildListApplicationModifiedMessage()
	case 695:
		return NewGuildListApplicationRequestMessage()
	case 669:
		return NewGuildListMessage()
	case 7376:
		return NewGuildLogbookInformationMessage()
	case 319:
		return NewGuildLogbookInformationRequestMessage()
	case 7246:
		return NewGuildMemberLeavingMessage()
	case 8750:
		return NewGuildMemberOnlineStatusMessage()
	case 6143:
		return NewGuildMemberStartWarnOnConnectionMessage()
	case 8625:
		return NewGuildMemberStopWarnOnConnectionMessage()
	case 2644:
		return NewGuildMembershipMessage()
	case 4735:
		return NewGuildModificationEmblemValidMessage()
	case 5733:
		return NewGuildModificationNameValidMessage()
	case 775:
		return NewGuildModificationResultMessage()
	case 515:
		return NewGuildModificationStartedMessage()
	case 4686:
		return NewGuildModificationValidMessage()
	case 4318:
		return NewGuildMotdMessage()
	case 6422:
		return NewGuildMotdSetErrorMessage()
	case 3388:
		return NewGuildMotdSetRequestMessage()
	case 4625:
		return NewGuildPaddockBoughtMessage()
	case 1415:
		return NewGuildPaddockRemovedMessage()
	case 8533:
		return NewGuildPaddockTeleportRequestMessage()
	case 4745:
		return NewGuildPlayerApplicationAbstractMessage()
	case 656:
		return NewGuildPlayerApplicationInformationMessage()
	case 6961:
		return NewGuildPlayerNoApplicationInformationMessage()
	case 3908:
		return NewGuildRanksMessage()
	case 5381:
		return NewGuildRanksRequestMessage()
	case 5184:
		return NewGuildRecruitmentInvalidateMessage()
	case 7367:
		return NewGuildSelectChestTabRequestMessage()
	case 5991:
		return NewGuildSpellUpgradeRequestMessage()
	case 2378:
		return NewGuildSubmitApplicationMessage()
	case 156:
		return NewGuildSummaryMessage()
	case 1163:
		return NewGuildSummaryRequestMessage()
	case 7570:
		return NewGuildUpdateApplicationMessage()
	case 6464:
		return NewGuildUpdateChestTabRequestMessage()
	case 7051:
		return NewGuildUpdateNoteMessage()
	case 4765:
		return NewHaapiApiKeyMessage()
	case 9219:
		return NewHaapiApiKeyRequestMessage()
	case 349:
		return NewHaapiAuthErrorMessage()
	case 3:
		return NewHaapiBufferListMessage()
	case 4581:
		return NewHaapiBufferListRequestMessage()
	case 1448:
		return NewHaapiBuyValidationMessage()
	case 6447:
		return NewHaapiCancelBidRequestMessage()
	case 5031:
		return NewHaapiConfirmationMessage()
	case 7674:
		return NewHaapiConfirmationRequestMessage()
	case 2127:
		return NewHaapiConsumeBufferRequestMessage()
	case 4199:
		return NewHaapiSessionMessage()
	case 1934:
		return NewHaapiShopApiKeyMessage()
	case 9104:
		return NewHaapiShopApiKeyRequestMessage()
	case 4627:
		return NewHaapiTokenMessage()
	case 5934:
		return NewHaapiTokenRequestMessage()
	case 7090:
		return NewHaapiValidationMessage()
	case 2930:
		return NewHaapiValidationRequestMessage()
	case 9352:
		return NewHavenBagDailyLoteryMessage()
	case 135:
		return NewHavenBagFurnituresMessage()
	case 5127:
		return NewHavenBagFurnituresRequestMessage()
	case 9897:
		return NewHavenBagPackListMessage()
	case 7957:
		return NewHavenBagPermissionsUpdateMessage()
	case 958:
		return NewHavenBagPermissionsUpdateRequestMessage()
	case 5461:
		return NewHavenBagRoomUpdateMessage()
	case 5586:
		return NewHelloConnectMessage()
	case 708:
		return NewHelloGameMessage()
	case 5849:
		return NewHouseBuyRequestMessage()
	case 4284:
		return NewHouseBuyResultMessage()
	case 7676:
		return NewHouseGuildNoneMessage()
	case 8722:
		return NewHouseGuildRightsMessage()
	case 9956:
		return NewHouseGuildRightsViewMessage()
	case 5369:
		return NewHouseGuildShareRequestMessage()
	case 7559:
		return NewHouseKickRequestMessage()
	case 9529:
		return NewHouseLockFromInsideRequestMessage()
	case 3385:
		return NewHousePropertiesMessage()
	case 6061:
		return NewHouseSellFromInsideRequestMessage()
	case 1606:
		return NewHouseSellRequestMessage()
	case 6800:
		return NewHouseSellingUpdateMessage()
	case 3189:
		return NewHouseTeleportRequestMessage()
	case 9188:
		return NewHouseToSellFilterMessage()
	case 8317:
		return NewHouseToSellListMessage()
	case 6950:
		return NewHouseToSellListRequestMessage()
	case 6922:
		return NewIconNamedPresetSaveRequestMessage()
	case 6591:
		return NewIconPresetSaveRequestMessage()
	case 8668:
		return NewIdentificationFailedBannedMessage()
	case 4124:
		return NewIdentificationFailedForBadVersionMessage()
	case 4567:
		return NewIdentificationFailedMessage()
	case 9262:
		return NewIdentificationMessage()
	case 6104:
		return NewIdentificationSuccessMessage()
	case 3224:
		return NewIdentificationSuccessWithLoginTokenMessage()
	case 7186:
		return NewIgnoredAddFailureMessage()
	case 5112:
		return NewIgnoredAddRequestMessage()
	case 3797:
		return NewIgnoredAddedMessage()
	case 7645:
		return NewIgnoredDeleteRequestMessage()
	case 2365:
		return NewIgnoredDeleteResultMessage()
	case 8068:
		return NewIgnoredGetListMessage()
	case 8123:
		return NewIgnoredListMessage()
	case 8912:
		return NewInteractiveElementUpdatedMessage()
	case 9493:
		return NewInteractiveMapUpdateMessage()
	case 2897:
		return NewInteractiveUseEndedMessage()
	case 2991:
		return NewInteractiveUseErrorMessage()
	case 1424:
		return NewInteractiveUseRequestMessage()
	case 8117:
		return NewInteractiveUseWithParamRequestMessage()
	case 3900:
		return NewInteractiveUsedMessage()
	case 1001:
		return NewInvalidPresetsMessage()
	case 8042:
		return NewInventoryContentMessage()
	case 9677:
		return NewInventoryWeightMessage()
	case 8001:
		return NewInviteInHavenBagClosedMessage()
	case 949:
		return NewInviteInHavenBagMessage()
	case 5037:
		return NewInviteInHavenBagOfferMessage()
	case 6815:
		return NewItemForPresetUpdateMessage()
	case 2498:
		return NewItemNoMoreAvailableMessage()
	case 1737:
		return NewJobAllowMultiCraftRequestMessage()
	case 7221:
		return NewJobBookSubscribeRequestMessage()
	case 6723:
		return NewJobBookSubscriptionMessage()
	case 9328:
		return NewJobCrafterDirectoryAddMessage()
	case 5859:
		return NewJobCrafterDirectoryDefineSettingsMessage()
	case 2116:
		return NewJobCrafterDirectoryEntryMessage()
	case 1749:
		return NewJobCrafterDirectoryEntryRequestMessage()
	case 8710:
		return NewJobCrafterDirectoryListMessage()
	case 5876:
		return NewJobCrafterDirectoryListRequestMessage()
	case 3245:
		return NewJobCrafterDirectoryRemoveMessage()
	case 9206:
		return NewJobCrafterDirectorySettingsMessage()
	case 9539:
		return NewJobDescriptionMessage()
	case 8763:
		return NewJobExperienceMultiUpdateMessage()
	case 1331:
		return NewJobExperienceOtherPlayerUpdateMessage()
	case 6979:
		return NewJobExperienceUpdateMessage()
	case 386:
		return NewJobLevelUpMessage()
	case 8902:
		return NewJobMultiCraftAvailableSkillsMessage()
	case 654:
		return NewKamasUpdateMessage()
	case 3554:
		return NewKickHavenBagRequestMessage()
	case 5253:
		return NewKnownZaapListMessage()
	case 1036:
		return NewKohUpdateMessage()
	case 506:
		return NewKothEndMessage()
	case 6689:
		return NewLeaveDialogMessage()
	case 9643:
		return NewLeaveDialogRequestMessage()
	case 9965:
		return NewLifePointsRegenBeginMessage()
	case 6833:
		return NewLifePointsRegenEndMessage()
	case 5023:
		return NewListMapNpcsQuestStatusUpdateMessage()
	case 8036:
		return NewListenersOfSynchronizedStorageMessage()
	case 2511:
		return NewLivingObjectChangeSkinRequestMessage()
	case 8437:
		return NewLivingObjectDissociateMessage()
	case 6015:
		return NewLivingObjectMessageMessage()
	case 5726:
		return NewLivingObjectMessageRequestMessage()
	case 8626:
		return NewLocalizedChatSmileyMessage()
	case 9751:
		return NewLockableChangeCodeMessage()
	case 7522:
		return NewLockableCodeResultMessage()
	case 9268:
		return NewLockableShowCodeDialogMessage()
	case 107:
		return NewLockableStateUpdateAbstractMessage()
	case 7692:
		return NewLockableStateUpdateHouseDoorMessage()
	case 569:
		return NewLockableStateUpdateStorageMessage()
	case 3147:
		return NewLockableUseCodeMessage()
	case 3098:
		return NewLoginQueueStatusMessage()
	case 7688:
		return NewMapComplementaryInformationsAnomalyMessage()
	case 4428:
		return NewMapComplementaryInformationsBreachMessage()
	case 2021:
		return NewMapComplementaryInformationsDataInHavenBagMessage()
	case 1071:
		return NewMapComplementaryInformationsDataInHouseMessage()
	case 9792:
		return NewMapComplementaryInformationsDataMessage()
	case 5198:
		return NewMapComplementaryInformationsWithCoordsMessage()
	case 2838:
		return NewMapFightCountMessage()
	case 9437:
		return NewMapFightStartPositionsUpdateMessage()
	case 2408:
		return NewMapInformationsRequestMessage()
	case 75:
		return NewMapObstacleUpdateMessage()
	case 8895:
		return NewMapRunningFightDetailsExtendedMessage()
	case 2005:
		return NewMapRunningFightDetailsMessage()
	case 337:
		return NewMapRunningFightDetailsRequestMessage()
	case 8225:
		return NewMapRunningFightListMessage()
	case 1925:
		return NewMapRunningFightListRequestMessage()
	case 2491:
		return NewMigratedServerListMessage()
	case 1127:
		return NewMimicryObjectAssociatedMessage()
	case 7124:
		return NewMimicryObjectEraseRequestMessage()
	case 3920:
		return NewMimicryObjectErrorMessage()
	case 3754:
		return NewMimicryObjectFeedAndAssociateRequestMessage()
	case 2255:
		return NewMimicryObjectPreviewMessage()
	case 6420:
		return NewMoodSmileyRequestMessage()
	case 1383:
		return NewMoodSmileyResultMessage()
	case 2215:
		return NewMoodSmileyUpdateMessage()
	case 2483:
		return NewMountDataErrorMessage()
	case 137:
		return NewMountDataMessage()
	case 3490:
		return NewMountEmoteIconUsedOkMessage()
	case 5171:
		return NewMountEquipedErrorMessage()
	case 3038:
		return NewMountFeedRequestMessage()
	case 4391:
		return NewMountHarnessColorsUpdateRequestMessage()
	case 7150:
		return NewMountHarnessDissociateRequestMessage()
	case 7545:
		return NewMountInformationInPaddockRequestMessage()
	case 826:
		return NewMountInformationRequestMessage()
	case 1227:
		return NewMountReleaseRequestMessage()
	case 7843:
		return NewMountReleasedMessage()
	case 4115:
		return NewMountRenameRequestMessage()
	case 2688:
		return NewMountRenamedMessage()
	case 3880:
		return NewMountRidingMessage()
	case 110:
		return NewMountSetMessage()
	case 4347:
		return NewMountSetXpRatioRequestMessage()
	case 658:
		return NewMountSterilizeRequestMessage()
	case 9430:
		return NewMountSterilizedMessage()
	case 1106:
		return NewMountToggleRidingRequestMessage()
	case 8582:
		return NewMountUnSetMessage()
	case 9050:
		return NewMountXpRatioMessage()
	case 8918:
		return NewMoveTaxCollectorOrderedSpellMessage()
	case 6548:
		return NewMoveTaxCollectorPresetSpellMessage()
	case 7356:
		return NewMultiTabStorageMessage()
	case 2:
		return NewNetworkDataContainerMessage()
	case 8083:
		return NewNicknameAcceptedMessage()
	case 4608:
		return NewNicknameChoiceRequestMessage()
	case 4482:
		return NewNicknameRefusedMessage()
	case 8872:
		return NewNicknameRegistrationMessage()
	case 3884:
		return NewNotificationByServerMessage()
	case 7443:
		return NewNotificationListMessage()
	case 4503:
		return NewNotificationResetMessage()
	case 8455:
		return NewNotificationUpdateFlagMessage()
	case 3289:
		return NewNpcDialogCreationMessage()
	case 5481:
		return NewNpcDialogQuestionMessage()
	case 4752:
		return NewNpcDialogReplyMessage()
	case 5877:
		return NewNpcGenericActionFailureMessage()
	case 6670:
		return NewNpcGenericActionRequestMessage()
	case 3417:
		return NewNuggetsDistributionMessage()
	case 5214:
		return NewNuggetsInformationMessage()
	case 2693:
		return NewNumericWhoIsMessage()
	case 2359:
		return NewNumericWhoIsRequestMessage()
	case 6866:
		return NewObjectAddedMessage()
	case 5074:
		return NewObjectAveragePricesErrorMessage()
	case 2730:
		return NewObjectAveragePricesGetMessage()
	case 2729:
		return NewObjectAveragePricesMessage()
	case 5997:
		return NewObjectDeleteMessage()
	case 6668:
		return NewObjectDeletedMessage()
	case 2531:
		return NewObjectDropMessage()
	case 2089:
		return NewObjectErrorMessage()
	case 8727:
		return NewObjectFeedMessage()
	case 3774:
		return NewObjectGroundAddedMessage()
	case 7785:
		return NewObjectGroundListAddedMessage()
	case 5855:
		return NewObjectGroundRemovedMessage()
	case 3407:
		return NewObjectGroundRemovedMultipleMessage()
	case 5441:
		return NewObjectJobAddedMessage()
	case 7821:
		return NewObjectModifiedMessage()
	case 4510:
		return NewObjectMovementMessage()
	case 204:
		return NewObjectQuantityMessage()
	case 5569:
		return NewObjectSetPositionMessage()
	case 1372:
		return NewObjectUseMessage()
	case 1310:
		return NewObjectUseMultipleMessage()
	case 4046:
		return NewObjectUseOnCellMessage()
	case 2165:
		return NewObjectUseOnCharacterMessage()
	case 1527:
		return NewObjectsAddedMessage()
	case 5219:
		return NewObjectsDeletedMessage()
	case 5664:
		return NewObjectsQuantityMessage()
	case 9678:
		return NewObtainedItemMessage()
	case 7133:
		return NewObtainedItemWithBonusMessage()
	case 999:
		return NewOnConnectionEventMessage()
	case 9970:
		return NewOpenGuideBookMessage()
	case 7398:
		return NewOpenHavenBagFurnitureSequenceRequestMessage()
	case 6059:
		return NewOpponentSurrenderMessage()
	case 9883:
		return NewOrnamentGainedMessage()
	case 2799:
		return NewOrnamentLostMessage()
	case 6401:
		return NewOrnamentSelectErrorMessage()
	case 732:
		return NewOrnamentSelectRequestMessage()
	case 7251:
		return NewOrnamentSelectedMessage()
	case 1669:
		return NewPaddockBuyRequestMessage()
	case 5838:
		return NewPaddockBuyResultMessage()
	case 6071:
		return NewPaddockMoveItemRequestMessage()
	case 4650:
		return NewPaddockPropertiesMessage()
	case 2191:
		return NewPaddockRemoveItemRequestMessage()
	case 4196:
		return NewPaddockSellBuyDialogMessage()
	case 6528:
		return NewPaddockSellRequestMessage()
	case 3852:
		return NewPaddockToSellFilterMessage()
	case 7795:
		return NewPaddockToSellListMessage()
	case 101:
		return NewPaddockToSellListRequestMessage()
	case 1468:
		return NewPaginationAnswerAbstractMessage()
	case 6633:
		return NewPaginationRequestAbstractMessage()
	case 7804:
		return NewPartyAbdicateThroneMessage()
	case 4342:
		return NewPartyAcceptInvitationMessage()
	case 425:
		return NewPartyCancelInvitationMessage()
	case 1327:
		return NewPartyCancelInvitationNotificationMessage()
	case 6016:
		return NewPartyCannotJoinErrorMessage()
	case 8038:
		return NewPartyDeletedMessage()
	case 2046:
		return NewPartyEntityUpdateLightMessage()
	case 7118:
		return NewPartyFollowMemberRequestMessage()
	case 4068:
		return NewPartyFollowStatusUpdateMessage()
	case 327:
		return NewPartyFollowThisMemberRequestMessage()
	case 2774:
		return NewPartyInvitationArenaRequestMessage()
	case 7618:
		return NewPartyInvitationCancelledForGuestMessage()
	case 8607:
		return NewPartyInvitationDetailsMessage()
	case 8629:
		return NewPartyInvitationDetailsRequestMessage()
	case 2367:
		return NewPartyInvitationDungeonDetailsMessage()
	case 3539:
		return NewPartyInvitationDungeonMessage()
	case 5145:
		return NewPartyInvitationDungeonRequestMessage()
	case 729:
		return NewPartyInvitationMessage()
	case 7920:
		return NewPartyInvitationRequestMessage()
	case 6577:
		return NewPartyJoinMessage()
	case 7926:
		return NewPartyKickRequestMessage()
	case 4958:
		return NewPartyKickedByMessage()
	case 6439:
		return NewPartyLeaderUpdateMessage()
	case 83:
		return NewPartyLeaveMessage()
	case 6779:
		return NewPartyLeaveRequestMessage()
	case 8066:
		return NewPartyLocateMembersMessage()
	case 4987:
		return NewPartyLocateMembersRequestMessage()
	case 5384:
		return NewPartyLoyaltyStatusMessage()
	case 9438:
		return NewPartyMemberEjectedMessage()
	case 2380:
		return NewPartyMemberInBreachFightMessage()
	case 8285:
		return NewPartyMemberInStandardFightMessage()
	case 7328:
		return NewPartyMemberRemoveMessage()
	case 2363:
		return NewPartyModifiableStatusMessage()
	case 7989:
		return NewPartyNameSetErrorMessage()
	case 9125:
		return NewPartyNameSetRequestMessage()
	case 9591:
		return NewPartyNameUpdateMessage()
	case 7060:
		return NewPartyNewGuestMessage()
	case 4529:
		return NewPartyNewMemberMessage()
	case 7730:
		return NewPartyPledgeLoyaltyRequestMessage()
	case 9721:
		return NewPartyRefuseInvitationMessage()
	case 1724:
		return NewPartyRefuseInvitationNotificationMessage()
	case 2879:
		return NewPartyRestrictedMessage()
	case 8393:
		return NewPartyStopFollowRequestMessage()
	case 4231:
		return NewPartyUpdateLightMessage()
	case 5707:
		return NewPartyUpdateMessage()
	case 3238:
		return NewPauseDialogMessage()
	case 3860:
		return NewPlayerStatusUpdateErrorMessage()
	case 3675:
		return NewPlayerStatusUpdateMessage()
	case 4213:
		return NewPlayerStatusUpdateRequestMessage()
	case 663:
		return NewPopupWarningCloseRequestMessage()
	case 2757:
		return NewPopupWarningClosedMessage()
	case 1024:
		return NewPopupWarningMessage()
	case 6302:
		return NewPortalDialogCreationMessage()
	case 6790:
		return NewPortalUseRequestMessage()
	case 7052:
		return NewPresetDeleteRequestMessage()
	case 6319:
		return NewPresetDeleteResultMessage()
	case 7630:
		return NewPresetSaveErrorMessage()
	case 889:
		return NewPresetSavedMessage()
	case 7506:
		return NewPresetUseRequestMessage()
	case 799:
		return NewPresetUseResultMessage()
	case 5059:
		return NewPresetUseResultWithMissingIdsMessage()
	case 8873:
		return NewPresetsMessage()
	case 1525:
		return NewPrismAddOrUpdateMessage()
	case 6412:
		return NewPrismAttackRequestMessage()
	case 8541:
		return NewPrismAttackResultMessage()
	case 48:
		return NewPrismAttackedMessage()
	case 1588:
		return NewPrismExchangeRequestMessage()
	case 299:
		return NewPrismRecycleTradeRequestMessage()
	case 4672:
		return NewPrismRemoveMessage()
	case 7355:
		return NewPrismTeleportationRequestMessage()
	case 7733:
		return NewPrismsListMessage()
	case 1939:
		return NewProtocolRequired()
	case 100:
		return NewPurchasableDialogMessage()
	case 3323:
		return NewQuestListMessage()
	case 7114:
		return NewQuestListRequestMessage()
	case 3508:
		return NewQuestObjectiveValidatedMessage()
	case 4654:
		return NewQuestObjectiveValidationMessage()
	case 8398:
		return NewQuestStartRequestMessage()
	case 8372:
		return NewQuestStartedMessage()
	case 830:
		return NewQuestStepInfoMessage()
	case 5778:
		return NewQuestStepInfoRequestMessage()
	case 2945:
		return NewQuestStepStartedMessage()
	case 4373:
		return NewQuestStepValidatedMessage()
	case 1736:
		return NewQuestValidatedMessage()
	case 4838:
		return NewQueueStatusMessage()
	case 6253:
		return NewRawDataMessage()
	case 8248:
		return NewRecruitmentInformationMessage()
	case 4137:
		return NewRecycleResultMessage()
	case 2710:
		return NewRefreshCharacterStatsMessage()
	case 3965:
		return NewRefreshFollowedQuestsOrderRequestMessage()
	case 3259:
		return NewReleaseAccountMessage()
	case 7722:
		return NewReloginTokenRequestMessage()
	case 2673:
		return NewReloginTokenStatusMessage()
	case 5524:
		return NewRemoveGuildRankRequestMessage()
	case 91:
		return NewRemoveListenerOnSynchronizedStorageMessage()
	case 194:
		return NewRemoveSpellModifierMessage()
	case 9951:
		return NewRemoveTaxCollectorOrderedSpellMessage()
	case 5781:
		return NewRemoveTaxCollectorPresetSpellMessage()
	case 8254:
		return NewReportRequestMessage()
	case 8138:
		return NewReportResponseMessage()
	case 7045:
		return NewResetCharacterStatsRequestMessage()
	case 7269:
		return NewSelectedServerDataExtendedMessage()
	case 4944:
		return NewSelectedServerDataMessage()
	case 277:
		return NewSelectedServerRefusedMessage()
	case 1586:
		return NewSequenceEndMessage()
	case 1188:
		return NewSequenceNumberMessage()
	case 594:
		return NewSequenceNumberRequestMessage()
	case 7231:
		return NewSequenceStartMessage()
	case 9259:
		return NewServerExperienceModificatorMessage()
	case 8385:
		return NewServerOptionalFeaturesMessage()
	case 4134:
		return NewServerSelectionMessage()
	case 9337:
		return NewServerSessionConstantsMessage()
	case 154:
		return NewServerSettingsMessage()
	case 4424:
		return NewServerStatusUpdateMessage()
	case 9500:
		return NewServersListMessage()
	case 1324:
		return NewSetCharacterRestrictionsMessage()
	case 6858:
		return NewSetEnableAVARequestMessage()
	case 3251:
		return NewSetEnablePVPRequestMessage()
	case 7483:
		return NewSetUpdateMessage()
	case 1627:
		return NewShortcutBarAddErrorMessage()
	case 6013:
		return NewShortcutBarAddRequestMessage()
	case 9158:
		return NewShortcutBarContentMessage()
	case 5972:
		return NewShortcutBarRefreshMessage()
	case 4981:
		return NewShortcutBarRemoveErrorMessage()
	case 2126:
		return NewShortcutBarRemoveRequestMessage()
	case 8757:
		return NewShortcutBarRemovedMessage()
	case 125:
		return NewShortcutBarReplacedMessage()
	case 6501:
		return NewShortcutBarSwapErrorMessage()
	case 45:
		return NewShortcutBarSwapRequestMessage()
	case 9194:
		return NewShowCellMessage()
	case 4804:
		return NewShowCellRequestMessage()
	case 4927:
		return NewShowCellSpectatorMessage()
	case 1268:
		return NewSlaveNoLongerControledMessage()
	case 974:
		return NewSlaveSwitchContextMessage()
	case 335:
		return NewSocialFightJoinRequestMessage()
	case 995:
		return NewSocialFightLeaveRequestMessage()
	case 7755:
		return NewSocialFightTakePlaceRequestMessage()
	case 4859:
		return NewSocialNoticeMessage()
	case 3100:
		return NewSocialNoticeSetErrorMessage()
	case 3682:
		return NewSocialNoticeSetRequestMessage()
	case 7427:
		return NewSpellListMessage()
	case 7767:
		return NewSpellVariantActivationMessage()
	case 1715:
		return NewSpellVariantActivationRequestMessage()
	case 9594:
		return NewSpouseGetInformationsMessage()
	case 7779:
		return NewSpouseInformationsMessage()
	case 8361:
		return NewSpouseStatusMessage()
	case 878:
		return NewStartExchangeTaxCollectorEquipmentMessage()
	case 9862:
		return NewStartGuildChestContributionMessage()
	case 448:
		return NewStartListenAllianceFightMessage()
	case 9892:
		return NewStartListenGuildChestStructureMessage()
	case 4559:
		return NewStartListenNuggetsMessage()
	case 3876:
		return NewStartListenTaxCollectorPresetsUpdatesMessage()
	case 659:
		return NewStartListenTaxCollectorUpdatesMessage()
	case 7859:
		return NewStatedElementUpdatedMessage()
	case 2054:
		return NewStatedMapUpdateMessage()
	case 5002:
		return NewStatsUpgradeRequestMessage()
	case 3065:
		return NewStatsUpgradeResultMessage()
	case 1053:
		return NewStopGuildChestContributionMessage()
	case 6339:
		return NewStopListenAllianceFightMessage()
	case 3081:
		return NewStopListenGuildChestStructureMessage()
	case 4818:
		return NewStopListenNuggetsMessage()
	case 4043:
		return NewStopListenTaxCollectorPresetsUpdatesMessage()
	case 4576:
		return NewStopListenTaxCollectorUpdatesMessage()
	case 3109:
		return NewStopToListenRunningFightRequestMessage()
	case 6526:
		return NewStorageInventoryContentMessage()
	case 8968:
		return NewStorageKamasUpdateMessage()
	case 8450:
		return NewStorageObjectRemoveMessage()
	case 2670:
		return NewStorageObjectUpdateMessage()
	case 1673:
		return NewStorageObjectsRemoveMessage()
	case 5323:
		return NewStorageObjectsUpdateMessage()
	case 1678:
		return NewSubareaRewardRateMessage()
	case 8244:
		return NewSubscriptionLimitationMessage()
	case 8183:
		return NewSubscriptionZoneMessage()
	case 4015:
		return NewSurrenderInfoRequestMessage()
	case 99:
		return NewSurrenderInfoResponseMessage()
	case 6944:
		return NewSurrenderStateMessage()
	case 4209:
		return NewSurrenderVoteCastMessage()
	case 6083:
		return NewSurrenderVoteEndMessage()
	case 6177:
		return NewSurrenderVoteStartMessage()
	case 6154:
		return NewSurrenderVoteUpdateMessage()
	case 4870:
		return NewSwitchArenaXpRewardsModeMessage()
	case 9614:
		return NewSymbioticObjectAssociateRequestMessage()
	case 7196:
		return NewSymbioticObjectAssociatedMessage()
	case 2086:
		return NewSymbioticObjectErrorMessage()
	case 5943:
		return NewSystemMessageDisplayMessage()
	case 7370:
		return NewTaxCollectorAddedMessage()
	case 5361:
		return NewTaxCollectorAttackedMessage()
	case 4787:
		return NewTaxCollectorAttackedResultMessage()
	case 3500:
		return NewTaxCollectorDialogQuestionBasicMessage()
	case 8713:
		return NewTaxCollectorDialogQuestionExtendedMessage()
	case 2451:
		return NewTaxCollectorEquipmentUpdateMessage()
	case 2186:
		return NewTaxCollectorErrorMessage()
	case 3704:
		return NewTaxCollectorHarvestedMessage()
	case 4833:
		return NewTaxCollectorMovementsOfflineMessage()
	case 2428:
		return NewTaxCollectorOrderedSpellUpdatedMessage()
	case 2628:
		return NewTaxCollectorPresetSpellUpdatedMessage()
	case 9900:
		return NewTaxCollectorPresetsMessage()
	case 2310:
		return NewTaxCollectorRemovedMessage()
	case 5744:
		return NewTaxCollectorStateUpdateMessage()
	case 368:
		return NewTeleportBuddiesAnswerMessage()
	case 9554:
		return NewTeleportBuddiesMessage()
	case 2454:
		return NewTeleportBuddiesRequestedMessage()
	case 7615:
		return NewTeleportDestinationsMessage()
	case 9340:
		return NewTeleportHavenBagAnswerMessage()
	case 8587:
		return NewTeleportHavenBagRequestMessage()
	case 6669:
		return NewTeleportOnSameMapMessage()
	case 4603:
		return NewTeleportPlayerAnswerMessage()
	case 4378:
		return NewTeleportPlayerCloseMessage()
	case 9777:
		return NewTeleportPlayerOfferMessage()
	case 9439:
		return NewTeleportRequestMessage()
	case 3588:
		return NewTeleportToBuddyAnswerMessage()
	case 4968:
		return NewTeleportToBuddyCloseMessage()
	case 5491:
		return NewTeleportToBuddyOfferMessage()
	case 3766:
		return NewTextInformationMessage()
	case 455:
		return NewTitleGainedMessage()
	case 4759:
		return NewTitleLostMessage()
	case 3338:
		return NewTitleSelectErrorMessage()
	case 5375:
		return NewTitleSelectRequestMessage()
	case 1653:
		return NewTitleSelectedMessage()
	case 3749:
		return NewTitlesAndOrnamentsListMessage()
	case 483:
		return NewTitlesAndOrnamentsListRequestMessage()
	case 3893:
		return NewTopTaxCollectorListMessage()
	case 1628:
		return NewTreasureHuntAvailableRetryCountUpdateMessage()
	case 2459:
		return NewTreasureHuntDigRequestAnswerFailedMessage()
	case 3567:
		return NewTreasureHuntDigRequestAnswerMessage()
	case 6696:
		return NewTreasureHuntDigRequestMessage()
	case 1937:
		return NewTreasureHuntFinishedMessage()
	case 2928:
		return NewTreasureHuntFlagRemoveRequestMessage()
	case 6871:
		return NewTreasureHuntFlagRequestAnswerMessage()
	case 6775:
		return NewTreasureHuntFlagRequestMessage()
	case 143:
		return NewTreasureHuntGiveUpRequestMessage()
	case 7183:
		return NewTreasureHuntLegendaryRequestMessage()
	case 7235:
		return NewTreasureHuntMessage()
	case 7470:
		return NewTreasureHuntRequestAnswerMessage()
	case 8368:
		return NewTreasureHuntShowLegendaryUIMessage()
	case 3339:
		return NewTrustStatusMessage()
	case 2136:
		return NewUnfollowQuestObjectiveRequestMessage()
	case 1965:
		return NewUpdateAllGuildRankRequestMessage()
	case 9846:
		return NewUpdateGuildRankRequestMessage()
	case 3888:
		return NewUpdateGuildRightsMessage()
	case 1395:
		return NewUpdateLifePointsMessage()
	case 1751:
		return NewUpdateMapPlayersAgressableStatusMessage()
	case 1346:
		return NewUpdateMountCharacteristicsMessage()
	case 691:
		return NewUpdateRecruitmentInformationMessage()
	case 5808:
		return NewUpdateSelfAgressableStatusMessage()
	case 4732:
		return NewWarnOnPermaDeathMessage()
	case 5243:
		return NewWarnOnPermaDeathStateMessage()
	case 8887:
		return NewWatchInventoryContentMessage()
	case 5644:
		return NewWatchQuestListMessage()
	case 141:
		return NewWatchQuestStepInfoMessage()
	case 4330:
		return NewWatchQuestStepInfoRequestMessage()
	case 3871:
		return NewWrapperObjectAssociatedMessage()
	case 5244:
		return NewWrapperObjectDissociateRequestMessage()
	case 5215:
		return NewWrapperObjectErrorMessage()
	case 9132:
		return NewZaapDestinationsMessage()
	case 3373:
		return NewZaapRespawnSaveRequestMessage()
	case 9315:
		return NewZaapRespawnUpdatedMessage()
	default:
		return nil
	}
}

func getTypeById(id int) NetworkMessage { // In reality is network type
	switch id {
	case 5789:
		return NewAbstractCharacterInformation()
	case 8841:
		return NewAbstractContactInformations()
	case 4079:
		return NewAbstractFightDispellableEffect()
	case 8432:
		return NewAbstractFightTeamInformations()
	case 1300:
		return NewAbstractPlayerSearchInformation()
	case 6837:
		return NewAbstractSocialGroupInfos()
	case 8406:
		return NewAccountHouseInformations()
	case 3196:
		return NewAccountTagInformation()
	case 2764:
		return NewAchievement()
	case 6607:
		return NewAchievementAchieved()
	case 9874:
		return NewAchievementAchievedRewardable()
	case 2341:
		return NewAchievementObjective()
	case 6487:
		return NewAchievementPioneerRank()
	case 5360:
		return NewAchievementStartedObjective()
	case 1584:
		return NewAcquaintanceInformation()
	case 251:
		return NewAcquaintanceOnlineInformation()
	case 2626:
		return NewActorAlignmentInformations()
	case 4048:
		return NewActorExtendedAlignmentInformations()
	case 2066:
		return NewActorOrientation()
	case 9953:
		return NewActorRestrictionsInformations()
	case 1456:
		return NewAdditionalTaxCollectorInformation()
	case 6140:
		return NewAgressableStatusMessage()
	case 6941:
		return NewAlignmentWarEffortInformation()
	case 6340:
		return NewAllianceFactSheetInformation()
	case 1197:
		return NewAllianceInformation()
	case 7229:
		return NewAllianceInsiderPrismInformation()
	case 7753:
		return NewAllianceMemberInfo()
	case 4594:
		return NewAlliancePrismInformation()
	case 4753:
		return NewAllianceRecruitmentInformation()
	case 2959:
		return NewAlterationInfo()
	case 6089:
		return NewAlternativeMonstersInGroupLightInformations()
	case 4038:
		return NewAnomalySubareaInformation()
	case 9959:
		return NewApplicationPlayerInformation()
	case 3976:
		return NewArenaLeagueRanking()
	case 2174:
		return NewArenaRankInfos()
	case 6167:
		return NewAtlasPointsInformations()
	case 5062:
		return NewBaseSpawnMonsterInformation()
	case 2995:
		return NewBasicAllianceInformations()
	case 4606:
		return NewBasicGuildInformations()
	case 5416:
		return NewBasicNamedAllianceInformations()
	case 2811:
		return NewBidExchangerObjectInfo()
	case 7507:
		return NewBreachBranch()
	case 3273:
		return NewBreachReward()
	case 7749:
		return NewBufferInformation()
	case 1494:
		return NewChallengeInformation()
	case 4052:
		return NewChallengeTargetInformation()
	case 540:
		return NewChallengeTargetWithAttackerInformation()
	case 4367:
		return NewCharacterBaseInformations()
	case 6994:
		return NewCharacterBasicMinimalInformations()
	case 6701:
		return NewCharacterCharacteristic()
	case 901:
		return NewCharacterCharacteristicDetailed()
	case 3299:
		return NewCharacterCharacteristicForPreset()
	case 3951:
		return NewCharacterCharacteristicValue()
	case 294:
		return NewCharacterCharacteristics()
	case 4504:
		return NewCharacterCharacteristicsInformations()
	case 3983:
		return NewCharacterHardcoreOrEpicInformations()
	case 4814:
		return NewCharacterMinimalAllianceInformations()
	case 2143:
		return NewCharacterMinimalGuildInformations()
	case 9474:
		return NewCharacterMinimalInformations()
	case 1529:
		return NewCharacterMinimalPlusLookInformations()
	case 5126:
		return NewCharacterMinimalSocialPublicInformations()
	case 5105:
		return NewCharacterRemodelingInformation()
	case 3313:
		return NewCharacterToRemodelInformations()
	case 1943:
		return NewCharacterUsableCharacteristicDetailed()
	case 7492:
		return NewContribution()
	case 8943:
		return NewDebtInformation()
	case 2478:
		return NewDecraftedItemStackInfo()
	case 1061:
		return NewDungeonPartyFinderPlayer()
	case 6250:
		return NewEntitiesPreset()
	case 2447:
		return NewEntityDispositionInformations()
	case 9779:
		return NewEntityInformation()
	case 6640:
		return NewEntityLook()
	case 4990:
		return NewEntityMovementInformations()
	case 8307:
		return NewExtendedBreachBranch()
	case 4080:
		return NewExtendedLockedBreachBranch()
	case 8585:
		return NewFightAllianceTeamInformations()
	case 9113:
		return NewFightCommonInformations()
	case 2061:
		return NewFightDetailedTemporaryBoostEffect()
	case 8836:
		return NewFightDispellableEffectExtendedInformations()
	case 3736:
		return NewFightEntityDispositionInformations()
	case 3630:
		return NewFightExternalInformations()
	case 3066:
		return NewFightLoot()
	case 5840:
		return NewFightLootObject()
	case 1574:
		return NewFightOptionsInformations()
	case 2770:
		return NewFightPhase()
	case 8078:
		return NewFightResultAdditionalData()
	case 5571:
		return NewFightResultExperienceData()
	case 613:
		return NewFightResultFighterListEntry()
	case 3594:
		return NewFightResultListEntry()
	case 2795:
		return NewFightResultMutantListEntry()
	case 6813:
		return NewFightResultPlayerListEntry()
	case 7233:
		return NewFightResultPvpData()
	case 6507:
		return NewFightResultTaxCollectorListEntry()
	case 5557:
		return NewFightStartingPositions()
	case 3291:
		return NewFightTeamInformations()
	case 6964:
		return NewFightTeamLightInformations()
	case 4535:
		return NewFightTeamMemberCharacterInformations()
	case 5854:
		return NewFightTeamMemberEntityInformation()
	case 9810:
		return NewFightTeamMemberInformations()
	case 7397:
		return NewFightTeamMemberMonsterInformations()
	case 4832:
		return NewFightTeamMemberTaxCollectorInformations()
	case 793:
		return NewFightTeamMemberWithAllianceCharacterInformations()
	case 2521:
		return NewFightTemporaryBoostEffect()
	case 4574:
		return NewFightTemporaryBoostStateEffect()
	case 9695:
		return NewFightTemporaryBoostWeaponDamagesEffect()
	case 7119:
		return NewFightTemporarySpellBoostEffect()
	case 3450:
		return NewFightTemporarySpellImmunityEffect()
	case 5487:
		return NewFightTriggeredEffect()
	case 8829:
		return NewFinishMoveInformations()
	case 2798:
		return NewForgettableSpellItem()
	case 6253:
		return NewForgettableSpellsPreset()
	case 861:
		return NewFriendInformations()
	case 9348:
		return NewFriendOnlineInformations()
	case 8260:
		return NewFriendSpouseInformations()
	case 8676:
		return NewFriendSpouseOnlineInformations()
	case 4653:
		return NewFullStatsPreset()
	case 7527:
		return NewGameActionItem()
	case 8022:
		return NewGameActionMark()
	case 5710:
		return NewGameActionMarkedCell()
	case 9060:
		return NewGameContextActorInformations()
	case 3056:
		return NewGameContextActorPositionInformations()
	case 1891:
		return NewGameContextBasicSpawnInformation()
	case 5419:
		return NewGameContextSummonsInformation()
	case 8061:
		return NewGameFightAIInformations()
	case 3578:
		return NewGameFightCharacterInformations()
	case 714:
		return NewGameFightCharacteristics()
	case 7405:
		return NewGameFightEffectTriggerCount()
	case 4556:
		return NewGameFightEntityInformation()
	case 3181:
		return NewGameFightFighterEntityLightInformation()
	case 5601:
		return NewGameFightFighterInformations()
	case 4794:
		return NewGameFightFighterLightInformations()
	case 3925:
		return NewGameFightFighterMonsterLightInformations()
	case 4176:
		return NewGameFightFighterNamedInformations()
	case 5195:
		return NewGameFightFighterNamedLightInformations()
	case 3310:
		return NewGameFightFighterTaxCollectorLightInformations()
	case 1792:
		return NewGameFightMonsterInformations()
	case 7656:
		return NewGameFightMonsterWithAlignmentInformations()
	case 419:
		return NewGameFightMutantInformations()
	case 6502:
		return NewGameFightResumeSlaveInfo()
	case 9361:
		return NewGameFightSpellCooldown()
	case 7175:
		return NewGameFightTaxCollectorInformations()
	case 8764:
		return NewGameRolePlayActorInformations()
	case 9304:
		return NewGameRolePlayCharacterInformations()
	case 7360:
		return NewGameRolePlayGroupMonsterInformations()
	case 6822:
		return NewGameRolePlayGroupMonsterWaveInformations()
	case 9318:
		return NewGameRolePlayHumanoidInformations()
	case 9212:
		return NewGameRolePlayMountInformations()
	case 2574:
		return NewGameRolePlayMutantInformations()
	case 2808:
		return NewGameRolePlayNamedActorInformations()
	case 8347:
		return NewGameRolePlayNpcInformations()
	case 6478:
		return NewGameRolePlayNpcQuestFlag()
	case 7588:
		return NewGameRolePlayNpcWithQuestInformations()
	case 9999:
		return NewGameRolePlayPortalInformations()
	case 7369:
		return NewGameRolePlayPrismInformations()
	case 4101:
		return NewGameRolePlayTaxCollectorInformations()
	case 9279:
		return NewGameRolePlayTreasureHintInformations()
	case 4792:
		return NewGameServerInformations()
	case 8076:
		return NewGoldItem()
	case 5953:
		return NewGroupMonsterStaticInformations()
	case 4829:
		return NewGroupMonsterStaticInformationsWithAlternatives()
	case 643:
		return NewGuildFactSheetInformations()
	case 7929:
		return NewGuildInformations()
	case 9836:
		return NewGuildInsiderFactSheetInformations()
	case 3398:
		return NewGuildLevelUpActivity()
	case 9067:
		return NewGuildLogbookChestActivity()
	case 8590:
		return NewGuildLogbookEntryBasicInformation()
	case 4949:
		return NewGuildMemberInfo()
	case 3935:
		return NewGuildPaddockActivity()
	case 2970:
		return NewGuildPlayerFlowActivity()
	case 8680:
		return NewGuildPlayerRankUpdateActivity()
	case 3270:
		return NewGuildRankActivity()
	case 5578:
		return NewGuildRecruitmentInformation()
	case 7681:
		return NewGuildUnlockNewTabActivity()
	case 3250:
		return NewHavenBagFurnitureInformation()
	case 8049:
		return NewHavenBagRoomPreviewInformation()
	case 4071:
		return NewHouseGuildedInformations()
	case 2374:
		return NewHouseInformations()
	case 409:
		return NewHouseInformationsForGuild()
	case 6977:
		return NewHouseInformationsForSell()
	case 2801:
		return NewHouseInformationsInside()
	case 3219:
		return NewHouseInstanceInformations()
	case 5255:
		return NewHouseOnMapInformations()
	case 495:
		return NewHumanInformations()
	case 7701:
		return NewHumanOption()
	case 7953:
		return NewHumanOptionAlliance()
	case 7646:
		return NewHumanOptionEmote()
	case 8287:
		return NewHumanOptionFollowers()
	case 1132:
		return NewHumanOptionGuild()
	case 446:
		return NewHumanOptionObjectUse()
	case 5782:
		return NewHumanOptionOrnament()
	case 2036:
		return NewHumanOptionSkillUse()
	case 4364:
		return NewHumanOptionSpeedMultiplier()
	case 2189:
		return NewHumanOptionTitle()
	case 2553:
		return NewIconNamedPreset()
	case 619:
		return NewIdentifiedEntityDispositionInformations()
	case 2099:
		return NewIgnoredInformations()
	case 941:
		return NewIgnoredOnlineInformations()
	case 5735:
		return NewIndexedEntityLook()
	case 6065:
		return NewInteractiveElement()
	case 7880:
		return NewInteractiveElementNamedSkill()
	case 2087:
		return NewInteractiveElementSkill()
	case 2952:
		return NewInteractiveElementWithAgeBonus()
	case 8235:
		return NewItem()
	case 5929:
		return NewItemDurability()
	case 5291:
		return NewItemForPreset()
	case 4783:
		return NewItemsPreset()
	case 5496:
		return NewJobBookSubscription()
	case 5157:
		return NewJobCrafterDirectoryEntryJobInfo()
	case 9204:
		return NewJobCrafterDirectoryEntryPlayerInfo()
	case 7693:
		return NewJobCrafterDirectoryListEntry()
	case 7939:
		return NewJobCrafterDirectorySettings()
	case 4698:
		return NewJobDescription()
	case 1492:
		return NewJobExperience()
	case 2104:
		return NewKamaDebtInformation()
	case 7195:
		return NewKohAllianceInfo()
	case 9987:
		return NewKohAllianceRoleMembers()
	case 5560:
		return NewKohScore()
	case 4121:
		return NewKothWinner()
	case 7750:
		return NewLeagueFriendInformations()
	case 315:
		return NewMapCoordinates()
	case 7010:
		return NewMapCoordinatesAndId()
	case 1599:
		return NewMapCoordinatesExtended()
	case 7887:
		return NewMapNpcQuestInfo()
	case 9518:
		return NewMapObstacle()
	case 1084:
		return NewMonsterBoosts()
	case 7023:
		return NewMonsterInGroupInformations()
	case 1537:
		return NewMonsterInGroupLightInformations()
	case 4446:
		return NewMountClientData()
	case 4252:
		return NewMountInformationsForPaddock()
	case 9179:
		return NewNamedPartyTeam()
	case 2171:
		return NewNamedPartyTeamWithOutcome()
	case 7825:
		return NewNuggetsBeneficiary()
	case 7605:
		return NewObjectEffect()
	case 3987:
		return NewObjectEffectCreature()
	case 3435:
		return NewObjectEffectDate()
	case 670:
		return NewObjectEffectDice()
	case 7031:
		return NewObjectEffectDuration()
	case 3930:
		return NewObjectEffectInteger()
	case 5489:
		return NewObjectEffectLadder()
	case 843:
		return NewObjectEffectMinMax()
	case 3353:
		return NewObjectEffectMount()
	case 3424:
		return NewObjectEffectString()
	case 6602:
		return NewObjectEffects()
	case 1685:
		return NewObjectItem()
	case 7294:
		return NewObjectItemGenericQuantity()
	case 1282:
		return NewObjectItemInRolePlay()
	case 8098:
		return NewObjectItemInformationWithQuantity()
	case 9931:
		return NewObjectItemMinimalInformation()
	case 7571:
		return NewObjectItemNotInContainer()
	case 5434:
		return NewObjectItemQuantity()
	case 3552:
		return NewObjectItemQuantityPriceDateEffects()
	case 9372:
		return NewObjectItemToSell()
	case 859:
		return NewObjectItemToSellInBid()
	case 5301:
		return NewObjectItemToSellInNpcShop()
	case 5612:
		return NewPaddockBuyableInformations()
	case 6426:
		return NewPaddockContentInformations()
	case 4294:
		return NewPaddockGuildedInformations()
	case 208:
		return NewPaddockInformations()
	case 5311:
		return NewPaddockInformationsForSell()
	case 4571:
		return NewPaddockInstancesInformations()
	case 2373:
		return NewPaddockItem()
	case 5790:
		return NewPartyEntityBaseInformation()
	case 118:
		return NewPartyEntityMemberInformation()
	case 3127:
		return NewPartyGuestInformations()
	case 3577:
		return NewPartyInvitationMemberInformations()
	case 2056:
		return NewPartyMemberArenaInformations()
	case 5313:
		return NewPartyMemberGeoPosition()
	case 9391:
		return NewPartyMemberInformations()
	case 3703:
		return NewPlayerNote()
	case 3022:
		return NewPlayerSearchCharacterNameInformation()
	case 3389:
		return NewPlayerSearchTagInformation()
	case 2273:
		return NewPlayerStatus()
	case 8257:
		return NewPlayerStatusExtended()
	case 2396:
		return NewPortalInformation()
	case 3628:
		return NewPreset()
	case 5695:
		return NewPresetsContainerPreset()
	case 9281:
		return NewPrismGeolocalizedInformation()
	case 65:
		return NewPrismInformation()
	case 9739:
		return NewProtectedEntityWaitingForHelpInfo()
	case 7451:
		return NewQuestActiveDetailedInformations()
	case 7048:
		return NewQuestActiveInformations()
	case 7248:
		return NewQuestObjectiveInformations()
	case 8731:
		return NewQuestObjectiveInformationsWithCompletion()
	case 3538:
		return NewRankInformation()
	case 1831:
		return NewRankMinimalInformation()
	case 5787:
		return NewRankPublicInformation()
	case 2736:
		return NewRecycledItem()
	case 3743:
		return NewRemodelingInformation()
	case 780:
		return NewSellerBuyerDescriptor()
	case 9977:
		return NewServerSessionConstant()
	case 2867:
		return NewServerSessionConstantInteger()
	case 4175:
		return NewServerSessionConstantLong()
	case 7359:
		return NewServerSessionConstantString()
	case 5117:
		return NewShortcut()
	case 1189:
		return NewShortcutEmote()
	case 3288:
		return NewShortcutEntitiesPreset()
	case 8861:
		return NewShortcutObject()
	case 2079:
		return NewShortcutObjectItem()
	case 1697:
		return NewShortcutObjectPreset()
	case 4118:
		return NewShortcutSmiley()
	case 576:
		return NewShortcutSpell()
	case 361:
		return NewSimpleCharacterCharacteristicForPreset()
	case 3573:
		return NewSkillActionDescription()
	case 5684:
		return NewSkillActionDescriptionCollect()
	case 5905:
		return NewSkillActionDescriptionCraft()
	case 1078:
		return NewSkillActionDescriptionTimed()
	case 4014:
		return NewSocialApplicationInformation()
	case 6817:
		return NewSocialEmblem()
	case 2810:
		return NewSocialFight()
	case 2355:
		return NewSocialFightInfo()
	case 9920:
		return NewSocialMember()
	case 2211:
		return NewSocialRecruitmentInformation()
	case 3409:
		return NewSpawnCharacterInformation()
	case 4847:
		return NewSpawnCompanionInformation()
	case 339:
		return NewSpawnInformation()
	case 571:
		return NewSpawnMonsterInformation()
	case 8568:
		return NewSpawnScaledMonsterInformation()
	case 1457:
		return NewSpellForPreset()
	case 8615:
		return NewSpellItem()
	case 2892:
		return NewSpellModifierMessage()
	case 7774:
		return NewSpellsPreset()
	case 1041:
		return NewStatedElement()
	case 1815:
		return NewStatisticData()
	case 7901:
		return NewStatisticDataBoolean()
	case 4573:
		return NewStatisticDataByte()
	case 7834:
		return NewStatisticDataInt()
	case 1762:
		return NewStatisticDataShort()
	case 4102:
		return NewStatisticDataString()
	case 1993:
		return NewStatsPreset()
	case 8947:
		return NewStorageTabInformation()
	case 9491:
		return NewSubEntity()
	case 8859:
		return NewSurrenderAccepted()
	case 8906:
		return NewSurrenderRefused()
	case 9548:
		return NewSurrenderRefusedBeforeTurn()
	case 2726:
		return NewSurrenderRefusedBeforeVote()
	case 8655:
		return NewSurrenderResponse()
	case 8687:
		return NewSurrenderVoteAccepted()
	case 1140:
		return NewSurrenderVoteRefused()
	case 8978:
		return NewSurrenderVoteRefusedAlreadyAsked()
	case 9709:
		return NewSurrenderVoteRefusedBeforeTurn()
	case 5188:
		return NewSurrenderVoteRefusedWaitBetweenVotes()
	case 3674:
		return NewSurrenderVoteResponse()
	case 4890:
		return NewTaxCollectorBasicInformations()
	case 1982:
		return NewTaxCollectorComplementaryInformations()
	case 4158:
		return NewTaxCollectorInformations()
	case 4183:
		return NewTaxCollectorLootInformations()
	case 7487:
		return NewTaxCollectorMovement()
	case 3173:
		return NewTaxCollectorOrderedSpell()
	case 1854:
		return NewTaxCollectorPreset()
	case 1672:
		return NewTaxCollectorStaticInformations()
	case 5931:
		return NewTaxCollectorWaitingForHelpInformations()
	case 1570:
		return NewTeleportDestination()
	case 8258:
		return NewTreasureHuntFlag()
	case 8185:
		return NewTreasureHuntStep()
	case 5858:
		return NewTreasureHuntStepDig()
	case 9719:
		return NewTreasureHuntStepFight()
	case 9008:
		return NewTreasureHuntStepFollowDirection()
	case 8809:
		return NewTreasureHuntStepFollowDirectionToHint()
	case 9275:
		return NewTreasureHuntStepFollowDirectionToPOI()
	case 3311:
		return NewTrustCertificate()
	case 2137:
		return NewUpdateMountBooleanCharacteristic()
	case 470:
		return NewUpdateMountCharacteristic()
	case 5600:
		return NewUpdateMountIntegerCharacteristic()
	case 570:
		return NewUpdatedStorageTabInformation()
	case 8662:
		return NewUuid()
	case 580:
		return NewVersion()
	default:
		return nil
	}
}
